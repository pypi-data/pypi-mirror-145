# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HubReportResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'serial_number': 'str',
        'firmware_version': 'str',
        'hardware_revision': 'HardwareRevisionChild',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'power_type': 'HubPowerType',
        'number_of_ports': 'int',
        'triggering_enabled': 'bool',
        'reporting_node_total': 'int',
        'is_online': 'bool',
        'last_update_time': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'serial_number': 'SerialNumber',
        'firmware_version': 'FirmwareVersion',
        'hardware_revision': 'HardwareRevision',
        'location': 'Location',
        'corporation': 'Corporation',
        'power_type': 'PowerType',
        'number_of_ports': 'NumberOfPorts',
        'triggering_enabled': 'TriggeringEnabled',
        'reporting_node_total': 'ReportingNodeTotal',
        'is_online': 'IsOnline',
        'last_update_time': 'LastUpdateTime'
    }

    def __init__(self, id=None, name=None, serial_number=None, firmware_version=None, hardware_revision=None, location=None, corporation=None, power_type=None, number_of_ports=None, triggering_enabled=None, reporting_node_total=None, is_online=None, last_update_time=None):  # noqa: E501
        """HubReportResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._serial_number = None
        self._firmware_version = None
        self._hardware_revision = None
        self._location = None
        self._corporation = None
        self._power_type = None
        self._number_of_ports = None
        self._triggering_enabled = None
        self._reporting_node_total = None
        self._is_online = None
        self._last_update_time = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        self.serial_number = serial_number
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if hardware_revision is not None:
            self.hardware_revision = hardware_revision
        self.location = location
        self.corporation = corporation
        if power_type is not None:
            self.power_type = power_type
        if number_of_ports is not None:
            self.number_of_ports = number_of_ports
        self.triggering_enabled = triggering_enabled
        if reporting_node_total is not None:
            self.reporting_node_total = reporting_node_total
        if is_online is not None:
            self.is_online = is_online
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def id(self):
        """Gets the id of this HubReportResponse.  # noqa: E501

        Id of the hub  # noqa: E501

        :return: The id of this HubReportResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HubReportResponse.

        Id of the hub  # noqa: E501

        :param id: The id of this HubReportResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this HubReportResponse.  # noqa: E501

        Name of the hub  # noqa: E501

        :return: The name of this HubReportResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HubReportResponse.

        Name of the hub  # noqa: E501

        :param name: The name of this HubReportResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this HubReportResponse.  # noqa: E501

        Serial number of the hub  # noqa: E501

        :return: The serial_number of this HubReportResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this HubReportResponse.

        Serial number of the hub  # noqa: E501

        :param serial_number: The serial_number of this HubReportResponse.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def firmware_version(self):
        """Gets the firmware_version of this HubReportResponse.  # noqa: E501

        firmware version of the hub  # noqa: E501

        :return: The firmware_version of this HubReportResponse.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this HubReportResponse.

        firmware version of the hub  # noqa: E501

        :param firmware_version: The firmware_version of this HubReportResponse.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def hardware_revision(self):
        """Gets the hardware_revision of this HubReportResponse.  # noqa: E501


        :return: The hardware_revision of this HubReportResponse.  # noqa: E501
        :rtype: HardwareRevisionChild
        """
        return self._hardware_revision

    @hardware_revision.setter
    def hardware_revision(self, hardware_revision):
        """Sets the hardware_revision of this HubReportResponse.


        :param hardware_revision: The hardware_revision of this HubReportResponse.  # noqa: E501
        :type: HardwareRevisionChild
        """

        self._hardware_revision = hardware_revision

    @property
    def location(self):
        """Gets the location of this HubReportResponse.  # noqa: E501


        :return: The location of this HubReportResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HubReportResponse.


        :param location: The location of this HubReportResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this HubReportResponse.  # noqa: E501


        :return: The corporation of this HubReportResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this HubReportResponse.


        :param corporation: The corporation of this HubReportResponse.  # noqa: E501
        :type: CorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    @property
    def power_type(self):
        """Gets the power_type of this HubReportResponse.  # noqa: E501


        :return: The power_type of this HubReportResponse.  # noqa: E501
        :rtype: HubPowerType
        """
        return self._power_type

    @power_type.setter
    def power_type(self, power_type):
        """Sets the power_type of this HubReportResponse.


        :param power_type: The power_type of this HubReportResponse.  # noqa: E501
        :type: HubPowerType
        """

        self._power_type = power_type

    @property
    def number_of_ports(self):
        """Gets the number_of_ports of this HubReportResponse.  # noqa: E501

        The number of ports available.  A single sensor can report to a single port on a Hub.  # noqa: E501

        :return: The number_of_ports of this HubReportResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_ports

    @number_of_ports.setter
    def number_of_ports(self, number_of_ports):
        """Sets the number_of_ports of this HubReportResponse.

        The number of ports available.  A single sensor can report to a single port on a Hub.  # noqa: E501

        :param number_of_ports: The number_of_ports of this HubReportResponse.  # noqa: E501
        :type: int
        """

        self._number_of_ports = number_of_ports

    @property
    def triggering_enabled(self):
        """Gets the triggering_enabled of this HubReportResponse.  # noqa: E501

        Is hub triggering enabled  # noqa: E501

        :return: The triggering_enabled of this HubReportResponse.  # noqa: E501
        :rtype: bool
        """
        return self._triggering_enabled

    @triggering_enabled.setter
    def triggering_enabled(self, triggering_enabled):
        """Sets the triggering_enabled of this HubReportResponse.

        Is hub triggering enabled  # noqa: E501

        :param triggering_enabled: The triggering_enabled of this HubReportResponse.  # noqa: E501
        :type: bool
        """
        if triggering_enabled is None:
            raise ValueError("Invalid value for `triggering_enabled`, must not be `None`")  # noqa: E501

        self._triggering_enabled = triggering_enabled

    @property
    def reporting_node_total(self):
        """Gets the reporting_node_total of this HubReportResponse.  # noqa: E501

        The number of nodes currently reporting to the hub.  # noqa: E501

        :return: The reporting_node_total of this HubReportResponse.  # noqa: E501
        :rtype: int
        """
        return self._reporting_node_total

    @reporting_node_total.setter
    def reporting_node_total(self, reporting_node_total):
        """Sets the reporting_node_total of this HubReportResponse.

        The number of nodes currently reporting to the hub.  # noqa: E501

        :param reporting_node_total: The reporting_node_total of this HubReportResponse.  # noqa: E501
        :type: int
        """

        self._reporting_node_total = reporting_node_total

    @property
    def is_online(self):
        """Gets the is_online of this HubReportResponse.  # noqa: E501

        Online state of the hub  # noqa: E501

        :return: The is_online of this HubReportResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this HubReportResponse.

        Online state of the hub  # noqa: E501

        :param is_online: The is_online of this HubReportResponse.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def last_update_time(self):
        """Gets the last_update_time of this HubReportResponse.  # noqa: E501

        Last update time of the hub  # noqa: E501

        :return: The last_update_time of this HubReportResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this HubReportResponse.

        Last update time of the hub  # noqa: E501

        :param last_update_time: The last_update_time of this HubReportResponse.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HubReportResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubReportResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
