import abc
from .typing import PathLike
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any

class InvalidHash(ValueError): ...

class Storage(ABC, metaclass=abc.ABCMeta):
    def __init__(self, algorithm: str = ...) -> None: ...
    @abstractmethod
    def exists(self, key: str) -> bool: ...
    @abstractmethod
    def load(self, key: str) -> bytes: ...
    @abstractmethod
    def save(self, key: str, data: bytes): ...
    def hash(self, data: bytes) -> str: ...
    def push(self, data: bytes) -> str: ...
    def pull(self, hash: str) -> bytes: ...
    def push_object(self, obj) -> str: ...
    def pull_object(self, hash: str) -> Any: ...
    def link(self, *markers) -> Link: ...

class Link:
    def __init__(self, *markers, storage: Storage): ...
    @property
    def storage(self) -> Storage: ...
    @property
    def marker(self) -> str: ...
    def exists(self) -> bool: ...
    def push(self, obj: bytes) -> None: ...
    def pull(self): ...
    def push_object(self, obj: Any) -> None: ...
    def pull_object(self) -> Any: ...

class LocalStorage(Storage):
    def __init__(self, root: PathLike, create: bool = ..., algorithm: str = ...) -> None: ...
    @property
    def root(self) -> Path: ...
    def exists(self, hash: str) -> bool: ...
    def save(self, hash: str, data: bytes) -> None: ...
    def load(self, hash: str) -> bytes: ...

class MemoryStorage(Storage):
    def __init__(self, algorithm: str = ...) -> None: ...
    def exists(self, key: str) -> bool: ...
    def load(self, key: str) -> bytes: ...
    def save(self, key: str, data: bytes): ...
