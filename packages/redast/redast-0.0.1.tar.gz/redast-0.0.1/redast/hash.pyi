import abc
from .bytes import Bytes as Bytes
from abc import ABC, abstractmethod
from typing import Callable, Iterator

class HashString(ABC, metaclass=abc.ABCMeta):
    def __init__(self, data: Bytes) -> None: ...
    def hexdigest(self) -> str: ...
    @abstractmethod
    def tohash(self, data: bytes) -> str: ...
    @abstractmethod
    def req_length(self) -> int: ...

def hexdigest(iterator: Iterator[bytes], algorithm: Callable) -> str: ...

class Blake2b(HashString):
    def tohash(self, data: bytes) -> str: ...
    def req_length(self) -> int: ...
