{"version":3,"sources":["pages/RunDetail/RunMetricCard.tsx","pages/RunDetail/RunDetailMetricsAndSystemTab.tsx","components/LineChart/LineChart.tsx","pages/RunDetail/hooks/useRunMetricsBatch.tsx"],"names":["RunMetricCard","batch","index","ErrorBoundary","className","LineChart","data","key","xValues","iters","yValues","values","color","dasharray","selectors","syncHoverState","noop","axesScaleType","xAxis","ScaleEnum","Linear","yAxis","ignoreOutliers","highlightMode","curveInterpolation","CurveEnum","component","size","tint","weight","isSystemMetric","name","formatSystemMetricName","contextToString","context","split","map","label","i","COLORS","length","memo","RunDetailMetricsAndSystemTab","runHash","runTraces","runBatch","isSystem","isRunBatchLoading","useRunMetricsBatch","React","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","tabView","BusyLoaderWrapper","isLoading","height","_","isEmpty","IllustrationBlock","title","forwardRef","props","ref","nameKey","aggregatedData","aggregationConfig","alignmentConfig","chartTitle","zoom","onZoomChange","readOnly","visBoxRef","useRef","margin","top","right","bottom","left","width","plotBoxRef","parentRef","visAreaRef","svgNodeRef","bgRectNodeRef","plotNodeRef","axesNodeRef","linesNodeRef","attributesNodeRef","xAxisLabelNodeRef","yAxisLabelNodeRef","highlightedNodeRef","axesRef","brushRef","linesRef","attributesRef","humanizerConfigRef","rafIDRef","renderChart","clearArea","processLineChartData","processedData","min","max","drawArea","current","xScale","getAxisScale","domainData","x","rangeData","scaleType","yScale","y","drawAxes","drawBgTickLines","drawLines","drawHoverAttributes","drawBrush","draw","resizeObserverCallback","useCallback","entries","window","requestAnimationFrame","observerReturnCallback","cancelAnimationFrame","useResizeObserver","useImperativeHandle","setActiveLineAndCircle","lineKey","focusedStateActive","force","updateHoverAttributes","xValue","dataSelector","clearHoverAttributes","setFocusedState","focusedState","active","runsBatchRequestRef","runDetailAppModel","getRunMetricsBatch","metric","isNil","call","abort"],"mappings":"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","file":"static/js/RunDetailMetricsAndSystemTab.js?version=e684aa1c148895f36099","sourcesContent":["import React, { memo } from 'react';\nimport { noop } from 'lodash-es';\n\nimport LineChart from 'components/LineChart/LineChart';\nimport { Badge, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport COLORS from 'config/colors/colors';\n\nimport contextToString from 'utils/contextToString';\nimport { CurveEnum, ScaleEnum } from 'utils/d3';\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport { formatSystemMetricName } from 'utils/formatSystemMetricName';\n\nfunction RunMetricCard({\n  batch,\n  index,\n}: any): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div className='RunDetailMetricsTab__container__chartContainer'>\n        <div className='RunDetailMetricsTab__container__chartContainer__chartBox'>\n          <ErrorBoundary>\n            <LineChart\n              data={[\n                {\n                  key: batch.key,\n                  data: {\n                    xValues: [...batch.iters],\n                    yValues: [...batch.values],\n                  },\n                  color: '#1c2852',\n                  dasharray: '0',\n                  selectors: [batch.key],\n                },\n              ]}\n              index={index}\n              syncHoverState={noop}\n              axesScaleType={{\n                xAxis: ScaleEnum.Linear,\n                yAxis: ScaleEnum.Linear,\n              }}\n              ignoreOutliers={false}\n              highlightMode={0}\n              curveInterpolation={CurveEnum.Linear}\n            />\n          </ErrorBoundary>\n        </div>\n        <div className='RunDetailMetricsTab__container__chartContainer__metricDetailBox'>\n          <Text component='p' size={10}>\n            Metric\n          </Text>\n          <Text\n            component='h4'\n            tint={100}\n            size={18}\n            weight={600}\n            className='RunDetailMetricsTab__container__chartContainer__metricDetailBox__metricName'\n          >\n            {isSystemMetric(batch?.name)\n              ? formatSystemMetricName(batch?.name)\n              : batch?.name}\n          </Text>\n          {contextToString(batch?.context)\n            ?.split(',')\n            .map((label: string, i: number) => (\n              <Badge\n                key={i}\n                size='large'\n                color={COLORS[0][(i + index) % COLORS[0].length]}\n                label={label || 'Empty context'}\n              />\n            ))}\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunMetricCard);\n","import React, { memo } from 'react';\nimport _ from 'lodash-es';\n\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\n\nimport { IRunBatch, IRunDetailMetricsAndSystemTabProps } from './types';\nimport RunMetricCard from './RunMetricCard';\nimport useRunMetricsBatch from './hooks/useRunMetricsBatch';\n\nfunction RunDetailMetricsAndSystemTab({\n  runHash,\n  runTraces,\n  runBatch,\n  isSystem,\n  isRunBatchLoading,\n}: IRunDetailMetricsAndSystemTabProps): React.FunctionComponentElement<React.ReactNode> {\n  useRunMetricsBatch({ runBatch, runTraces, runHash });\n\n  React.useEffect(() => {\n    analytics.pageView(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs[isSystem ? 'system' : 'metrics']\n        .tabView,\n    );\n  }, [isSystem]);\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={isRunBatchLoading}\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        {!_.isEmpty(runBatch) ? (\n          <div className='RunDetailMetricsTab'>\n            <div className='RunDetailMetricsTab__container'>\n              {runBatch.map((batch: IRunBatch, i: number) => {\n                return (\n                  <RunMetricCard key={batch.key} batch={batch} index={i} />\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <IllustrationBlock\n            size='xLarge'\n            className='runDetailParamsTabLoader'\n            title={`No tracked ${isSystem ? 'system' : ''} metrics`}\n          />\n        )}\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunDetailMetricsAndSystemTab);\n","import React from 'react';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport useResizeObserver from 'hooks/window/useResizeObserver';\n\nimport {\n  IAttributesRef,\n  IBrushRef,\n  ILineChartProps,\n} from 'types/components/LineChart/LineChart';\nimport { IFocusedState } from 'types/services/models/metrics/metricsAppModel';\n\nimport {\n  drawArea,\n  clearArea,\n  drawAxes,\n  drawLines,\n  processLineChartData,\n  getAxisScale,\n  drawBrush,\n  drawHoverAttributes,\n} from 'utils/d3';\n\nimport './LineChart.scss';\n\nconst LineChart = React.forwardRef(function LineChart(\n  props: ILineChartProps,\n  ref,\n): React.FunctionComponentElement<React.ReactNode> {\n  const {\n    data,\n    index = 0,\n    nameKey = '',\n    aggregatedData,\n    aggregationConfig,\n    syncHoverState,\n    axesScaleType,\n    ignoreOutliers,\n    alignmentConfig,\n    highlightMode,\n    curveInterpolation,\n    chartTitle,\n    zoom,\n    onZoomChange,\n    readOnly = false,\n  } = props;\n\n  // boxes\n  const visBoxRef = React.useRef({\n    margin: {\n      top: 30,\n      right: 20,\n      bottom: 30,\n      left: 60,\n    },\n    height: 0,\n    width: 0,\n  });\n  const plotBoxRef = React.useRef({\n    height: 0,\n    width: 0,\n  });\n\n  // containers\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const visAreaRef = React.useRef<HTMLDivElement>(null);\n\n  // d3 node elements\n  const svgNodeRef = React.useRef(null);\n  const bgRectNodeRef = React.useRef(null);\n  const plotNodeRef = React.useRef(null);\n  const axesNodeRef = React.useRef(null);\n  const linesNodeRef = React.useRef(null);\n  const attributesNodeRef = React.useRef(null);\n  const xAxisLabelNodeRef = React.useRef(null);\n  const yAxisLabelNodeRef = React.useRef(null);\n  const highlightedNodeRef = React.useRef(null);\n\n  // methods and values refs\n  const axesRef = React.useRef({});\n  const brushRef = React.useRef<IBrushRef>({});\n  const linesRef = React.useRef({});\n  const attributesRef = React.useRef<IAttributesRef>({});\n  const humanizerConfigRef = React.useRef({});\n  const rafIDRef = React.useRef<number>();\n\n  function draw() {\n    const { processedData, min, max } = processLineChartData(\n      data,\n      ignoreOutliers,\n    );\n\n    drawArea({\n      index,\n      nameKey,\n      visBoxRef,\n      plotBoxRef,\n      parentRef,\n      visAreaRef,\n      svgNodeRef,\n      bgRectNodeRef,\n      plotNodeRef,\n      axesNodeRef,\n      linesNodeRef,\n      attributesNodeRef,\n      chartTitle,\n    });\n\n    const { width, height, margin } = visBoxRef.current;\n\n    const xScale = getAxisScale({\n      domainData: [min.x, max.x],\n      rangeData: [0, width - margin.left - margin.right],\n      scaleType: axesScaleType.xAxis,\n    });\n    const yScale = getAxisScale({\n      domainData: [min.y, max.y],\n      rangeData: [height - margin.top - margin.bottom, 0],\n      scaleType: axesScaleType.yAxis,\n    });\n\n    attributesRef.current.xScale = xScale;\n    attributesRef.current.yScale = yScale;\n\n    drawAxes({\n      svgNodeRef,\n      axesNodeRef,\n      axesRef,\n      plotBoxRef,\n      xScale,\n      yScale,\n      width,\n      height,\n      margin,\n      alignmentConfig,\n      humanizerConfigRef,\n      drawBgTickLines: { y: true, x: false },\n    });\n\n    drawLines({\n      index,\n      data: processedData,\n      nameKey,\n      linesNodeRef,\n      linesRef,\n      curveInterpolation,\n      xScale,\n      yScale,\n      highlightMode,\n      aggregationConfig,\n      aggregatedData,\n    });\n\n    if (!readOnly) {\n      drawHoverAttributes({\n        index,\n        nameKey,\n        data: processedData,\n        axesScaleType,\n        highlightMode,\n        syncHoverState,\n        visAreaRef,\n        attributesRef,\n        plotBoxRef,\n        visBoxRef,\n        svgNodeRef,\n        bgRectNodeRef,\n        attributesNodeRef,\n        xAxisLabelNodeRef,\n        yAxisLabelNodeRef,\n        linesNodeRef,\n        highlightedNodeRef,\n        aggregationConfig,\n        alignmentConfig,\n      });\n    }\n\n    drawBrush({\n      index,\n      brushRef,\n      plotBoxRef,\n      plotNodeRef,\n      visBoxRef,\n      axesRef,\n      attributesRef,\n      linesRef,\n      svgNodeRef,\n      axesScaleType,\n      min,\n      max,\n      zoom,\n      onZoomChange,\n      readOnly,\n    });\n  }\n\n  function renderChart() {\n    clearArea({ visAreaRef });\n    draw();\n  }\n\n  const resizeObserverCallback: ResizeObserverCallback = React.useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries?.length) {\n        rafIDRef.current = window.requestAnimationFrame(renderChart);\n      }\n    },\n    [\n      data,\n      zoom,\n      ignoreOutliers,\n      highlightMode,\n      axesScaleType,\n      curveInterpolation,\n      aggregationConfig,\n      readOnly,\n      alignmentConfig,\n    ],\n  );\n\n  const observerReturnCallback = React.useCallback(() => {\n    if (rafIDRef.current) {\n      window.cancelAnimationFrame(rafIDRef.current);\n    }\n  }, []);\n\n  useResizeObserver(resizeObserverCallback, parentRef, observerReturnCallback);\n\n  React.useEffect(() => {\n    rafIDRef.current = window.requestAnimationFrame(renderChart);\n    return () => {\n      if (rafIDRef.current) {\n        window.cancelAnimationFrame(rafIDRef.current);\n      }\n    };\n  }, [\n    data,\n    zoom,\n    ignoreOutliers,\n    highlightMode,\n    axesScaleType,\n    curveInterpolation,\n    aggregationConfig,\n    readOnly,\n    alignmentConfig,\n  ]);\n\n  React.useImperativeHandle(ref, () => ({\n    setActiveLineAndCircle: (\n      lineKey: string,\n      focusedStateActive: boolean = false,\n      force: boolean = false,\n    ) => {\n      attributesRef.current.setActiveLineAndCircle?.(\n        lineKey,\n        focusedStateActive,\n        force,\n      );\n    },\n    updateHoverAttributes: (xValue: number, dataSelector?: string) => {\n      attributesRef.current.updateHoverAttributes?.(xValue, dataSelector);\n    },\n    clearHoverAttributes: () => {\n      attributesRef.current.clearHoverAttributes?.();\n    },\n    setFocusedState: (focusedState: IFocusedState) => {\n      attributesRef.current.focusedState = focusedState;\n    },\n  }));\n\n  return (\n    <ErrorBoundary>\n      <div\n        ref={parentRef}\n        className={`LineChart ${!readOnly && zoom?.active ? 'zoomMode' : ''}`}\n      >\n        <div ref={visAreaRef} />\n      </div>\n    </ErrorBoundary>\n  );\n});\n\nexport default React.memo(LineChart);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\n\nfunction useRunMetricsBatch({ runBatch, runTraces, runHash }: any) {\n  React.useEffect(() => {\n    const runsBatchRequestRef = runDetailAppModel.getRunMetricsBatch(\n      runTraces.metric,\n      runHash,\n    );\n    if (!runBatch && !_.isNil(runTraces)) {\n      runsBatchRequestRef.call();\n    }\n    return () => {\n      runsBatchRequestRef.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runTraces, runHash]);\n}\n\nexport default useRunMetricsBatch;\n"],"sourceRoot":""}