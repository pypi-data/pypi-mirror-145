{"version":3,"sources":["services/models/bookmarks/bookmarksAppModel.ts","pages/Bookmarks/components/BookmarkCard/BookmarkCard.tsx","pages/Bookmarks/Bookmarks.tsx","pages/Bookmarks/BookmarksContainer.tsx","services/api/apps/appsService.ts","assets/icons/successIcon.svg","assets/icons/errorIcon.svg","components/NotificationContainer/NotificationContainer.tsx","services/api/dashboard/dashboardService.ts","components/AppBar/AppBar.tsx","components/ConfirmModal/ConfirmModal.tsx","components/CopyToClipBoard/CopyToClipBoard.tsx","components/CodeBlock/CodeBlock.tsx"],"names":["bookmarksRequestRef","model","createModel","isLoading","listData","notifyData","getBookmarksData","dashboardService","fetchDashboardsList","call","then","data","a","appsService","fetchAppsList","detail","exceptionHandler","appsList","map","item","app","find","appData","id","app_id","select","state","type","setState","onNotificationAdd","notification","Date","now","messages","message","severity","abort","deleteDashboard","getState","newListData","filter","bookmark","bookmarkAppModel","initialize","init","err","destroy","onBookmarkDelete","onBookmarksNotificationDelete","onNotificationDelete","BookmarkIconType","images","params","metrics","scatters","BookmarkCard","name","description","React","useState","openModal","setOpenModal","tags","useMemo","options","val","label","ErrorBoundary","className","fontSize","size","weight","component","tint","to","variant","onClick","analytics","ANALYTICS_EVENT_KEYS","bookmarks","view","color","withOnlyIcon","advancedMode","CodeBlock","code","advancedQuery","query","length","tag","index","COLORS","ConfirmModal","open","onCancel","onSubmit","text","icon","title","statusType","confirmBtnText","Bookmarks","AppBar","BusyLoaderWrapper","IllustrationBlock","page","IllustrationsEnum","EmptyBookmarks","NotificationContainer","handleClose","BookmarksContainer","bookmarksData","useModel","useEffect","pageView","endpoints","APPS","API","get","fetchApp","createApp","reqBody","post","updateApp","put","deleteApp","delete","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Box","mt","Alert","onClose","iconMapping","success","src","successIconImg","alt","error","errorIconImg","style","height","i","DASHBOARD","createDashboard","headers","fetchDashboard","updateDashboard","props","children","aria-labelledby","aria-describedby","PaperProps","elevation","cancelBtnText","autoFocus","defaultProps","displayName","memo","CopyToClipboard","contentRef","showSuccessDelay","showCopiedIcon","setShowCopiedIcon","setTimeout","onCopy","useCallback","current","navigator","clipboard","writeText","innerText","trim","catch","language","createRef","theme","tokens","getLineProps","getTokenProps","ref","line","key","token","CopyToClipBoard"],"mappings":"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","file":"static/js/bookmarks.js?version=b229e10913fb08cf0462","sourcesContent":["import dashboardService from 'services/api/dashboard/dashboardService';\nimport appsService from 'services/api/apps/appsService';\n\nimport { IBookmarksAppModelState } from 'types/services/models/bookmarks/bookmarksAppModel';\nimport { IBookmarksData } from 'types/pages/bookmarks/Bookmarks';\n\nimport onNotificationAdd from 'utils/app/onNotificationAdd';\nimport exceptionHandler from 'utils/app/exceptionHandler';\nimport onNotificationDelete from 'utils/app/onNotificationDelete';\n\nimport createModel from '../model';\n\nlet bookmarksRequestRef: {\n  call: (exceptionHandler: (detail: any) => void) => Promise<any>;\n  abort: () => void;\n};\n\nconst model = createModel<Partial<IBookmarksAppModelState>>({\n  isLoading: true,\n  listData: [],\n  notifyData: [],\n});\n\nfunction getBookmarksData() {\n  const { call, abort } = dashboardService.fetchDashboardsList();\n  return {\n    call: () =>\n      call().then(async (data: any) => {\n        try {\n          const appsList = await appsService\n            .fetchAppsList()\n            .call((detail: any) => {\n              exceptionHandler({ detail, model: model as any });\n            });\n          const listData = data.map((item: any) => {\n            const app = appsList.find(\n              (appData: any) => appData.id === item.app_id,\n            );\n            return { ...item, select: app.state.select, type: app.type };\n          });\n          model.setState({\n            isLoading: false,\n            listData,\n          });\n        } catch (err: any) {\n          onNotificationAdd({\n            notification: {\n              id: Date.now(),\n              messages: [err.message],\n              severity: 'error',\n            },\n            model: model as any,\n          });\n        }\n        model.setState({ isLoading: false });\n      }),\n\n    abort,\n  };\n}\n\nfunction onBookmarksNotificationDelete(id: number) {\n  onNotificationDelete({ id, model });\n}\n\nasync function onBookmarkDelete(id: string) {\n  try {\n    model.setState({ isLoading: true });\n    await dashboardService.deleteDashboard(id).call((detail: any) => {\n      exceptionHandler({ detail, model });\n    });\n    const listData: IBookmarksData[] | any = model.getState()?.listData;\n    const newListData = [...listData].filter((bookmark) => bookmark.id !== id);\n    model.setState({\n      listData: newListData,\n      isLoading: false,\n    });\n  } catch (err: any) {\n    model.setState({\n      isLoading: false,\n    });\n    onNotificationAdd({\n      notification: {\n        id: Date.now(),\n        messages: [err.message],\n        severity: 'error',\n      },\n      model: model as any,\n    });\n  }\n}\n\nfunction initialize() {\n  model.init();\n  try {\n    bookmarksRequestRef = getBookmarksData();\n    bookmarksRequestRef.call((detail) => {\n      exceptionHandler({ detail, model: model as any });\n      model.setState({\n        isLoading: false,\n      });\n    });\n  } catch (err: any) {\n    onNotificationAdd({\n      notification: {\n        id: Date.now(),\n        messages: [err.message],\n        severity: 'error',\n      },\n      model: model as any,\n    });\n    model.setState({\n      isLoading: false,\n    });\n    bookmarksRequestRef.abort();\n  }\n}\n\nfunction destroy() {\n  bookmarksRequestRef.abort();\n  model.destroy();\n}\nconst bookmarkAppModel = {\n  ...model,\n  initialize,\n  destroy,\n  getBookmarksData,\n  onBookmarkDelete,\n  onBookmarksNotificationDelete,\n};\n\nexport default bookmarkAppModel;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport CodeBlock from 'components/CodeBlock/CodeBlock';\nimport { Button, Icon, Badge, Text } from 'components/kit';\nimport { IconName } from 'components/kit/Icon';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport COLORS from 'config/colors/colors';\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\n\nimport { IBookmarkCardProps } from 'types/pages/bookmarks/components/BookmarkCard';\n\nimport './BookmarkCard.scss';\n\nconst BookmarkIconType: { [key: string]: IconName } = {\n  images: 'images',\n  params: 'params',\n  metrics: 'metrics',\n  scatters: 'scatterplot',\n};\n\nfunction BookmarkCard({\n  name,\n  id,\n  app_id,\n  description,\n  onBookmarkDelete,\n  select,\n  type,\n}: IBookmarkCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const [openModal, setOpenModal] = React.useState<boolean>(false);\n\n  function handleOpenModal(): void {\n    setOpenModal(true);\n  }\n  function handleCloseModal(): void {\n    setOpenModal(false);\n  }\n\n  function handleBookmarkDelete(): void {\n    onBookmarkDelete(id);\n  }\n\n  const tags: { label: string }[] = React.useMemo(() => {\n    return select?.options?.map((val: any) => ({ label: val.label })) || [];\n  }, [select]);\n\n  return (\n    <ErrorBoundary>\n      <div className='BookmarkCard'>\n        <div className='BookmarkCard__top'>\n          <div className='BookmarkCard__title__section'>\n            <div className='BookmarkCard__title__section__container'>\n              <Icon name={BookmarkIconType[type]} fontSize={16} />\n              <Text size={18} weight={600} component='h3' tint={100}>\n                {name}\n              </Text>\n            </div>\n            <div className='flex fac fjc'>\n              <NavLink to={`/${type}/${app_id}`}>\n                <Button\n                  variant='outlined'\n                  onClick={() =>\n                    analytics.trackEvent(ANALYTICS_EVENT_KEYS.bookmarks.view)\n                  }\n                >\n                  View Bookmark\n                </Button>\n              </NavLink>\n              <span className='BookmarkCard__delete'>\n                <Button\n                  color='secondary'\n                  withOnlyIcon\n                  onClick={handleOpenModal}\n                >\n                  <Icon name='delete' />\n                </Button>\n              </span>\n            </div>\n          </div>\n          <Text size={12} weight={400} tint={100} component='p'>\n            {description}\n          </Text>\n        </div>\n        {select.advancedMode ? (\n          <div className='BookmarkCard__bottom'>\n            <div className='BookmarkCard__run__expression'>\n              <CodeBlock code={select.advancedQuery} />\n            </div>\n          </div>\n        ) : (\n          <>\n            {select.query && (\n              <div className='BookmarkCard__bottom'>\n                <div className='BookmarkCard__run__expression'>\n                  <CodeBlock code={select.query} />\n                </div>\n              </div>\n            )}\n            {tags.length > 0 && (\n              <div className='BookmarkCard__selected__metrics ScrollBar__hidden'>\n                {tags.map((tag, index) => {\n                  return (\n                    <Badge\n                      size='large'\n                      key={tag.label}\n                      label={tag.label}\n                      color={COLORS[0][index % COLORS[0].length]}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </>\n        )}\n        <ConfirmModal\n          open={openModal}\n          onCancel={handleCloseModal}\n          onSubmit={handleBookmarkDelete}\n          text='Are you sure you want to delete this bookmark?'\n          icon={<Icon name='delete' />}\n          title='Are you sure?'\n          statusType='error'\n          confirmBtnText='Delete'\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default BookmarkCard;\n","import React from 'react';\n\nimport AppBar from 'components/AppBar/AppBar';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport NotificationContainer from 'components/NotificationContainer/NotificationContainer';\n\nimport { IllustrationsEnum } from 'config/illustrationConfig/illustrationConfig';\n\nimport { IBookmarksProps } from 'types/pages/bookmarks/Bookmarks';\n\nimport BookmarkCard from './components/BookmarkCard/BookmarkCard';\n\nimport './Bookmarks.scss';\n\nfunction Bookmarks({\n  data,\n  onBookmarkDelete,\n  isLoading,\n  notifyData,\n  onNotificationDelete,\n}: IBookmarksProps): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <section className='Bookmarks'>\n        <AppBar title='Bookmarks' />\n        <div className='Bookmarks__list container'>\n          <BusyLoaderWrapper isLoading={isLoading}>\n            {data?.length > 0 &&\n              data.map((bookmark) => (\n                <BookmarkCard\n                  key={bookmark.id}\n                  {...bookmark}\n                  onBookmarkDelete={onBookmarkDelete}\n                />\n              ))}\n          </BusyLoaderWrapper>\n          {!isLoading && data?.length === 0 ? (\n            <IllustrationBlock\n              size='xLarge'\n              page='bookmarks'\n              type={IllustrationsEnum.EmptyBookmarks}\n              title={'No Bookmarks Yet'}\n            />\n          ) : null}\n        </div>\n      </section>\n      {notifyData?.length > 0 && (\n        <NotificationContainer\n          handleClose={onNotificationDelete}\n          data={notifyData}\n        />\n      )}\n    </ErrorBoundary>\n  );\n}\n\nexport default Bookmarks;\n","import React from 'react';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport useModel from 'hooks/model/useModel';\n\nimport bookmarkAppModel from 'services/models/bookmarks/bookmarksAppModel';\nimport * as analytics from 'services/analytics';\n\nimport { INotification } from 'types/components/NotificationContainer/NotificationContainer';\n\nimport Bookmarks from './Bookmarks';\n\nfunction BookmarksContainer(): React.FunctionComponentElement<React.ReactNode> {\n  const bookmarksData = useModel(bookmarkAppModel);\n\n  React.useEffect(() => {\n    bookmarkAppModel.initialize();\n    analytics.pageView(ANALYTICS_EVENT_KEYS.bookmarks.pageView);\n    return () => {\n      bookmarkAppModel.destroy();\n    };\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <Bookmarks\n        data={bookmarksData?.listData!}\n        isLoading={bookmarksData?.isLoading!}\n        onBookmarkDelete={bookmarkAppModel.onBookmarkDelete}\n        notifyData={bookmarksData?.notifyData as INotification[]}\n        onNotificationDelete={bookmarkAppModel.onBookmarksNotificationDelete}\n      />\n    </ErrorBoundary>\n  );\n}\n\nexport default BookmarksContainer;\n","import { IAppData } from 'types/services/models/metrics/metricsAppModel';\nimport { IApiRequest } from 'types/services/services';\n\nimport API from '../api';\n\nconst endpoints = {\n  APPS: 'apps',\n};\n\nfunction fetchAppsList(): IApiRequest<IAppData[]> {\n  return API.get(endpoints.APPS);\n}\n\nfunction fetchApp(id: string): IApiRequest<IAppData> {\n  return API.get(`${endpoints.APPS}/${id}`);\n}\n\nfunction createApp(reqBody: IAppData): IApiRequest<IAppData> {\n  return API.post(endpoints.APPS, reqBody);\n}\n\nfunction updateApp(id: string, reqBody: IAppData): IApiRequest<IAppData> {\n  return API.put(`${endpoints.APPS}/${id}`, reqBody);\n}\n\nfunction deleteApp(id: string): IApiRequest<any> {\n  return API.delete(`${endpoints.APPS}/${id}`);\n}\nconst appsService = {\n  endpoints,\n  fetchAppsList,\n  fetchApp,\n  createApp,\n  updateApp,\n  deleteApp,\n};\n\nexport default appsService;\n","export default __webpack_public_path__ + \"static/media/successIcon.bd3fad23.svg\";","export default __webpack_public_path__ + \"static/media/errorIcon.09cae82c.svg\";","import React from 'react';\n\nimport { Alert } from '@material-ui/lab';\nimport { Box, Snackbar } from '@material-ui/core';\n\nimport successIconImg from 'assets/icons/successIcon.svg';\nimport errorIconImg from 'assets/icons/errorIcon.svg';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { INotificationContainer } from 'types/components/NotificationContainer/NotificationContainer';\n\nimport './NotificationContainer.scss';\n\nexport default function NotificationContainer({\n  data,\n  handleClose,\n}: INotificationContainer): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div>\n        <Snackbar\n          open={true}\n          autoHideDuration={3000}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <div className='NotificationContainer'>\n            {data.map(({ id, severity, messages }) => (\n              <Box key={id} mt={0.5}>\n                <Alert\n                  onClose={() => handleClose(+id)}\n                  variant='outlined'\n                  severity={severity}\n                  iconMapping={{\n                    success: <img src={successIconImg} alt='' />,\n                    error: <img src={errorIconImg} alt='' />,\n                  }}\n                  style={{ height: 'auto' }}\n                >\n                  <div className='NotificationContainer__contentBox'>\n                    <p className='NotificationContainer__contentBox__severity'>\n                      {severity}\n                    </p>\n                    {messages.map((message: string, i: number) => {\n                      return message ? (\n                        <p\n                          key={i}\n                          className='NotificationContainer__contentBox__message'\n                        >\n                          {message}\n                        </p>\n                      ) : null;\n                    })}\n                  </div>\n                </Alert>\n              </Box>\n            ))}\n          </div>\n        </Snackbar>\n      </div>\n    </ErrorBoundary>\n  );\n}\n","import {\n  IAppData,\n  IDashboardRequestBody,\n} from 'types/services/models/metrics/metricsAppModel';\nimport { IApiRequest } from 'types/services/services';\n\nimport API from '../api';\n\nconst endpoints = {\n  DASHBOARD: 'dashboards',\n};\n\nfunction fetchDashboardsList(): IApiRequest<any> {\n  return API.get(endpoints.DASHBOARD);\n}\n\nfunction fetchDashboard(id: string): IApiRequest<any> {\n  return API.get(`${endpoints.DASHBOARD}/${id}`);\n}\n\nfunction createDashboard(\n  reqBody: IDashboardRequestBody,\n): IApiRequest<IAppData> {\n  return API.post(endpoints.DASHBOARD, reqBody, {\n    headers: { 'Content-type': 'application/json' },\n  });\n}\n\nfunction updateDashboard(\n  id: string,\n  reqBody: IDashboardRequestBody,\n): IApiRequest<any> {\n  return API.put(`${endpoints.DASHBOARD}/${id}`, reqBody);\n}\n\nfunction deleteDashboard(id: string): IApiRequest<any> {\n  return API.delete(`${endpoints.DASHBOARD}/${id}`);\n}\n\nconst dashboardService = {\n  endpoints,\n  createDashboard,\n  fetchDashboardsList,\n  fetchDashboard,\n  updateDashboard,\n  deleteDashboard,\n};\n\nexport default dashboardService;\n","import React from 'react';\n\nimport { Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IAppBarProps } from 'types/components/AppBar/AppBar';\n\nimport './AppBar.scss';\n\nfunction AppBar(\n  props: IAppBarProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div className='AppBar'>\n        <Text\n          component='h3'\n          weight={600}\n          size={14}\n          tint={100}\n          className='AppBar__title'\n        >\n          {props.title}\n        </Text>\n        {props.children && (\n          <div className={`AppBar__content ${props.className || ''}`}>\n            {props.children}\n          </div>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default AppBar;\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.text && (\n              <Text\n                size={14}\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.title}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__description'\n                  weight={400}\n                  component='p'\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n","import React from 'react';\n\nimport { Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICopyToClipBoardProps } from 'types/components/CopyToClipBoard/CopyToClipBoard';\n\nfunction CopyToClipboard({\n  contentRef,\n  showSuccessDelay = 1500,\n  className = '',\n}: ICopyToClipBoardProps): React.FunctionComponentElement<ICopyToClipBoardProps> {\n  const [showCopiedIcon, setShowCopiedIcon] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (showCopiedIcon) {\n      setTimeout(() => {\n        setShowCopiedIcon(false);\n      }, showSuccessDelay);\n    }\n  }, [showCopiedIcon]);\n\n  const onCopy = React.useCallback(() => {\n    if (contentRef.current && !showCopiedIcon) {\n      navigator.clipboard\n        .writeText(contentRef.current.innerText.trim(''))\n        .then(function () {\n          setShowCopiedIcon(true);\n        })\n        .catch();\n    }\n  }, [contentRef, showCopiedIcon]);\n\n  return (\n    <ErrorBoundary>\n      <span className={className} onClick={onCopy}>\n        {showCopiedIcon ? (\n          <span style={{ color: 'green', fontSize: 12 }}>Copied!</span>\n        ) : (\n          <Icon name='copy' />\n        )}\n      </span>\n    </ErrorBoundary>\n  );\n}\n\nCopyToClipboard.displayName = 'CopyToClipBoard';\n\nexport default React.memo<ICopyToClipBoardProps>(CopyToClipboard);\n","import React from 'react';\n// import AssignmentTurnedInOutlinedIcon from '@material-kit/icons/AssignmentTurnedInOutlined';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\n\nimport theme from 'prism-react-renderer/themes/nightOwlLight';\n\nimport CopyToClipBoard from 'components/CopyToClipBoard/CopyToClipBoard';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICodeBlockProps } from 'types/components/CodeBlock/CodeBlock';\n\nimport './CodeBlock.scss';\n\nfunction CodeBlock({\n  code = '',\n  className = '',\n  language = 'python',\n}: ICodeBlockProps): React.FunctionComponentElement<React.ReactNode> {\n  const contentRef = React.createRef<HTMLPreElement>();\n  return (\n    <ErrorBoundary>\n      <div className={`CodeBlock ${className}`}>\n        <Highlight\n          {...defaultProps}\n          theme={theme}\n          code={code.trim()}\n          language={language}\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre className={className} style={style} ref={contentRef}>\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line, key: i })}>\n                  {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token, key })} />\n                  ))}\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n        <ErrorBoundary>\n          <CopyToClipBoard\n            className='CodeBlock__copy__span'\n            contentRef={contentRef}\n          />\n        </ErrorBoundary>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(CodeBlock);\n"],"sourceRoot":""}