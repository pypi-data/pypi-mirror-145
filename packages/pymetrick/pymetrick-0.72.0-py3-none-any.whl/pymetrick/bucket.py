#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of Pymetrick.  The COPYRIGHT file at the top level of
# this repository contains the full copyright notices and license terms.

"""Modulo para gestionar S3 BUCKETS de AWS o compatibles"""

try:
    from pymetrick.version import __author__, __version__, __license__, __copyright__
except ImportError:
    raise ImportError(
        'Failed to find (autogenerated) version.py '
    )

__date__ = '2012-09-21'
__credits__ = ''
__text__ = 'Tratamiento de S3 Buckets'
__file__ = 'bucket.py'

#--- CHANGES ------------------------------------------------------------------
# 2021-09-14 v0.01 PL: - First version

import sys
# sin bytecode
sys.dont_write_bytecode = True

#from secrets import AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, endpoint_url

import botocore
import boto3
from boto3.s3.transfer import TransferConfig
import os
import queue

import logging
import logging.handlers

try:
    import simplejson as json
except:
    import json

'''
DEBUG - debug message
INFO - info message
WARNING - warn message
ERROR - error message
CRITICAL - critical message
'''
LOG_LEVEL_VALUE = {'DEBUG':10,'INFO':20,'WARNING':30,'ERROR':40,'CRITICAL':50}
if str(os.environ.get('PYMETRICK_LOG_LEVEL',None)).upper() in LOG_LEVEL_VALUE:
    LOG_LEVEL = LOG_LEVEL_VALUE[str(os.environ.get('PYMETRICK_LOG_LEVEL')).upper()]
else:
    LOG_LEVEL = 30
LOG_FILENAME = '-'.join([os.path.abspath(__file__).split(os.sep)[len(os.path.abspath(__file__).split(os.sep))-1],])[:-3]
LOG = logging.getLogger(LOG_FILENAME)

if 'LD_LIBRARY_PATH' in list(os.environ.keys()):
    # CGI environment
    sys.stdout = sys.stderr
    logging.basicConfig(stream = sys.stderr, level=LOG_LEVEL, format='%(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s')
else:
    # not CGI environment
    logging.basicConfig(stream=sys.stderr)
    hdlr = logging.handlers.RotatingFileHandler(filename=LOG_FILENAME+'.log',mode='a', encoding='utf-8', maxBytes=1048576, backupCount=3)
    formatter = logging.Formatter('%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s')
    hdlr.setFormatter(formatter)
    LOG.addHandler(hdlr)
    LOG.setLevel(LOG_LEVEL)
    
GB = 1024 ** 3

class Bucket(object):
    '''Gestion de S3 Buckets'''

    def __init__(self, *args,**kwargs):
        try:
       
            if 'default_bucket' in kwargs:
                self.default_bucket = kwargs['default_bucket']
            else:
                self.default_bucket = None

            object_storage_config = {
            'aws_access_key_id' : None,
            'aws_secret_access_key' : None,
            'endpoint_url': None }

            for key in object_storage_config.keys():
                if key in kwargs:
                    object_storage_config[key] = kwargs[key]
                
            self.client = boto3.client('s3', **object_storage_config )

        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def list_buckets(self):
        try:
            list_buckets = []
            response = self.client.list_buckets()
            print(response)
            if 'Buckets' in response:
                for bucket in response['Buckets']:
                    list_buckets.append(bucket['Name'])
            return list_buckets

        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def list_objects(self, prefix=''):
        try:

            list_objects = []
            response = self.client.list_objects(Bucket=self.default_bucket, Prefix=prefix)
            if 'Contents' in response:
                for object in response['Contents']:
                    list_objects.append(object['Key'])
            return list_objects

        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def add_bucket(self, bucket_name=None ):
        try:
            if bucket_name:
                self.client.create_bucket(Bucket=bucket_name)
        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def delete_bucket(self, bucket_name=None ):
        try:
            if bucket_name:
                self.client.delete_bucket(Bucket=bucket_name)
            else:
                self.client.delete_bucket(Bucket=self.default_bucket)

        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def upload_object(self, prefix='', list_objects=[]):
        try:
            
            config = TransferConfig(multipart_threshold=5*GB)
            for file in list_objects:
                upload_file_key = ''.join([prefix,file.split('/')[-1:][0].upper()])
                self.client.upload_file(
                                  Filename=file,
                                  Bucket=self.default_bucket,
                                  Key=upload_file_key)
        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def download_object(self, prefix='', list_objects=[]):
        try:
            objects = []
            if len(list_objects)==0:
                response = self.client.list_objects(Bucket=self.default_bucket, Prefix=prefix)
                for object in response['Contents']:
                    list_objects.append(object['Key'])
            for file in list_objects:
                download_file_key = ''.join([prefix,file.split('/')[-1:][0].upper()])
                path, filename = os.path.split(file)
                #Create sub directories if its not existing
                if not os.path.exists(path):
                    os.makedirs(path)
                self.client.download_file(
                    Bucket=self.default_bucket,
                    Key=download_file_key,
                    Filename='/'.join([path,filename]))
                objects.append('/'.join([path,filename]))
            return objects

        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


    def delete_object(self, prefix='', list_objects=[]):
        try:
            if len(list_objects)==0:
                response = self.client.list_objects(Bucket=self.default_bucket,Prefix=prefix)
                for object in response['Contents']:
                    list_objects.append(object['Key'])
            for file in list_objects:
                # delete object o directory
                delete_file_key = ''.join([prefix,file.split('/')[-1:][0].upper()])                                
                n = self.client.delete_object(
                    Bucket=self.default_bucket,
                    Key=delete_file_key)
                                             
        except botocore.exceptions.ClientError as error:
            for key, value in sorted(botocore.exceptions.__dict__.items()):
                if isinstance(value, type):
                    print(key)
        except botocore.exceptions.ParamValidationError as error:
            raise ValueError('The parameters you provided are incorrect: {}'.format(error))


if __name__  == "__main__":
    print ('''copyright {0}'''.format( __copyright__))
    print ('''license {0}'''.format( __license__))
    print ('''version {0}'''.format( __version__))
    if len(sys.argv) < 2:
        sys.stderr.write("for help use -h o --help")
    elif sys.argv[1]=='-h' or sys.argv[1]=='--help':
        print ('''
        Tratamiento de S3 Bucket\n\n''')


