name: Build and test

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest]
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:

    - name: Checkout Code
      uses: actions/checkout@v2.3.4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        pip list --format=freeze > piplist.txt
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v2.1.4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ runner.python-version }}-pip-${{ hashFiles('piplist.txt') }}
        restore-keys: |
         ${{ runner.os }}-${{ runner.python-version }}-pip-

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip wheel
        python3 -m pip install -r requirements.txt

        # upgrade all installed packages to their latest versions
        # python3 -m pip list --format=freeze --outdated | cut -d '=' -f1 | xargs -n1 python3 -m pip install --upgrade

    - name: Install artistools
      run: |
        python -m pip install -e .

    - name: Lint with flake8
      working-directory: artistools/
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,E128,E203,E231,E261,E262,E301,E302,E303,E305,F7,F63,F82,F541,W292,W293,W391 --show-source --statistics --max-line-length=130
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=130 --statistics

    - name: Cache test data
      uses: actions/cache@v2.1.4
      id: cache-atomicdata
      with:
          path: "tests/data/testmodel.tar.xz"
          key: "https://theory.gsi.de/~lshingle/artis_http_public/artistools/testmodel.tar.xz"

    - name: Download/extract test data
      # if: steps.cache-atomicdata.outputs.cache-hit != 'true'
      working-directory: tests/data/
      run: source ./setuptestdata.sh

    - name: Test with pytest
      run: |
        pytest --cov=./ --cov-report=xml --durations=0

    - name: Upload coverage to Codecov
      # if: matrix.python-version == 3.9
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        # directory: ./coverage/reports/
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
