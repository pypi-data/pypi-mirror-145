"""stereo camera"""
import phase.pyphase.stereocamera
import typing
import numpy
import phase.pyphase.types
_Shape = typing.Tuple[int, ...]

__all__ = [
    "CameraReadResult",
    "DeimosStereoCamera",
    "PhobosStereoCamera",
    "PylonStereoCamera",
    "TitaniaStereoCamera",
    "UVCStereoCamera",
    "createStereoCamera"
]


class CameraReadResult():
    def __init__(self, arg0: bool, arg1: numpy.ndarray, arg2: numpy.ndarray) -> None: ...
    @property
    def left_image(self) -> numpy.ndarray:
        """
        :type: numpy.ndarray
        """
    @left_image.setter
    def left_image(self, arg0: numpy.ndarray) -> None:
        pass
    @property
    def right_image(self) -> numpy.ndarray:
        """
        :type: numpy.ndarray
        """
    @right_image.setter
    def right_image(self, arg0: numpy.ndarray) -> None:
        pass
    @property
    def valid(self) -> bool:
        """
        :type: bool
        """
    @valid.setter
    def valid(self, arg0: bool) -> None:
        pass
    pass
class DeimosStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> CameraReadResult: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> None: ...
    def stopCapture(self) -> None: ...
    pass
class PhobosStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> CameraReadResult: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> None: ...
    def stopCapture(self) -> None: ...
    pass
class PylonStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> CameraReadResult: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> None: ...
    def stopCapture(self) -> None: ...
    @property
    def left_reverse_x(self) -> bool:
        """
        :type: bool
        """
    @left_reverse_x.setter
    def left_reverse_x(self, arg0: bool) -> None:
        pass
    @property
    def left_reverse_y(self) -> bool:
        """
        :type: bool
        """
    @left_reverse_y.setter
    def left_reverse_y(self, arg0: bool) -> None:
        pass
    @property
    def right_reverse_x(self) -> bool:
        """
        :type: bool
        """
    @right_reverse_x.setter
    def right_reverse_x(self, arg0: bool) -> None:
        pass
    @property
    def right_reverse_y(self) -> bool:
        """
        :type: bool
        """
    @right_reverse_y.setter
    def right_reverse_y(self, arg0: bool) -> None:
        pass
    pass
class TitaniaStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> CameraReadResult: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> None: ...
    def stopCapture(self) -> None: ...
    pass
class UVCStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> CameraReadResult: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> None: ...
    def stopCapture(self) -> None: ...
    pass
def createStereoCamera(*args, **kwargs) -> typing.Any:
    pass
