"""stereo matcher"""
import phase.pyphase.stereomatcher
import typing
import numpy
import phase.pyphase.types
_Shape = typing.Tuple[int, ...]

__all__ = [
    "StereoBM",
    "StereoHOBM",
    "StereoI3DRSGM",
    "StereoMatcherComputeResult",
    "StereoParams",
    "StereoSGBM",
    "createStereoMatcher"
]


class StereoBM():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: StereoParams) -> None: ...
    def compute(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> StereoMatcherComputeResult: ...
    def getComputeThreadResult(self) -> StereoMatcherComputeResult: ...
    def isComputeThreadRunning(self) -> bool: ...
    def setComputeThreadCallback(self, arg0: typing.Callable[[], None]) -> None: ...
    def setMinDisparity(self, arg0: int) -> None: ...
    def setNumDisparities(self, arg0: int) -> None: ...
    def setWindowSize(self, arg0: int) -> None: ...
    def startComputeThread(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    pass
class StereoHOBM():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: StereoParams) -> None: ...
    def compute(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> StereoMatcherComputeResult: ...
    def getComputeThreadResult(self) -> StereoMatcherComputeResult: ...
    def isComputeThreadRunning(self) -> bool: ...
    def setComputeThreadCallback(self, arg0: typing.Callable[[], None]) -> None: ...
    def setMinDisparity(self, arg0: int) -> None: ...
    def setNumDisparities(self, arg0: int) -> None: ...
    def setWindowSize(self, arg0: int) -> None: ...
    def startComputeThread(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    pass
class StereoI3DRSGM():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: StereoParams) -> None: ...
    def compute(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> StereoMatcherComputeResult: ...
    def enableInterpolation(self, arg0: bool) -> None: ...
    def enableSubpixel(self, arg0: bool) -> None: ...
    def getComputeThreadResult(self) -> StereoMatcherComputeResult: ...
    def isComputeThreadRunning(self) -> bool: ...
    @staticmethod
    def isLicenseValid() -> bool: ...
    def setComputeThreadCallback(self, arg0: typing.Callable[[], None]) -> None: ...
    def setMinDisparity(self, arg0: int) -> None: ...
    def setNumDisparities(self, arg0: int) -> None: ...
    def setSpeckleMaxDiff(self, arg0: float) -> None: ...
    def setSpeckleMaxSize(self, arg0: int) -> None: ...
    def setWindowSize(self, arg0: int) -> None: ...
    def startComputeThread(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    pass
class StereoMatcherComputeResult():
    def __init__(self, arg0: bool, arg1: numpy.ndarray) -> None: ...
    @property
    def disparity(self) -> numpy.ndarray:
        """
        :type: numpy.ndarray
        """
    @disparity.setter
    def disparity(self, arg0: numpy.ndarray) -> None:
        pass
    @property
    def valid(self) -> bool:
        """
        :type: bool
        """
    @valid.setter
    def valid(self, arg0: bool) -> None:
        pass
    pass
class StereoParams():
    def __init__(self, arg0: phase.pyphase.types.StereoMatcherType, arg1: int, arg2: int, arg3: int, arg4: bool) -> None: ...
    @property
    def interpolation(self) -> bool:
        """
        :type: bool
        """
    @interpolation.setter
    def interpolation(self, arg0: bool) -> None:
        pass
    @property
    def matcherType(self) -> phase.pyphase.types.StereoMatcherType:
        """
        :type: phase.pyphase.types.StereoMatcherType
        """
    @matcherType.setter
    def matcherType(self, arg0: phase.pyphase.types.StereoMatcherType) -> None:
        pass
    @property
    def minDisparity(self) -> int:
        """
        :type: int
        """
    @minDisparity.setter
    def minDisparity(self, arg0: int) -> None:
        pass
    @property
    def numDisparities(self) -> int:
        """
        :type: int
        """
    @numDisparities.setter
    def numDisparities(self, arg0: int) -> None:
        pass
    @property
    def windowSize(self) -> int:
        """
        :type: int
        """
    @windowSize.setter
    def windowSize(self, arg0: int) -> None:
        pass
    pass
class StereoSGBM():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: StereoParams) -> None: ...
    def compute(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> StereoMatcherComputeResult: ...
    def getComputeThreadResult(self) -> StereoMatcherComputeResult: ...
    def isComputeThreadRunning(self) -> bool: ...
    def setComputeThreadCallback(self, arg0: typing.Callable[[], None]) -> None: ...
    def setMinDisparity(self, arg0: int) -> None: ...
    def setNumDisparities(self, arg0: int) -> None: ...
    def setWindowSize(self, arg0: int) -> None: ...
    def startComputeThread(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    pass
def createStereoMatcher(*args, **kwargs) -> typing.Any:
    pass
