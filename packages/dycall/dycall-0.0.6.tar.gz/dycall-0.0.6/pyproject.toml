[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "wheel"]

[tool.isort]
profile = "black"

[tool.mypy]
exclude = "venv"
ignore_missing_imports = true

[tool.pylint.MASTER]
jobs = 0 # Faster

[tool.pylint.DESIGN]
max-statements = 60

[tool.pylint.'MESSAGE_CONTROL']
disable = [
  "duplicate-code",
  "invalid-name",
  "missing-function-docstring",
  "too-many-ancestors",
  "too-many-instance-attributes",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-locals",
  "too-many-statements",
]

# duplicate-code false positive: https://stackoverflow.com/a/30007053
[tool.pylint.SIMILARITIES]
ignore-imports = "yes"

[tool.pylint.TYPECHECK]
generated-members = ["lief.*"]
extension-pkg-allow-list = "win32api"

[tool.pytest.ini_options]
minversion = 6.0
testpaths = "tests"

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/demberto/DyCall/"

[tool.tbump.version]
current = "0.0.6"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "VERSION"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
