{"version":3,"file":"996e4f71.js","mappings":";;;AAoFA;AACA;;AAEA;;;;AAyCA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;;;;;;;;;;;AC9CA;ACvEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAvCA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACCA;;AC0EA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAKA;;;;;;;;AASA;;AAAA;;;;AAKA;AACA;;;;;AAQA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;AAeA;;AAAA;;AAGA;AACA","sources":["webpack://home-assistant-frontend/mwc-switch-base.ts","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-usb.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {MDCSwitchAdapter} from '@material/switch/deprecated/adapter';\nimport MDCSwitchFoundation from '@material/switch/deprecated/foundation';\nimport {html} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nexport class SwitchBase extends BaseElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty @property({attribute: 'aria-label'}) ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  protected changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  protected renderRipple() {\n    return this.shouldRenderRipple ? html`\n        <mwc-ripple\n          .accent=\"${this.checked}\"\n          .disabled=\"${this.disabled}\"\n          unbounded>\n        </mwc-ripple>` :\n                                     '';\n  }\n\n  override focus() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.startFocus();\n      formElement.focus();\n    }\n  }\n\n  override blur() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.endFocus();\n      formElement.blur();\n    }\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          ${this.renderRipple()}\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              @change=\"${this.changeHandler}\"\n              @focus=\"${this.handleRippleFocus}\"\n              @blur=\"${this.handleRippleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n          </div>\n        </div>\n      </div>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleMouseDown(event: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleTouchStart(event: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","import \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x?: number;\n\n  @property({ type: Number }) public y?: number;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"../../../components/ha-switch\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultArray, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\nimport \"../../../components/ha-circular-progress\";\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-button-menu\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiZigbee,\n  mdiZWave,\n  mdiAccountVoiceOff,\n  mdiAccountVoice,\n} from \"@mdi/js\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { handleFetchPromise } from \"../../../util/hass-call-api\";\n\nexport interface aisUsbSettingsInfo {\n  usbAutoStartServices: boolean;\n  usbVoiceNotification: boolean;\n}\nexport interface aisSaveUsbSettingsResponse {\n  info: string;\n  error: string;\n}\n\nexport const aisGetUsbSettings = () =>\n  handleFetchPromise<aisUsbSettingsInfo>(\n    fetch(\"/api/ais_file/ais_usb_view\", {\n      method: \"GET\",\n      credentials: \"same-origin\",\n    })\n  );\n\nexport const aisSaveUsbSettings = (params: aisUsbSettingsInfo) =>\n  handleFetchPromise<aisSaveUsbSettingsResponse>(\n    fetch(\"/api/ais_file/ais_usb_view\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      body: JSON.stringify(params),\n    })\n  );\n/*\n *\n */\n@customElement(\"ha-config-ais-dom-config-usb\")\nclass HaConfigAisDomConfigUsb extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) private usbsetingsValidating = false;\n\n  @property({ type: Boolean }) public isWide = true;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: String }) private errorUsbInfo = \"\";\n\n  @property({ type: String }) private messageUsbInfo = \"\";\n\n  @property() private usbSettingsInfo = {\n    usbAutoStartServices: true,\n    usbVoiceNotification: true,\n  };\n\n  protected async firstUpdated() {\n    try {\n      const result = await aisGetUsbSettings();\n      this.usbSettingsInfo = result;\n    } catch (err) {\n      // eslint-disable-next-line\n      this.errorUsbInfo = err;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div .narrow=${this.narrow}>\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Obsługa urządzeń USB</span>\n            <span slot=\"introduction\">\n              W tym miejscu możesz ustalić czy Asystent ma sam rozpoznawać\n              adaptery USB i uruchamiać automatycznie domyślne usługi Zigbee i\n              Zwave. <br />\n              Oraz czy ma głosowo powiadamiać o dodaniu i usunięciu urządzenia\n              USB.\n            </span>\n            <ha-card header=\"Automatyczne rozpoznawanie urządzeń USB\">\n              <div class=\"card-content\">\n                Asystent domowy powiadamia komunikatem głosowym o tym, jakie\n                urządzenie zostało dodane i jeżeli obsługa danego urządzenia\n                jest wspierana, to Asystent rozpozna, na jakim porcie działa\n                urządzenie i wykona dalsze akcje związane z obsługą danego\n                urządzenia.\n                <br />\n                <br />\n                <h2>\n                  Automatyczne uruchamianie i zatrzymywanie usług\n                  <ha-svg-icon slot=\"icon\" path=${mdiZigbee}></ha-svg-icon>\n                  <ha-svg-icon slot=\"icon\" path=${mdiZWave}></ha-svg-icon>\n                </h2>\n                ${this.usbSettingsInfo.usbAutoStartServices\n                  ? html`\n                      Asystent automatycznie uruchamia i zatrzymuje domyślne\n                      usługi powiązane z obsługiwanymi urządzeniami\n                      (zigbee2mqtt, zwave2mqtt). Możesz tę funkcję wyłączyć.\n                    `\n                  : html`\n                      Jeśl chcesz, żeby asystent automatycznie uruchamiał i\n                      zatrzymywał domyślne usługi powiązane z obsługiwanymi\n                      urządzeniami (zigbee2mqtt, zwave2mqtt), to możesz tę\n                      funkcję włączyć.\n                    `}\n\n                <br /><br />\n                ${!this.usbsetingsValidating\n                  ? html` <b\n                        >Automatyczny start usług dla urządzeń USB:&nbsp;</b\n                      >\n                      <ha-switch\n                        .checked=${this.usbSettingsInfo.usbAutoStartServices}\n                        @change=${this.switchAutoUsb}\n                      ></ha-switch>`\n                  : html`<div style=\"width: 100%; text-align: center;\">\n                      <ha-circular-progress active></ha-circular-progress>\n                    </div>`}\n                <br />\n                <br />\n\n                ${this.usbSettingsInfo.usbVoiceNotification\n                  ? html`\n                      <h2>\n                        Powiadomienia głosowe o urządzeniach USB\n                        <ha-svg-icon\n                          slot=\"icon\"\n                          path=${mdiAccountVoice}\n                        ></ha-svg-icon>\n                      </h2>\n                      Asystent powiadamia komunikatem głosowym o tym, jakie\n                      urządzenie USB zostało dodane lub usunięte. Możesz tę\n                      funkcję wyłączyć.\n                    `\n                  : html`\n                      <h2>\n                        Powiadomienia głosowe o urządzeniach USB\n                        <ha-svg-icon\n                          slot=\"icon\"\n                          path=${mdiAccountVoiceOff}\n                        ></ha-svg-icon>\n                      </h2>\n                      Jeśl chcesz, żeby asystent powiadamiał komunikatem\n                      głosowym o tym, jakie urządzenie USB zostało dodane lub\n                      usunięte, to możesz tę funkcję włączyć.\n                    `}\n\n                <br /><br />\n                ${!this.usbsetingsValidating\n                  ? html` <b>Powiadomienia głosowe o urządzeniach USB:&nbsp;</b>\n                      <ha-switch\n                        .checked=${this.usbSettingsInfo.usbVoiceNotification}\n                        @change=${this.switchVoiceForUsb}\n                      ></ha-switch>`\n                  : html`<div style=\"width: 100%; text-align: center;\">\n                      <ha-circular-progress active></ha-circular-progress>\n                    </div>`}\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > paper-toggle-button {\n          margin: -4px 0;\n          position: absolute;\n          top: 32px;\n          right: 8px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n      `,\n    ];\n  }\n\n  switchAutoUsb(ev) {\n    this.usbSettingsInfo.usbAutoStartServices = ev.target.checked;\n    this.saveUsbSettings();\n  }\n\n  switchVoiceForUsb(ev) {\n    this.usbSettingsInfo.usbVoiceNotification = ev.target.checked;\n    this.saveUsbSettings();\n  }\n\n  private async saveUsbSettings(): Promise<void> {\n    this.usbsetingsValidating = true;\n    try {\n      const result = await aisSaveUsbSettings(this.usbSettingsInfo);\n      this.errorUsbInfo = result.error;\n      this.messageUsbInfo = result.info;\n    } catch (err) {\n      this.errorUsbInfo = err;\n    }\n\n    this.usbsetingsValidating = false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-usb\": HaConfigAisDomConfigUsb;\n  }\n}\n"],"names":[],"sourceRoot":""}