{"version":3,"file":"fba2dc7c.js","mappings":";;AAmCA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAvCA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwJA;;;;;;;;;;;;;AC7GA;AACA;;;;;;;;;;;AAWA;;;;AAOA;;;;;;AAMA;;;;AAOA;;;;;;AAMA;;;;AAIA;;;;;;AAMA;;;;AAIA;;;;;;AAMA;;;;AAIA;;;;;;AAMA;;;;AAOA;;;;;;AAMA;;;;AAIA;;;;;;AAMA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;AASA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/paper-time-input.js","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-tts.ts"],"sourcesContent":["import \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x?: number;\n\n  @property({ type: Number }) public y?: number;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","/**\nAdapted from paper-time-input from\nhttps://github.com/ryanburns23/paper-time-input\nMIT Licensed. Copyright (c) 2017 Ryan Burns\n\n`<paper-time-input>` Polymer element to accept a time with paper-input & paper-dropdown-menu\nInspired by the time input in google forms\n\n### Styling\n\n`<paper-time-input>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-time-input-dropdown-ripple-color` | dropdown ripple color | `--primary-color`\n`--paper-time-input-cotnainer` | Mixin applied to the inputs | `{}`\n`--paper-time-dropdown-input-cotnainer` | Mixin applied to the dropdown input | `{}`\n*/\nimport \"@polymer/paper-input/paper-input.js\";\nimport \"@polymer/paper-listbox/paper-listbox.js\";\nimport \"@polymer/paper-item/paper-item.js\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu.js\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag.js\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\nclass PaperTimeInput extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          @apply --paper-font-common-base;\n        }\n\n        paper-input {\n          width: 30px;\n          text-align: center;\n          --paper-input-container-input: {\n            /* Damn you firefox\n             * Needed to hide spin num in firefox\n             * http://stackoverflow.com/questions/3790935/can-i-hide-the-html5-number-input-s-spin-box\n             */\n            -moz-appearance: textfield;\n            @apply --paper-time-input-cotnainer;\n          }\n          --paper-input-container-input-webkit-spinner: {\n            -webkit-appearance: none;\n            margin: 0;\n            display: none;\n          }\n        }\n\n        paper-dropdown-menu {\n          width: 55px;\n          padding: 0;\n          /* Force ripple to use the whole container */\n          --paper-dropdown-menu-ripple: {\n            color: var(\n              --paper-time-input-dropdown-ripple-color,\n              --primary-color\n            );\n          }\n          --paper-input-container-input: {\n            @apply --paper-font-button;\n            text-align: center;\n            padding-left: 5px;\n            @apply --paper-time-dropdown-input-cotnainer;\n          }\n          --paper-input-container-underline: {\n            border-color: transparent;\n          }\n          --paper-input-container-underline-focus: {\n            border-color: transparent;\n          }\n        }\n\n        paper-item {\n          cursor: pointer;\n          text-align: center;\n          font-size: 14px;\n        }\n\n        paper-listbox {\n          padding: 0;\n        }\n\n        label {\n          @apply --paper-font-caption;\n        }\n\n        .time-input-wrap {\n          @apply --layout-horizontal;\n          @apply --layout-no-wrap;\n        }\n\n        [hidden] {\n          display: none !important;\n        }\n      </style>\n\n      <label hidden$=\"[[hideLabel]]\">[[label]]</label>\n      <div class=\"time-input-wrap\">\n        <!-- Hour Input -->\n        <paper-input\n          id=\"hour\"\n          type=\"number\"\n          value=\"{{hour}}\"\n          on-change=\"_shouldFormatHour\"\n          required=\"\"\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input=\"\"\n          maxlength=\"2\"\n          max=\"[[_computeHourMax(format)]]\"\n          min=\"0\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n          <span suffix=\"\" slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Min Input -->\n        <paper-input\n          id=\"min\"\n          type=\"number\"\n          value=\"{{min}}\"\n          on-change=\"_formatMin\"\n          required=\"\"\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input=\"\"\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n        </paper-input>\n\n        <!-- Dropdown Menu -->\n        <paper-dropdown-menu\n          id=\"dropdown\"\n          required=\"\"\n          hidden$=\"[[_equal(format, 24)]]\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n          <paper-listbox\n            attr-for-selected=\"name\"\n            selected=\"{{amPm}}\"\n            slot=\"dropdown-content\"\n          >\n            <paper-item name=\"AM\">AM</paper-item>\n            <paper-item name=\"PM\">PM</paper-item>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Label for the input\n       */\n      label: {\n        type: String,\n        value: \"Time\",\n      },\n      /**\n       * auto validate time inputs\n       */\n      autoValidate: {\n        type: Boolean,\n        value: true,\n      },\n      /**\n       * hides the label\n       */\n      hideLabel: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * 12 or 24 hr format\n       */\n      format: {\n        type: Number,\n        value: 12,\n      },\n      /**\n       * disables the inputs\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * hour\n       */\n      hour: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * minute\n       */\n      min: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * AM or PM\n       */\n      amPm: {\n        type: String,\n        notify: true,\n        value: \"AM\",\n      },\n      /**\n       * Formatted time string\n       */\n      value: {\n        type: String,\n        notify: true,\n        readOnly: true,\n        computed: \"_computeTime(min, hour, amPm)\",\n      },\n    };\n  }\n\n  /**\n   * Validate the inputs\n   * @return {boolean}\n   */\n  validate() {\n    var valid = true;\n    // Validate hour & min fields\n    if (!this.$.hour.validate() | !this.$.min.validate()) {\n      valid = false;\n    }\n    // Validate AM PM if 12 hour time\n    if (this.format === 12 && !this.$.dropdown.validate()) {\n      valid = false;\n    }\n    return valid;\n  }\n\n  /**\n   * Create time string\n   */\n  _computeTime(min, hour, amPm) {\n    if (hour && min) {\n      // No ampm on 24 hr time\n      if (this.format === 24) {\n        amPm = \"\";\n      }\n      return hour + \":\" + min + \" \" + amPm;\n    }\n    return undefined;\n  }\n\n  /**\n   * Format min\n   */\n  _formatMin() {\n    if (this.min.toString().length === 1) {\n      this.min = this.min < 10 ? \"0\" + this.min : this.min;\n    }\n  }\n\n  /**\n   * Hour needs a leading zero in 24hr format\n   */\n  _shouldFormatHour() {\n    if (this.format === 24 && this.hour.toString().length === 1) {\n      this.hour = this.hour < 10 ? \"0\" + this.hour : this.hour;\n    }\n  }\n\n  /**\n   * 24 hour format has a max hr of 23\n   */\n  _computeHourMax(format) {\n    if (format === 12) {\n      return format;\n    }\n    return 23;\n  }\n\n  _equal(n1, n2) {\n    return n1 === n2;\n  }\n}\n\ncustomElements.define(\"paper-time-input\", PaperTimeInput);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultArray, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/paper-time-input\";\nimport \"../../../components/ha-button-menu\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  showAisFileDialog,\n  HaAisFileDialogParams,\n} from \"../../../dialogs/ais-files/show-dialog-ais-file\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\n/*\n *\n */\n@customElement(\"ha-config-ais-dom-config-tts\")\nclass HaConfigAisDomConfigTts extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: String }) public selectedVoice = \"\";\n\n  protected firstUpdated() {\n    this.selectedVoice = this.hass.states[\"input_select.assistant_voice\"].state;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <!-- <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n            <ha-icon-button\n              icon=\"hass:dots-vertical\"\n              label=\"Menu\"\n              slot=\"trigger\"\n            >\n            </ha-icon-button>\n            <mwc-list-item>\n                Edit ais_welcome.txt\n            </mwc-list-item>\n        </ha-button-menu> -->\n        <div .narrow=${this.narrow}>\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Ustawienia głosu Asystenta</span>\n            <span slot=\"introduction\"\n              >Możesz zmienić głos asystenta i dostosować szybkość i ton mowy\n              oraz komunikat mówiony przez asystenta podczas startu\n              systemu..</span\n            >\n            <ha-card header=\"Wybór głosu Asystenta\">\n              <div class=\"card-content\">\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(\n                      this.selectedVoice,\n                      \"Jola online\"\n                    )}\n                    data-voice=\"Jola online\"\n                    alt=\"Jola Online\"\n                    title=\"Jola Online\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Ania.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(\n                      this.selectedVoice,\n                      \"Jola lokalnie\"\n                    )}\n                    data-voice=\"Jola lokalnie\"\n                    alt=\"Jola Lokalnie\"\n                    title=\"Jola Lokalnie\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Asia.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(this.selectedVoice, \"Celina\")}\n                    data-voice=\"Celina\"\n                    alt=\"Celina\"\n                    title=\"Celina\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Celka.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(this.selectedVoice, \"Anżela\")}\n                    data-voice=\"Anżela\"\n                    alt=\"Anżela\"\n                    title=\"Anżela\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Anzela.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(this.selectedVoice, \"Asia\")}\n                    data-voice=\"Asia\"\n                    alt=\"Asia\"\n                    title=\"Asia\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Kasia.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(\n                      this.selectedVoice,\n                      \"Sebastian\"\n                    )}\n                    data-voice=\"Sebastian\"\n                    alt=\"Sebastian\"\n                    title=\"Sebastian\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Sebastian.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(this.selectedVoice, \"Bartek\")}\n                    data-voice=\"Bartek\"\n                    alt=\"Bartek\"\n                    title=\"Bartek\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Bartek.jpg\"\n                  />\n                </div>\n                <div class=\"person\">\n                  <img\n                    class=${this.personImgClass(this.selectedVoice, \"Andrzej\")}\n                    data-voice=\"Andrzej\"\n                    alt=\"Andrzej\"\n                    title=\"Andrzej\"\n                    @click=${this.switchTtsPerson}\n                    src=\"/static/ais_dom/Andrzej.jpg\"\n                  />\n                </div>\n              </div>\n              <div class=\"card-actions person-actions\">\n                <div @click=${this.tuneVoiceTone}>\n                  <mwc-button>\n                    <ha-icon class=\"user-button\" icon=\"hass:tune\"></ha-icon\n                    >&nbsp; Ton mowy</mwc-button\n                  >\n                </div>\n                <div @click=${this.tuneVoiceSpeed}>\n                  <mwc-button>\n                    <ha-icon\n                      class=\"user-button\"\n                      icon=\"hass:play-speed\"\n                    ></ha-icon\n                    >&nbsp; Szybkość mowy\n                  </mwc-button>\n                </div>\n                <div @click=${this._openAisWelcomeText}>\n                  <mwc-button>\n                    <ha-icon\n                      class=\"user-button\"\n                      icon=\"hass:file-document-edit-outline\"\n                    ></ha-icon\n                    >&nbsp; Welcome.txt</mwc-button\n                  >\n                </div>\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > paper-toggle-button {\n          margin: -4px 0;\n          position: absolute;\n          top: 32px;\n          right: 8px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        div.person {\n          display: inline-block;\n          margin: 10px;\n        }\n        img {\n          border-radius: 50%;\n          width: 100px;\n          height: 100px;\n          border: 20px;\n        }\n        img.person-img-selected {\n          border: 7px solid var(--primary-color);\n          width: 110px;\n          height: 110px;\n        }\n      `,\n    ];\n  }\n\n  async _openAisWelcomeText() {\n    const filePath = \"/data/data/pl.sviete.dom/files/home/AIS/ais_welcome.txt\";\n    const file = await this.hass.callApi<string>(\"POST\", \"ais_file/read\", {\n      filePath: filePath,\n    });\n    const fileParams: HaAisFileDialogParams = {\n      dialogTitle: \"Edit ais_welcome.txt\",\n      filePath: filePath,\n      fileBody: file,\n      readonly: false,\n    };\n    showAisFileDialog(this, fileParams);\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n\n  personImgClass(selectedVoice, person) {\n    if (selectedVoice === person) {\n      return \"person-img-selected\";\n    }\n    return \"\";\n  }\n\n  tuneVoiceSpeed() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: \"input_number.assistant_rate\",\n    });\n  }\n\n  tuneVoiceTone() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: \"input_number.assistant_tone\",\n    });\n  }\n\n  switchTtsPerson(e) {\n    this.selectedVoice = e.target.dataset.voice;\n    this.hass.callService(\"input_select\", \"select_option\", {\n      entity_id: \"input_select.assistant_voice\",\n      option: e.target.dataset.voice,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-tts\": HaConfigAisDomConfigTts;\n  }\n}\n"],"names":[],"sourceRoot":""}