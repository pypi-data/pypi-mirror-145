"use strict";(self.webpackChunkhome_assistant_frontend=self.webpackChunkhome_assistant_frontend||[]).push([[55424],{92306:(t,e,n)=>{n.d(e,{v:()=>s});const s=(t,e)=>{const n={};for(const s of t){const t=e(s);t in n?n[t].push(s):n[t]=[s]}return n}},11950:(t,e,n)=>{n.d(e,{l:()=>s});const s=async(t,e)=>new Promise((n=>{const s=e(t,(t=>{s(),n(t)}))}))},81582:(t,e,n)=>{n.d(e,{LZ:()=>s,pB:()=>i,SO:()=>r,iJ:()=>a,Nn:()=>o,Ny:()=>_,T0:()=>c});const s=32143==n.j?["migration_error","setup_error","setup_retry"]:null,i=t=>t.callApi("GET","config/config_entries/entry"),r=(t,e,n)=>t.callWS({type:"config_entries/update",entry_id:e,...n}),a=(t,e)=>t.callApi("DELETE",`config/config_entries/entry/${e}`),o=(t,e)=>t.callApi("POST",`config/config_entries/entry/${e}/reload`),_=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:"user"}),c=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:null})},55424:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{Bm:()=>p,o1:()=>h,iK:()=>b,rl:()=>S,P:()=>v,KU:()=>w,xZ:()=>T,gy:()=>W,ZC:()=>Z,_Z:()=>E,Jj:()=>k,UB:()=>P,jB:()=>j,gM:()=>D,yT:()=>I,_n:()=>C,vR:()=>N,vE:()=>$});var s=n(4535),i=n(59699),r=n(27088),a=n(83008),o=n(70390),_=n(47538),c=n(97330),u=n(92306),l=n(11950),y=n(81582),f=n(74186),d=n(58763),g=t([d]);d=(g.then?await g:g)[0];const m=[],p=()=>({stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),h=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_to:null,entity_energy_price:null,number_energy_price:null}),b=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),S=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),v=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),w=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),T=t=>t.callWS({type:"energy/info"}),W=t=>t.callWS({type:"energy/validate"}),Z=t=>t.callWS({type:"energy/get_prefs"}),E=async(t,e)=>{const n=t.callWS({type:"energy/save_prefs",...e});return O(t),n},k=t=>(0,u.v)(t.energy_sources,(t=>t.type)),O=t=>{m.forEach((e=>{const n=P(t,{key:e});n.clearPrefs(),n._active&&n.refresh()}))},P=(t,e={})=>{let n="_energy";if(e.key){if(!e.key.startsWith("energy_"))throw new Error("Key need to start with energy_");n=`_${e.key}`}if(t.connection[n])return t.connection[n];m.push(e.key);const u=(0,c._)(t.connection,n,(async()=>{if(u.prefs||(u.prefs=await Z(t)),u._refreshTimeout&&clearTimeout(u._refreshTimeout),u._active&&(!u.end||u.end>new Date)){const t=new Date;t.getMinutes()>=20&&t.setHours(t.getHours()+1),t.setMinutes(20,0,0),u._refreshTimeout=window.setTimeout((()=>u.refresh()),t.getTime()-Date.now())}return(async(t,e,n,r)=>{const[a,o,_]=await Promise.all([(0,y.pB)(t),(0,l.l)(t.connection,f.LM),T(t)]),c=a.find((t=>"co2signal"===t.domain));let u;if(c)for(const e of o){if(e.config_entry_id!==c.entry_id)continue;const n=t.states[e.entity_id];if(n&&"%"===n.attributes.unit_of_measurement){u=n.entity_id;break}}const g=[],m=[];for(const t of e.energy_sources)if("solar"!==t.type)if("gas"!==t.type)if("battery"!==t.type){for(const e of t.flow_from){g.push(e.stat_energy_from),m.push(e.stat_energy_from),e.stat_cost&&m.push(e.stat_cost);const t=_.cost_sensors[e.stat_energy_from];t&&m.push(t)}for(const e of t.flow_to){m.push(e.stat_energy_to),e.stat_compensation&&m.push(e.stat_compensation);const t=_.cost_sensors[e.stat_energy_to];t&&m.push(t)}}else m.push(t.stat_energy_from),m.push(t.stat_energy_to);else{m.push(t.stat_energy_from),t.stat_cost&&m.push(t.stat_cost);const e=_.cost_sensors[t.stat_energy_from];e&&m.push(e)}else m.push(t.stat_energy_from);const p=(0,s.Z)(r||new Date,n),h=(0,i.Z)(n,-1),b=await(0,d.dL)(t,h,r,m,p>35?"month":p>2?"day":"hour");let S;return void 0!==u&&(S=await(async(t,e,n,s,i,r="hour")=>t.callWS({type:"energy/fossil_energy_consumption",start_time:e.toISOString(),end_time:null==i?void 0:i.toISOString(),energy_statistic_ids:n,co2_statistic_id:s,period:r}))(t,n,g,u,r,p>35?"month":p>2?"day":"hour")),Object.values(b).forEach((t=>{t.length&&new Date(t[0].start)>h&&t.unshift({...t[0],start:h.toISOString(),end:h.toISOString(),sum:0,state:0})})),{start:n,end:r,info:_,prefs:e,stats:b,co2SignalConfigEntry:c,co2SignalEntity:u,fossilEnergyConsumption:S}})(t,u.prefs,u.start,u.end)})),g=u.subscribe;u.subscribe=t=>{const e=g(t);return u._active++,()=>{u._active--,u._active<1&&(clearTimeout(u._refreshTimeout),u._refreshTimeout=void 0),e()}},u._active=0,u.prefs=e.prefs;const p=new Date;u.start=p.getHours()>0?(0,r.Z)():(0,a.Z)(),u.end=p.getHours()>0?(0,o.Z)():(0,_.Z)();const h=()=>{u._updatePeriodTimeout=window.setTimeout((()=>{u.start=(0,r.Z)(),u.end=(0,o.Z)(),h()}),(0,i.Z)((0,o.Z)(),1).getTime()-Date.now())};return h(),u.clearPrefs=()=>{u.prefs=void 0},u.setPeriod=(t,e)=>{var n;u.start=t,u.end=e,u.start.getTime()!==(0,r.Z)().getTime()||(null===(n=u.end)||void 0===n?void 0:n.getTime())!==(0,o.Z)().getTime()||u._updatePeriodTimeout?u._updatePeriodTimeout&&(clearTimeout(u._updatePeriodTimeout),u._updatePeriodTimeout=void 0):h()},u},j=t=>t.callWS({type:"energy/solar_forecast"}),D=["m³","ft³"],I=["kWh"],C=[...D,...I],N=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(e)return D.includes(e.attributes.unit_of_measurement)?"volume":"energy"}},$=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(null!=e&&e.attributes.unit_of_measurement)return"Wh"===e.attributes.unit_of_measurement?"kWh":e.attributes.unit_of_measurement}}}))},74186:(t,e,n)=>{n.d(e,{eD:()=>o,Mw:()=>_,vA:()=>c,L3:()=>u,Nv:()=>l,z3:()=>y,LM:()=>g,_V:()=>m});var s=n(97330);if(32143==n.j)var i=n(91741);if(32143==n.j)var r=n(85415);var a=n(38346);const o=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery"===t.states[e.entity_id].attributes.device_class)),_=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery_charging"===t.states[e.entity_id].attributes.device_class)),c=(t,e)=>{if(e.name)return e.name;const n=t.states[e.entity_id];return n?(0,i.C)(n):e.entity_id},u=(t,e)=>t.callWS({type:"config/entity_registry/get",entity_id:e}),l=(t,e,n)=>t.callWS({type:"config/entity_registry/update",entity_id:e,...n}),y=(t,e)=>t.callWS({type:"config/entity_registry/remove",entity_id:e}),f=t=>t.sendMessagePromise({type:"config/entity_registry/list"}),d=(t,e)=>t.subscribeEvents((0,a.D)((()=>f(t).then((t=>e.setState(t,!0)))),500,!0),"entity_registry_updated"),g=(t,e)=>(0,s.B)("_entityRegistry",f,d,t,e),m=t=>t.sort(((t,e)=>(0,r.f)(t.name||"",e.name||"")))},58763:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{vq:()=>c,_J:()=>u,Nu:()=>y,uR:()=>f,dL:()=>d,h_:()=>g,Cj:()=>m,hN:()=>p,Kj:()=>h,q6:()=>b,Nw:()=>S});var s=n(29171),i=n(22311),r=n(91741),a=t([s]);s=(a.then?await a:a)[0];const o=["climate","humidifier","water_heater"],_=["temperature","current_temperature","target_temp_low","target_temp_high","hvac_action","humidity","mode"],c=(t,e,n,s,i=!1,r,a=!0)=>{let o="history/period";return n&&(o+="/"+n.toISOString()),o+="?filter_entity_id="+e,s&&(o+="&end_time="+s.toISOString()),i&&(o+="&skip_initial_state"),void 0!==r&&(o+=`&significant_changes_only=${Number(r)}`),a&&(o+="&minimal_response"),t.callApi("GET",o)},u=(t,e,n,s)=>t.callApi("GET",`history/period/${e.toISOString()}?end_time=${n.toISOString()}&minimal_response${s?`&filter_entity_id=${s}`:""}`),l=(t,e)=>t.state===e.state&&(!t.attributes||!e.attributes||_.every((n=>t.attributes[n]===e.attributes[n]))),y=(t,e,n)=>{const a={},c=[];if(!e)return{line:[],timeline:[]};e.forEach((e=>{if(0===e.length)return;const o=e.find((t=>t.attributes&&("unit_of_measurement"in t.attributes||"state_class"in t.attributes)));let _;_=o?o.attributes.unit_of_measurement||" ":{climate:t.config.unit_system.temperature,counter:"#",humidifier:"%",input_number:"#",number:"#",water_heater:t.config.unit_system.temperature}[(0,i.N)(e[0])],_?_ in a?a[_].push(e):a[_]=[e]:c.push(((t,e,n)=>{const i=[],a=n.length-1;for(const r of n)i.length>0&&r.state===i[i.length-1].state||(r.entity_id||(r.attributes=n[a].attributes,r.entity_id=n[a].entity_id),i.push({state_localize:(0,s.D)(t,r,e),state:r.state,last_changed:r.last_changed}));return{name:(0,r.C)(n[0]),entity_id:n[0].entity_id,data:i}})(n,t.locale,e))}));return{line:Object.keys(a).map((t=>((t,e)=>{const n=[];for(const t of e){const e=t[t.length-1],s=(0,i.N)(e),a=[];for(const e of t){let t;if(o.includes(s)){t={state:e.state,last_changed:e.last_updated,attributes:{}};for(const n of _)n in e.attributes&&(t.attributes[n]=e.attributes[n])}else t=e;a.length>1&&l(t,a[a.length-1])&&l(t,a[a.length-2])||a.push(t)}n.push({domain:s,name:(0,r.C)(e),entity_id:e.entity_id,states:a})}return{unit:t,identifier:e.map((t=>t[0].entity_id)).join(""),data:n}})(t,a[t]))),timeline:c}},f=(t,e)=>t.callWS({type:"history/list_statistic_ids",statistic_type:e}),d=(t,e,n,s,i="hour")=>t.callWS({type:"history/statistics_during_period",start_time:e.toISOString(),end_time:null==n?void 0:n.toISOString(),statistic_ids:s,period:i}),g=t=>t.callWS({type:"recorder/validate_statistics"}),m=(t,e,n)=>t.callWS({type:"recorder/update_statistics_metadata",statistic_id:e,unit_of_measurement:n}),p=(t,e)=>t.callWS({type:"recorder/clear_statistics",statistic_ids:e}),h=t=>{if(!t||t.length<2)return null;const e=t[t.length-1].sum;if(null===e)return null;const n=t[0].sum;return null===n?e:e-n},b=(t,e)=>{let n=null;for(const s of e){if(!(s in t))continue;const e=h(t[s]);null!==e&&(null===n?n=e:n+=e)}return n},S=(t,e)=>t.some((t=>null!==t[e]))}))}}]);