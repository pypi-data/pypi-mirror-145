{"version":3,"file":"2b2580de.js","mappings":";;;AAoFA;AACA;;AAEA;;;;AAyCA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;;;ACvHA;AACA;;;AAGA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCA;;;;;;;;;;;;;;;;;;;;ACTA;ACoDA;;AAEA;AACA;;;AAGA;AACA;;;AA9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkNA;;;;AA6CA;;;;AAIA;AACA;;AAAA;;;;;;;;;;;AAYA;AACA;;;;;;;;;;;;AAYA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AACA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;AAgBA;;;AAIA;;;;;;;;;;;;;;;AAgBA;;;AAIA;;;;;;;;;;;;AAaA;AACA;;AAEA;;AAMA;AACA;;AAEA;;;;;;;AAQA;;AAGA;;;;;;;AAUA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;;;;AAYA;AACA;;;;;;;;;;;;AAYA;AACA;;;;;;;;AAQA;;;;AAKA;;;;;AAKA;AACA;;;;;;AAMA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;;;;;;AAaA;AACA;;;;;;;;;;;AAWA;;;;AAQA;;;;;;;AAOA;;;AAGA;;;;;;AAMA;;;;;AAKA;;;;;;;;;;;;;;AAgBA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;AAEA;AAKA;AACA;;;;;;;AAQA;;;;;AAMA;AACA;;;;;;;;;;;;;;;;;AAkBA;;;;AAMA","sources":["webpack://home-assistant-frontend/mwc-switch-base.ts","webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/ha-yaml-editor.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-logs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {MDCSwitchAdapter} from '@material/switch/deprecated/adapter';\nimport MDCSwitchFoundation from '@material/switch/deprecated/foundation';\nimport {html} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nexport class SwitchBase extends BaseElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty @property({attribute: 'aria-label'}) ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  protected changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  protected renderRipple() {\n    return this.shouldRenderRipple ? html`\n        <mwc-ripple\n          .accent=\"${this.checked}\"\n          .disabled=\"${this.disabled}\"\n          unbounded>\n        </mwc-ripple>` :\n                                     '';\n  }\n\n  override focus() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.startFocus();\n      formElement.focus();\n    }\n  }\n\n  override blur() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.endFocus();\n      formElement.blur();\n    }\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          ${this.renderRipple()}\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              @change=\"${this.changeHandler}\"\n              @focus=\"${this.handleRippleFocus}\"\n              @blur=\"${this.handleRippleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n          </div>\n        </div>\n      </div>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleMouseDown(event: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleTouchStart(event: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        id=\"summary\"\n        @click=${this._toggleContainer}\n        @keydown=${this._toggleContainer}\n        role=\"button\"\n        tabindex=\"0\"\n        aria-expanded=${this.expanded}\n        aria-controls=\"sect1\"\n      >\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n      }\n\n      #summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      #summary:focus {\n        background: var(--input-fill-color);\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { DEFAULT_SCHEMA, dump, load, Schema } from \"js-yaml\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-code-editor\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property() public defaultValue?: any;\n\n  @property() public isValid = true;\n\n  @property() public label?: string;\n\n  @state() private _yaml = \"\";\n\n  public setValue(value): void {\n    try {\n      this._yaml =\n        value && !isEmpty(value)\n          ? dump(value, { schema: this.yamlSchema })\n          : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._yaml === undefined) {\n      return html``;\n    }\n    return html`\n      ${this.label ? html`<p>${this.label}</p>` : \"\"}\n      <ha-code-editor\n        .hass=${this.hass}\n        .value=${this._yaml}\n        mode=\"yaml\"\n        autocomplete-entities\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import \"../../../components/ha-yaml-editor\";\nimport \"../../../components/ha-code-editor\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dump, load } from \"js-yaml\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-paper-dropdown-menu\";\nimport \"../../../components/ha-switch\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-circular-progress\";\nimport { handleFetchPromise } from \"../../../util/hass-call-api\";\nimport { haStyle } from \"../../../resources/styles\";\n\nexport interface aisSaveDbSettingsResponse {\n  info: string;\n  error: string;\n}\n\nexport const aisSaveDbSettings = (params: {\n  dbEngine: string;\n  dbDrive: string;\n  dbUser: string;\n  dbPassword: string;\n  dbServerIp: string;\n  dbServerName: string;\n  dbKeepDays: number;\n  dbShowLogbook: boolean;\n  dbShowHistory: boolean;\n  dbInclude: any;\n  dbExclude: any;\n}) =>\n  handleFetchPromise<aisSaveDbSettingsResponse>(\n    fetch(\"/api/ais_file/ais_db_view\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      body: JSON.stringify(params),\n    })\n  );\n\n@customElement(\"ha-config-ais-dom-config-logs\")\nclass HaConfigAisDomConfiglLogs extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property({ type: String }) private logLevel = \"\";\n\n  @property({ type: String }) private logDrive = \"\";\n\n  @property({ type: Number }) private logRotating = 1;\n\n  @property({ type: Boolean }) private dbConnectionValidating = false;\n\n  @property({ type: String }) private logModeInfo = \"\";\n\n  @property({ type: String }) private dbDrive = \"\";\n\n  @property({ type: String }) private dbEngine = \"\";\n\n  @property({ type: String }) private dbUser = \"\";\n\n  @property({ type: String }) private dbPassword = \"\";\n\n  @property({ type: String }) private dbServerIp = \"\";\n\n  @property({ type: String }) private dbServerName = \"\";\n\n  @property({ type: Number }) private dbKeepDays = 10;\n\n  @property({ type: String }) private errorDbInfo = \"\";\n\n  @property({ type: String }) private messageDbInfo = \"\";\n\n  @property({ type: Boolean }) private dbShowLogbook = false;\n\n  @property({ type: Boolean }) private dbShowHistory = false;\n\n  @property() private dbInclude = \"\";\n\n  @property() private dbExclude = \"\";\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > div#card-icon {\n          margin: -4px 0;\n          position: absolute;\n          top: 1em;\n          right: 1em;\n          border-radius: 25px;\n        }\n        .center-container {\n          text-align: center;\n          height: 70px;\n        }\n\n        .config-invalid {\n          color: red;\n          text-align: center;\n          padding-bottom: 1em;\n        }\n        .config-valid {\n          color: green;\n          text-align: center;\n          padding-bottom: 1em;\n        }\n        .inportant-info {\n          color: var(--primary-color);\n          font-weight: bold;\n        }\n\n        @keyframes pulse {\n          0% {\n            background-color: var(--card-background-color);\n          }\n          100% {\n            background-color: orange;\n          }\n        }\n        @keyframes pulseRed {\n          0% {\n            background-color: var(--card-background-color);\n          }\n          100% {\n            background-color: red;\n          }\n        }\n      `,\n    ];\n  }\n\n  private getLogError(logSettingsInfo) {\n    let logError = \"\";\n    if (logSettingsInfo.attributes.errorInfo) {\n      logError = logSettingsInfo.attributes.errorInfo + \" \";\n    }\n    if (this.logLevel === \"debug\") {\n      logError +=\n        \"Logowanie w trybie debug generuje duże ilości logów i obciąża system. Używaj go tylko podczas diagnozowania problemu. \";\n    }\n    return logError;\n  }\n\n  private isNotSeleced(option) {\n    if (!option) {\n      return true;\n    }\n    if (option === \"-\") {\n      return true;\n    }\n    if (option === \"\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  private getLogIconAnimationStyle(_logSettingsInfo) {\n    if (!this.isNotSeleced(this.logDrive)) {\n      if (this.logLevel === \"debug\") {\n        return \"animation: pulseRed 2s infinite;\";\n      }\n      if (this.logLevel === \"info\") {\n        return \"animation: pulse 4s infinite;\";\n      }\n      if (this.logLevel === \"warning\") {\n        return \"animation: pulse 7s infinite;\";\n      }\n      if (this.logLevel === \"error\") {\n        return \"animation: pulse 8s infinite;\";\n      }\n      if (this.logLevel === \"critical\") {\n        return \"animation: pulse 10s infinite;\";\n      }\n    }\n    return \"\";\n  }\n\n  // DB recorder\n\n  private getDbStatusIcon(dbEngine) {\n    // memory \"animation: pulse 6s infinite;\";\n    if (this.isNotSeleced(dbEngine)) {\n      return html``;\n    }\n    let dbIcon = \"mdi:database\";\n    if (dbEngine === \"SQLite (memory)\") {\n      dbIcon = \"mdi:memory\";\n    }\n    if (dbEngine === \"SQLite (file)\") {\n      dbIcon = \"mdi:file\";\n    }\n    if (dbEngine === \"PostgreSQL\") {\n      dbIcon = \"mdi:server\";\n    }\n    return html`\n      <div id=\"card-icon\" style=\"animation: pulse 6s infinite;\">\n        <ha-icon icon=${dbIcon}></ha-icon>\n      </div>\n    `;\n  }\n\n  private _getDbConnectionSettings() {\n    // DB\n    const dbConnectionInfo = this.hass.states[\"sensor.ais_db_connection_info\"];\n    const dbConnInfoAttr = dbConnectionInfo.attributes;\n    this.dbEngine = dbConnInfoAttr.dbEngine;\n    this.dbDrive = dbConnInfoAttr.dbDrive;\n    this.dbPassword = dbConnInfoAttr.dbPassword;\n    this.dbUser = dbConnInfoAttr.dbUser;\n    this.dbServerIp = dbConnInfoAttr.dbServerIp;\n    this.dbServerName = dbConnInfoAttr.dbServerName;\n    this.dbKeepDays = dbConnInfoAttr.dbKeepDays;\n    this.errorDbInfo = \"\";\n    this.messageDbInfo = \"\";\n    this.dbShowLogbook = dbConnInfoAttr.dbShowLogbook;\n    this.dbShowHistory = dbConnInfoAttr.dbShowHistory;\n    this.dbInclude = dump(dbConnInfoAttr.dbInclude || \"\").trimRight();\n    this.dbExclude = dump(dbConnInfoAttr.dbExclude || \"\").trimRight();\n  }\n\n  private _getLogSettings() {\n    // LOG\n    const connectionInfo = this.hass.states[\"sensor.ais_logs_settings_info\"];\n    const connInfoAttr = connectionInfo.attributes;\n    this.logDrive = connInfoAttr.logDrive;\n    this.logLevel = connInfoAttr.logLevel;\n    this.logRotating = connInfoAttr.logRotating;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    // DB\n    this._getDbConnectionSettings();\n\n    // LOG\n    this._getLogSettings();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <ha-config-section .is-wide=${this.isWide}>\n          <span slot=\"header\">Konfiguracja zapisu zdarzeń systemu</span>\n          <ha-card header=\"Baza danych do zapisu zdarzeń\">\n            <!-- show db satus  -->\n            ${this.getDbStatusIcon(this.dbEngine)}\n            ${!this.dbConnectionValidating\n              ? html`\n                  <div class=\"card-content\">\n                    Najprostszy wybór to baza SQLite, która nie wymaga\n                    konfiguracji i może rejestrować dane w pamięci.\n                    <b>Zmiany konfiguracji bazy wymagają restartu systemu.</b>\n                    Baza w pamięci jest automatycznie używana, gdy włączysz\n                    komponent Historia lub Dziennik.\n                    <br />\n                    <br />\n                    <ha-icon icon=\"hass:chart-box\" slot=\"suffix\"></ha-icon>\n                    <ha-switch\n                      .checked=${this.dbShowHistory}\n                      @change=${this.dbShowHistoryChanged}\n                    ></ha-switch>\n                    Historia - prezentowanie zdarzeń zapisanych w bazie na\n                    wykresach w aplikacji\n                    <br />\n                    <br />\n\n                    <ha-icon\n                      icon=\"hass:format-list-bulleted-type\"\n                      slot=\"suffix\"\n                    ></ha-icon>\n                    <ha-switch\n                      .checked=${this.dbShowLogbook}\n                      @change=${this.dbShowLogbookChanged}\n                    ></ha-switch>\n                    Dziennik - prezentowanie zmian zapisanych w bazie w\n                    chronologicznej kolejności\n\n                    <br /><br />\n\n                    Wybór silnika bazy danych:\n                    <br />\n                    <ha-icon icon=\"mdi:database\"></ha-icon>\n                    <ha-paper-dropdown-menu\n                      label-float=\"Silnik bazy danych\"\n                      dynamic-align=\"\"\n                      label=\"Silnik bazy danych\"\n                    >\n                      <paper-listbox\n                        attr-for-selected=\"item-name\"\n                        slot=\"dropdown-content\"\n                        selected=${this.dbEngine}\n                        @iron-select=${this.dbEngineChanged}\n                      >\n                        <paper-item item-name=\"-\">-</paper-item>\n                        <paper-item item-name=\"SQLite (memory)\"\n                          >SQLite (memory)</paper-item\n                        >\n                        <paper-item item-name=\"SQLite (file)\"\n                          >SQLite (file)</paper-item\n                        >\n                        <paper-item item-name=\"PostgreSQL (local)\"\n                          >PostgreSQL (local)</paper-item\n                        >\n                        <paper-item item-name=\"MariaDB\">MariaDB</paper-item>\n                        <paper-item item-name=\"MySQL\">MySQL</paper-item>\n                        <paper-item item-name=\"PostgreSQL\"\n                          >PostgreSQL</paper-item\n                        >\n                      </paper-listbox>\n                    </ha-paper-dropdown-menu>\n                  </div>\n\n                  <!-- MEMORY -->\n                  ${this.dbEngine === \"SQLite (memory)\"\n                    ? html`\n                        <div class=\"card-content\">\n                          Żeby utrzymać system w dobrej kondycji, codziennie\n                          dokładnie o godzinie 5:15 rano, Asystent czyści pamięć\n                          i usuwa zdarzenia i stany starsze niż <b>5 dni</b>.\n                          <br /><br />\n                          <span class=\"inportant-info\">\n                            Jeżeli zacznie brakować pamięci w systemie, to\n                            automatycznie wyczyścimy całą historię bazy, żeby\n                            zwolnić miejsce.\n                          </span>\n                          <br /><br />\n                          Gdy chcesz zapisywać większą ilość dni w historii, to\n                          zalecamy zapisywać zdarzenia w zdalnej bazie danych.\n                        </div>\n                      `\n                    : html``}\n\n                  <!-- PostgreSQL (local) -->\n                  ${this.dbEngine === \"PostgreSQL (local)\"\n                    ? html`\n                        <div class=\"card-content\">\n                          Żeby utrzymać system w dobrej kondycji, codziennie\n                          dokładnie o godzinie 5:15 rano, Asystent czyści\n                          lokalną bazę i usuwa zdarzenia i stany starsze niż\n                          <b>10 dni</b>. <br /><br />\n                          <span class=\"inportant-info\">\n                            Jeżeli zacznie brakować miejsca na dysku w systemie,\n                            to automatycznie wyczyścimy całą historię lokalnej\n                            bazy, żeby zwolnić miejsce.\n                          </span>\n                          <br /><br />\n                          Gdy chcesz zapisywać większą ilość dni w historii, to\n                          zalecamy zapisywać zdarzenia w zdalnej bazie danych.\n                        </div>\n                      `\n                    : html``}\n\n                  <!-- FILE -->\n                  ${this.dbEngine === \"SQLite (file)\"\n                    ? html`\n                        <div class=\"card-content\">\n                          Wybór dysku do zapisu bazy danych: <br />\n                          <ha-icon icon=\"mdi:usb-flash-drive\"></ha-icon>\n                          <ha-paper-dropdown-menu\n                            label-float=\"Wybrany dysk\"\n                            dynamic-align=\"\"\n                            label=\"Dyski wymienne\"\n                          >\n                            <paper-listbox\n                              slot=\"dropdown-content\"\n                              attr-for-selected=\"item-name\"\n                              .selected=${this.dbDrive}\n                              @iron-select=${this.dbDriveChanged}\n                            >\n                              ${this.hass.states[\n                                \"input_select.ais_usb_flash_drives\"\n                              ].attributes.options!.map(\n                                (item: string) =>\n                                  html`\n                                    <paper-item\n                                      .itemName=${item}\n                                      .itemValue=${item}\n                                    >\n                                      ${item}\n                                    </paper-item>\n                                  `\n                              )}\n                            </paper-listbox>\n                          </ha-paper-dropdown-menu>\n                          <br /><br />\n                        </div>\n                      `\n                    : html``}\n                  <!-- DB -->\n                  ${this.dbEngine === \"MariaDB\" ||\n                  this.dbEngine === \"MySQL\" ||\n                  this.dbEngine === \"PostgreSQL\"\n                    ? html`\n                        <div class=\"card-content\">\n                          Parametry połączenia z bazą danych: <br />\n                          <paper-input\n                            placeholder=\"Użytkownik\"\n                            type=\"text\"\n                            id=\"db_user\"\n                            value=${this.dbUser}\n                            @value-changed=${this.dbUserChanged}\n                          >\n                            <ha-icon icon=\"mdi:account\" slot=\"suffix\"></ha-icon>\n                          </paper-input>\n                          <paper-input\n                            placeholder=\"Hasło\"\n                            no-label-float=\"\"\n                            type=\"password\"\n                            id=\"db_password\"\n                            .value=${this.dbPassword}\n                            @value-changed=${this.dbPasswordChanged}\n                          >\n                            <ha-icon\n                              icon=\"mdi:lastpass\"\n                              slot=\"suffix\"\n                            ></ha-icon>\n                          </paper-input>\n                          <paper-input\n                            placeholder=\"IP Serwera DB\"\n                            no-label-float=\"\"\n                            type=\"text\"\n                            id=\"db_server_ip\"\n                            value=${this.dbServerIp}\n                            @value-changed=${this.dbServerIpChanged}\n                          >\n                            <ha-icon\n                              icon=\"mdi:ip-network\"\n                              slot=\"suffix\"\n                            ></ha-icon>\n                          </paper-input>\n                          <paper-input\n                            placeholder=\"Nazwa bazy\"\n                            no-label-float=\"\"\n                            type=\"text\"\n                            id=\"db_server_name\"\n                            value=${this.dbServerName}\n                            @value-changed=${this.dbServerNameChanged}\n                          >\n                            <ha-icon\n                              icon=\"mdi:database-check\"\n                              slot=\"suffix\"\n                            ></ha-icon>\n                          </paper-input>\n                        </div>\n                      `\n                    : html``}\n                  <div class=\"card-content\">\n                    <h1>Filtrowanie zapisu zdarzeń</h1>\n                    <ha-expansion-panel\n                      .header=${html`<ha-icon icon=\"mdi:filter-plus\"></ha-icon>\n                        &nbsp;Wybrane do zapisywania:`}\n                    >\n                      <ha-code-editor\n                        mode=\"yaml\"\n                        .value=${this.dbInclude}\n                        @value-changed=${this.dbIncludeChanged}\n                      >\n                      </ha-code-editor>\n                    </ha-expansion-panel>\n\n                    <ha-expansion-panel\n                      .header=${html`<ha-icon\n                          icon=\"mdi:filter-remove\"\n                        ></ha-icon>\n                        &nbsp;Wykluczone z zapisywania:`}\n                    >\n                      <ha-code-editor\n                        mode=\"yaml\"\n                        .value=${this.dbExclude}\n                        @value-changed=${this.dbExcludeChanged}\n                      >\n                      </ha-code-editor>\n                    </ha-expansion-panel>\n                  </div>\n\n                  <!-- KEEP DAYS -->\n                  ${this.dbEngine === \"SQLite (file)\" ||\n                  this.dbEngine === \"MariaDB\" ||\n                  this.dbEngine === \"MySQL\" ||\n                  this.dbEngine === \"PostgreSQL\"\n                    ? html`\n                  <div class=\"card-content\">\n                    Żeby utrzymać system w dobrej kondycji, codziennie dokładnie o godzinie 5:15 rano Asystent usuwa z bazy zdarzenia i stany starsze niż <b>określona liczba dni</b>.\n                    <br /><br />\n                    W tym miejscu możesz określić liczbę dni, których historia ma być\n                    przechowywana w bazie danych.\n                    <paper-input\n                      id=\"db_keep_days\"\n                      type=\"number\"\n                      value=${this.dbKeepDays}\n                      @value-changed=${this.dbKeepDaysChanged}\n                      maxlength=\"4\"\n                      max=\"9999\"\n                      min=\"1\"\n                      label-float=\"Liczba dni historii przechowywanych w bazie\"\n                      label=\"Liczba dni historii przechowywanych w bazie\"\n                    >\n                      <ha-icon icon=\"mdi:calendar\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n                  </div>\n                </div>\n                `\n                    : html``}\n                `\n              : html`<div style=\"width: 100%; text-align: center;\">\n                  <ha-circular-progress active></ha-circular-progress>\n                </div>`}\n\n            <div class=\"center-container\">\n              <mwc-button @click=\"${this.saveDbSettings}\">\n                Sprawdź i zapisz\n              </mwc-button>\n            </div>\n\n            <div class=\"center-content\">\n              <div class=\"config-invalid\">\n                <span class=\"text\"> ${this.errorDbInfo} </span>\n              </div>\n              <div class=\"config-valid\">\n                <span class=\"text\"> ${this.messageDbInfo} </span>\n              </div>\n            </div>\n          </ha-card>\n        </ha-config-section>\n\n        <ha-config-section .is-wide=${this.isWide}>\n          <span slot=\"header\">Ustawienie zapisu logów systemu</span>\n          <ha-card header=\" Wybór parametrów logowania\">\n            <div\n              id=\"card-icon\"\n              .style=${this.getLogIconAnimationStyle(\n                this.hass.states[\"sensor.ais_logs_settings_info\"]\n              )}\n            >\n              <ha-icon icon=\"mdi:content-save-edit\"></ha-icon>\n            </div>\n            <div class=\"card-content\">\n              <ha-icon icon=\"mdi:bug-check\"></ha-icon>\n              <ha-paper-dropdown-menu\n                label-float=\"Poziom logowania\"\n                dynamic-align=\"\"\n                label=\"Poziomy logowania\"\n              >\n                <paper-listbox\n                  slot=\"dropdown-content\"\n                  attr-for-selected=\"item-name\"\n                  .selected=${this.logLevel}\n                  @iron-select=${this.logLevelChanged}\n                >\n                  <paper-item item-name=\"critical\">critical</paper-item>\n                  <paper-item item-name=\"error\">error</paper-item>\n                  <paper-item item-name=\"warning\">warning</paper-item>\n                  <paper-item item-name=\"info\">info</paper-item>\n                  <paper-item item-name=\"debug\">debug</paper-item>\n                </paper-listbox>\n              </ha-paper-dropdown-menu>\n              <br />\n\n              Jeśli chcesz zapisywać logi trwale do pliku, wybierz dysk wymienny\n              (USB, SD card) na którym będą zapisywane logi: <br />\n              <ha-icon icon=\"mdi:usb-flash-drive\"></ha-icon>\n\n              <ha-paper-dropdown-menu\n                label-float=\"Wybrany dysk\"\n                dynamic-align=\"\"\n                label=\"Dyski wymienne\"\n              >\n                <paper-listbox\n                  slot=\"dropdown-content\"\n                  attr-for-selected=\"item-name\"\n                  .selected=${this.logDrive}\n                  @iron-select=${this.logDriveChanged}\n                >\n                  ${this.hass.states[\n                    \"input_select.ais_usb_flash_drives\"\n                  ].attributes.options!.map(\n                    (item: string) =>\n                      html`\n                        <paper-item .itemName=${item} .itemValue=${item}>\n                          ${item}\n                        </paper-item>\n                      `\n                  )}\n                </paper-listbox>\n              </ha-paper-dropdown-menu>\n\n              <br /><br />\n              ${!this.isNotSeleced(this.logDrive)\n                ? html`\n                    Możesz określić liczbę dni przechowywanych w jednym pliku.\n                    Rotacja plików dziennika wykonywna jest o północy.\n                    <paper-input\n                      type=\"number\"\n                      .value=${this.logRotating}\n                      @change=${this.logRotatingDaysChanged}\n                      maxlength=\"4\"\n                      max=\"9999\"\n                      min=\"1\"\n                      label-float=\"Liczba dni przechowywanych w jednym pliku loga\"\n                      label=\"Liczba dni przechowywanych w jednym pliku loga\"\n                    >\n                      <ha-icon icon=\"mdi:calendar\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n                    Zmiana dysku lub zmiana liczby dni przechowywanych będzie\n                    zralizowana po restartcie systemu.\n                  `\n                : html``}\n            </div>\n\n            <div class=\"card-content\">\n              <div class=\"config-invalid\">\n                <span class=\"text\">\n                  ${this.getLogError(\n                    this.hass.states[\"sensor.ais_logs_settings_info\"]\n                  )}\n                </span>\n              </div>\n            </div>\n            <div class=\"card-content\">${this.logModeInfo}</div>\n          </ha-card>\n        </ha-config-section>\n        <br />\n        <br />\n      </hass-subpage>\n    `;\n  }\n\n  private saveLoggerSettings() {\n    this.hass.callService(\"ais_files\", \"change_logger_settings\", {\n      log_drive: this.logDrive,\n      log_level: this.logLevel,\n      log_rotating: this.logRotating,\n    });\n  }\n\n  private logDriveChanged(ev) {\n    const newValue = ev.target!.selected;\n    if (newValue !== this.logDrive) {\n      this.logDrive = newValue;\n      if (!this.isNotSeleced(this.logDrive)) {\n        this.logModeInfo =\n          \"Zapis logów do pliku /dyski-wymienne/\" + this.logDrive + \"/ais.log\";\n      } else {\n        this.logModeInfo = \"Zapis logów do pliku wyłączony \";\n      }\n      this.saveLoggerSettings();\n    }\n  }\n\n  private logLevelChanged(ev) {\n    const newValue = ev.target!.selected;\n    if (newValue !== this.logLevel) {\n      this.logLevel = newValue;\n      this.logModeInfo = \"Poziom logowania: \" + this.logLevel;\n      this.saveLoggerSettings();\n    }\n  }\n\n  private logRotatingDaysChanged(ev) {\n    const newValue = Number(ev.target.value);\n    if (this.logRotating !== newValue) {\n      this.logRotating = newValue;\n      if (this.logRotating === 1) {\n        this.logModeInfo = \"Rotacja logów codziennie.\";\n      } else {\n        this.logModeInfo = \"Rotacja logów co \" + this.logRotating + \" dni.\";\n      }\n      this.saveLoggerSettings();\n    }\n  }\n\n  private async saveDbSettings(): Promise<void> {\n    this.dbConnectionValidating = true;\n    try {\n      const result = await aisSaveDbSettings({\n        dbEngine: this.dbEngine,\n        dbDrive: this.dbDrive,\n        dbPassword: this.dbPassword,\n        dbUser: this.dbUser,\n        dbServerIp: this.dbServerIp,\n        dbServerName: this.dbServerName,\n        dbKeepDays: this.dbKeepDays,\n        dbShowLogbook: this.dbShowLogbook,\n        dbShowHistory: this.dbShowHistory,\n        dbInclude: load(this.dbInclude),\n        dbExclude: load(this.dbExclude, {}),\n      });\n\n      this.errorDbInfo = result.error;\n      this.messageDbInfo = result.info;\n    } catch (err) {\n      // eslint-disable-next-line\n      this.errorDbInfo = err;\n    }\n\n    this.dbConnectionValidating = false;\n  }\n\n  private dbShowLogbookChanged(ev) {\n    const newVal = ev.target.checked;\n    if (newVal !== this.dbShowLogbook) {\n      this.dbShowLogbook = newVal;\n      if (this.dbShowLogbook && this.isNotSeleced(this.dbEngine)) {\n        this.dbEngine = \"SQLite (memory)\";\n      }\n      this.saveDbSettings();\n    }\n  }\n\n  private dbShowHistoryChanged(ev) {\n    const newVal = ev.target.checked;\n    if (newVal !== this.dbShowHistory) {\n      this.dbShowHistory = newVal;\n      if (this.dbShowHistory && this.isNotSeleced(this.dbEngine)) {\n        this.dbEngine = \"SQLite (memory)\";\n      }\n      this.saveDbSettings();\n    }\n  }\n\n  private dbEngineChanged(ev) {\n    const newVal = ev.target!.selected;\n    if (newVal !== this.dbEngine) {\n      this.dbEngine = newVal;\n      if (this.isNotSeleced(newVal)) {\n        this.dbShowHistory = false;\n        this.dbShowLogbook = false;\n        this.saveDbSettings();\n      }\n      if (newVal === \"SQLite (memory)\") {\n        this.saveDbSettings();\n      }\n      if (newVal === \"SQLite (file)\") {\n        this.dbDrive = \"-\";\n      }\n    }\n  }\n\n  private dbDriveChanged(ev) {\n    const newVal = ev.target!.selected;\n    if (newVal !== this.dbDrive) {\n      this.dbDrive = newVal;\n    }\n  }\n\n  private dbUserChanged(ev) {\n    const newVal = ev.detail.value;\n    if (newVal !== this.dbUser) {\n      this.dbUser = newVal;\n    }\n  }\n\n  private dbPasswordChanged(ev) {\n    const newVal = ev.detail.value;\n    if (newVal !== this.dbPassword) {\n      this.dbPassword = newVal;\n    }\n  }\n\n  private dbServerIpChanged(ev) {\n    const newVal = ev.detail.value;\n    if (newVal !== this.dbServerIp) {\n      this.dbServerIp = newVal;\n    }\n  }\n\n  private dbServerNameChanged(ev) {\n    const newVal = ev.detail.value;\n    if (newVal !== this.dbServerName) {\n      this.dbServerName = newVal;\n    }\n  }\n\n  private dbKeepDaysChanged(ev) {\n    const newVal = ev.detail.value;\n    if (newVal !== this.dbKeepDays) {\n      this.dbKeepDays = newVal;\n    }\n  }\n\n  private dbIncludeChanged(ev) {\n    ev.stopPropagation();\n    if (ev.detail.value.replace(/\\s/g, \"\").length > 0) {\n      this.dbInclude = ev.detail.value;\n    }\n  }\n\n  private dbExcludeChanged(ev) {\n    ev.stopPropagation();\n    if (ev.detail.value.replace(/\\s/g, \"\").length > 0) {\n      this.dbExclude = ev.detail.value;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-logs\": HaConfigAisDomConfiglLogs;\n  }\n}\n"],"names":[],"sourceRoot":""}