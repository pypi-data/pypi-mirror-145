{"version":3,"file":"5b3c418b.js","mappings":";AAaA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;ACSA;AACA;;;AAGA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCA;;;ACyCA;AACA;;;AAMA;AACA;;;;AAWA;;AAEA;;AAGA;;;AAKA;;AAIA;;;AAIA;AACA;;;;AAMA;;AAIA;AACA;;;;AAQA;;;AAMA;AAGA;;;;AAIA;;AAmBA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;;AAIA;AAGA;AAEA;AAtCA;;AAGA;AACA;;AAEA;;;AAIA;AAGA;AAEA;;;AA1FA;;;;;AAjCA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/panels/config/blueprint/dialog-import-blueprint.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n      }\n      [dir=\"rtl\"].header_button {\n        right: auto;\n        left: 16px;\n      }\n      [dir=\"rtl\"].header_title {\n        margin-left: 40px;\n        margin-right: 0px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        id=\"summary\"\n        @click=${this._toggleContainer}\n        @keydown=${this._toggleContainer}\n        role=\"button\"\n        tabindex=\"0\"\n        aria-expanded=${this.expanded}\n        aria-controls=\"sect1\"\n      >\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n      }\n\n      #summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      #summary:focus {\n        background: var(--input-fill-color);\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../components/ha-textfield\";\nimport {\n  BlueprintImportResult,\n  importBlueprint,\n  saveBlueprint,\n} from \"../../../data/blueprint\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-dialog-import-blueprint\")\nclass DialogImportBlueprint extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?;\n\n  @state() private _importing = false;\n\n  @state() private _saving = false;\n\n  @state() private _error?: string;\n\n  @state() private _result?: BlueprintImportResult;\n\n  @state() private _url?: string;\n\n  @query(\"#input\") private _input?: HaTextField;\n\n  public showDialog(params): void {\n    this._params = params;\n    this._error = undefined;\n    this._url = this._params.url;\n  }\n\n  public closeDialog(): void {\n    this._error = undefined;\n    this._result = undefined;\n    this._params = undefined;\n    this._url = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.blueprint.add.header\")\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${this._result\n            ? html`${this.hass.localize(\n                  \"ui.panel.config.blueprint.add.import_header\",\n                  \"name\",\n                  html`<b>${this._result.blueprint.metadata.name}</b>`,\n                  \"domain\",\n                  this._result.blueprint.metadata.domain\n                )}\n                <br />\n                <ha-markdown\n                  breaks\n                  .content=${this._result.blueprint.metadata.description}\n                ></ha-markdown>\n                ${this._result.validation_errors\n                  ? html`\n                      <p class=\"error\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.blueprint.add.unsupported_blueprint\"\n                        )}\n                      </p>\n                      <ul class=\"error\">\n                        ${this._result.validation_errors.map(\n                          (error) => html`<li>${error}</li>`\n                        )}\n                      </ul>\n                    `\n                  : html`\n                      <ha-textfield\n                        id=\"input\"\n                        .value=${this._result.suggested_filename || \"\"}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.blueprint.add.file_name\"\n                        )}\n                      ></ha-textfield>\n                    `}\n                <ha-expansion-panel\n                  .header=${this.hass.localize(\n                    \"ui.panel.config.blueprint.add.raw_blueprint\"\n                  )}\n                >\n                  <pre>${this._result.raw_data}</pre>\n                </ha-expansion-panel>`\n            : html`${this.hass.localize(\n                  \"ui.panel.config.blueprint.add.import_introduction_link\",\n                  \"community_link\",\n                  html`<a\n                    href=\"https://www.home-assistant.io/get-blueprints\"\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.blueprint.add.community_forums\"\n                    )}</a\n                  >`\n                )}<ha-textfield\n                  id=\"input\"\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.blueprint.add.url\"\n                  )}\n                  .value=${this._url || \"\"}\n                  dialogInitialFocus\n                ></ha-textfield>`}\n        </div>\n        ${!this._result\n          ? html`<mwc-button\n              slot=\"primaryAction\"\n              @click=${this._import}\n              .disabled=${this._importing}\n            >\n              ${this._importing\n                ? html`<ha-circular-progress\n                    active\n                    size=\"small\"\n                    .title=${this.hass.localize(\n                      \"ui.panel.config.blueprint.add.importing\"\n                    )}\n                  ></ha-circular-progress>`\n                : \"\"}\n              ${this.hass.localize(\"ui.panel.config.blueprint.add.import_btn\")}\n            </mwc-button>`\n          : html`<mwc-button\n                slot=\"secondaryAction\"\n                @click=${this.closeDialog}\n                .disabled=${this._saving}\n              >\n                ${this.hass.localize(\"ui.common.cancel\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._save}\n                .disabled=${this._saving || this._result.validation_errors}\n              >\n                ${this._saving\n                  ? html`<ha-circular-progress\n                      active\n                      size=\"small\"\n                      .title=${this.hass.localize(\n                        \"ui.panel.config.blueprint.add.saving\"\n                      )}\n                    ></ha-circular-progress>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.panel.config.blueprint.add.save_btn\")}\n              </mwc-button>`}\n      </ha-dialog>\n    `;\n  }\n\n  private async _import() {\n    this._url = undefined;\n    this._importing = true;\n    this._error = undefined;\n    try {\n      const url = this._input?.value;\n      if (!url) {\n        this._error = this.hass.localize(\n          \"ui.panel.config.blueprint.add.error_no_url\"\n        );\n        return;\n      }\n      this._result = await importBlueprint(this.hass, url);\n    } catch (err: any) {\n      this._error = err.message;\n    } finally {\n      this._importing = false;\n    }\n  }\n\n  private async _save() {\n    this._saving = true;\n    try {\n      const filename = this._input?.value;\n      if (!filename) {\n        return;\n      }\n      await saveBlueprint(\n        this.hass,\n        this._result!.blueprint.metadata.domain,\n        filename,\n        this._result!.raw_data,\n        this._result!.blueprint.metadata.source_url\n      );\n      this._params.importedCallback();\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message;\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  static styles = [\n    haStyleDialog,\n    css`\n      ha-textfield {\n        display: block;\n        margin-top: 8px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-import-blueprint\": DialogImportBlueprint;\n  }\n}\n"],"names":[],"sourceRoot":""}