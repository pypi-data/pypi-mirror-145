{"version":3,"file":"7184e7a2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;AChEA;AAGA;AAUA;AACA;AAkDA;AA3BA;AAGA;AAOA;;;;;;;AAQA;;;;AASA;;AAqBA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAMA;;AAIA;;;;;AAzBA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/panels/config/helpers/ha-config-helpers.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { mdiPencilOff, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showEntityEditorDialog } from \"../entities/show-dialog-entity-editor\";\nimport { configSections } from \"../ha-panel-config\";\nimport { HELPER_DOMAINS } from \"./const\";\nimport { showHelperDetailDialog } from \"./show-dialog-helper-detail\";\n\n@customElement(\"ha-config-helpers\")\nexport class HaConfigHelpers extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _stateItems: HassEntity[] = [];\n\n  private _columns = memoize((narrow, _language): DataTableColumnContainer => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.icon\"\n        ),\n        type: \"icon\",\n        template: (icon, helper: any) =>\n          icon\n            ? html` <ha-icon .icon=${icon}></ha-icon> `\n            : html`<ha-svg-icon\n                .path=${domainIcon(helper.type)}\n              ></ha-svg-icon>`,\n      },\n      name: {\n        title: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.name\"\n        ),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, item: any) =>\n          html`\n            ${name}\n            ${narrow\n              ? html` <div class=\"secondary\">${item.entity_id}</div> `\n              : \"\"}\n          `,\n      },\n    };\n    if (!narrow) {\n      columns.entity_id = {\n        title: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.entity_id\"\n        ),\n        sortable: true,\n        filterable: true,\n        width: \"25%\",\n      };\n    }\n    columns.type = {\n      title: this.hass.localize(\"ui.panel.config.helpers.picker.headers.type\"),\n      sortable: true,\n      width: \"25%\",\n      filterable: true,\n      template: (type) =>\n        html`\n          ${this.hass.localize(`ui.panel.config.helpers.types.${type}`) || type}\n        `,\n    };\n    columns.editable = {\n      title: \"\",\n      label: this.hass.localize(\n        \"ui.panel.config.helpers.picker.headers.editable\"\n      ),\n      type: \"icon\",\n      template: (editable) => html`\n        ${!editable\n          ? html`\n              <div\n                tabindex=\"0\"\n                style=\"display:inline-block; position: relative;\"\n              >\n                <ha-svg-icon .path=${mdiPencilOff}></ha-svg-icon>\n                <paper-tooltip animation-delay=\"0\" position=\"left\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.entities.picker.status.readonly\"\n                  )}\n                </paper-tooltip>\n              </div>\n            `\n          : \"\"}\n      `,\n    };\n    return columns;\n  });\n\n  private _getItems = memoize((stateItems: HassEntity[]) =>\n    stateItems.map((entityState) => ({\n      id: entityState.entity_id,\n      icon: entityState.attributes.icon,\n      name: entityState.attributes.friendly_name || \"\",\n      entity_id: entityState.entity_id,\n      editable: entityState.attributes.editable,\n      type: computeStateDomain(entityState),\n    }))\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._stateItems === undefined) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._getItems(this._stateItems)}\n        @row-click=${this._openEditDialog}\n        hasFab\n        clickable\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.helpers.picker.no_helpers\"\n        )}\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.helpers.picker.add_helper\"\n          )}\n          extended\n          @click=${this._createHelpler}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getStates();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (oldHass && this._stateItems) {\n      this._getStates(oldHass);\n    }\n  }\n\n  private _getStates(oldHass?: HomeAssistant) {\n    let changed = false;\n    const tempStates = Object.values(this.hass!.states).filter((entity) => {\n      if (!HELPER_DOMAINS.includes(computeStateDomain(entity))) {\n        return false;\n      }\n      // hide not editable - internal ais dom helpers\n      if (!entity.attributes.editable) {\n        return false;\n      }\n      if (oldHass?.states[entity.entity_id] !== entity) {\n        changed = true;\n      }\n      return true;\n    });\n\n    if (changed || this._stateItems.length !== tempStates.length) {\n      this._stateItems = tempStates;\n    }\n  }\n\n  private async _openEditDialog(ev: CustomEvent): Promise<void> {\n    const entityId = (ev.detail as RowClickedEvent).id;\n    showEntityEditorDialog(this, {\n      entity_id: entityId,\n    });\n  }\n\n  private _createHelpler() {\n    showHelperDetailDialog(this);\n  }\n}\n"],"names":[],"sourceRoot":""}