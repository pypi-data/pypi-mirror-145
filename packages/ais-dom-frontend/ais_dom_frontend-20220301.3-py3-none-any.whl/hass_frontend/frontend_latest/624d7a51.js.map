{"version":3,"file":"624d7a51.js","mappings":";;;AAoFA;AACA;;AAEA;;;;AAyCA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;ACrHA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAvCA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuJA;;AC5EA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAKA;;;;;;;;AASA;;AAAA;;;;AAKA;AACA;;;;;AAQA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;AAeA;;AAAA;;AAGA;AACA","sources":["webpack://home-assistant-frontend/mwc-switch-base.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/paper-time-input.js","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-usb.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {MDCSwitchAdapter} from '@material/switch/deprecated/adapter';\nimport MDCSwitchFoundation from '@material/switch/deprecated/foundation';\nimport {html} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nexport class SwitchBase extends BaseElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty @property({attribute: 'aria-label'}) ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  protected changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  protected renderRipple() {\n    return this.shouldRenderRipple ? html`\n        <mwc-ripple\n          .accent=\"${this.checked}\"\n          .disabled=\"${this.disabled}\"\n          unbounded>\n        </mwc-ripple>` :\n                                     '';\n  }\n\n  override focus() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.startFocus();\n      formElement.focus();\n    }\n  }\n\n  override blur() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.endFocus();\n      formElement.blur();\n    }\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          ${this.renderRipple()}\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              @change=\"${this.changeHandler}\"\n              @focus=\"${this.handleRippleFocus}\"\n              @blur=\"${this.handleRippleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n          </div>\n        </div>\n      </div>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleMouseDown(event: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleTouchStart(event: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","import \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x?: number;\n\n  @property({ type: Number }) public y?: number;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\nAdapted from paper-time-input from\nhttps://github.com/ryanburns23/paper-time-input\nMIT Licensed. Copyright (c) 2017 Ryan Burns\n\n`<paper-time-input>` Polymer element to accept a time with paper-input & paper-dropdown-menu\nInspired by the time input in google forms\n\n### Styling\n\n`<paper-time-input>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-time-input-dropdown-ripple-color` | dropdown ripple color | `--primary-color`\n`--paper-time-input-cotnainer` | Mixin applied to the inputs | `{}`\n`--paper-time-dropdown-input-cotnainer` | Mixin applied to the dropdown input | `{}`\n*/\nimport \"@polymer/paper-input/paper-input.js\";\nimport \"@polymer/paper-listbox/paper-listbox.js\";\nimport \"@polymer/paper-item/paper-item.js\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu.js\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag.js\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\nclass PaperTimeInput extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          @apply --paper-font-common-base;\n        }\n\n        paper-input {\n          width: 30px;\n          text-align: center;\n          --paper-input-container-input: {\n            /* Damn you firefox\n             * Needed to hide spin num in firefox\n             * http://stackoverflow.com/questions/3790935/can-i-hide-the-html5-number-input-s-spin-box\n             */\n            -moz-appearance: textfield;\n            @apply --paper-time-input-cotnainer;\n          }\n          --paper-input-container-input-webkit-spinner: {\n            -webkit-appearance: none;\n            margin: 0;\n            display: none;\n          }\n        }\n\n        paper-dropdown-menu {\n          width: 55px;\n          padding: 0;\n          /* Force ripple to use the whole container */\n          --paper-dropdown-menu-ripple: {\n            color: var(\n              --paper-time-input-dropdown-ripple-color,\n              --primary-color\n            );\n          }\n          --paper-input-container-input: {\n            @apply --paper-font-button;\n            text-align: center;\n            padding-left: 5px;\n            @apply --paper-time-dropdown-input-cotnainer;\n          }\n          --paper-input-container-underline: {\n            border-color: transparent;\n          }\n          --paper-input-container-underline-focus: {\n            border-color: transparent;\n          }\n        }\n\n        paper-item {\n          cursor: pointer;\n          text-align: center;\n          font-size: 14px;\n        }\n\n        paper-listbox {\n          padding: 0;\n        }\n\n        label {\n          @apply --paper-font-caption;\n        }\n\n        .time-input-wrap {\n          @apply --layout-horizontal;\n          @apply --layout-no-wrap;\n        }\n\n        [hidden] {\n          display: none !important;\n        }\n      </style>\n\n      <label hidden$=\"[[hideLabel]]\">[[label]]</label>\n      <div class=\"time-input-wrap\">\n        <!-- Hour Input -->\n        <paper-input\n          id=\"hour\"\n          type=\"number\"\n          value=\"{{hour}}\"\n          on-change=\"_shouldFormatHour\"\n          required=\"\"\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input=\"\"\n          maxlength=\"2\"\n          max=\"[[_computeHourMax(format)]]\"\n          min=\"0\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n          <span suffix=\"\" slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Min Input -->\n        <paper-input\n          id=\"min\"\n          type=\"number\"\n          value=\"{{min}}\"\n          on-change=\"_formatMin\"\n          required=\"\"\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input=\"\"\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n        </paper-input>\n\n        <!-- Dropdown Menu -->\n        <paper-dropdown-menu\n          id=\"dropdown\"\n          required=\"\"\n          hidden$=\"[[_equal(format, 24)]]\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n          <paper-listbox\n            attr-for-selected=\"name\"\n            selected=\"{{amPm}}\"\n            slot=\"dropdown-content\"\n          >\n            <paper-item name=\"AM\">AM</paper-item>\n            <paper-item name=\"PM\">PM</paper-item>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Label for the input\n       */\n      label: {\n        type: String,\n        value: \"Time\",\n      },\n      /**\n       * auto validate time inputs\n       */\n      autoValidate: {\n        type: Boolean,\n        value: true,\n      },\n      /**\n       * hides the label\n       */\n      hideLabel: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * 12 or 24 hr format\n       */\n      format: {\n        type: Number,\n        value: 12,\n      },\n      /**\n       * disables the inputs\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * hour\n       */\n      hour: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * minute\n       */\n      min: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * AM or PM\n       */\n      amPm: {\n        type: String,\n        notify: true,\n        value: \"AM\",\n      },\n      /**\n       * Formatted time string\n       */\n      value: {\n        type: String,\n        notify: true,\n        readOnly: true,\n        computed: \"_computeTime(min, hour, amPm)\",\n      },\n    };\n  }\n\n  /**\n   * Validate the inputs\n   * @return {boolean}\n   */\n  validate() {\n    var valid = true;\n    // Validate hour & min fields\n    if (!this.$.hour.validate() | !this.$.min.validate()) {\n      valid = false;\n    }\n    // Validate AM PM if 12 hour time\n    if (this.format === 12 && !this.$.dropdown.validate()) {\n      valid = false;\n    }\n    return valid;\n  }\n\n  /**\n   * Create time string\n   */\n  _computeTime(min, hour, amPm) {\n    if (hour && min) {\n      // No ampm on 24 hr time\n      if (this.format === 24) {\n        amPm = \"\";\n      }\n      return hour + \":\" + min + \" \" + amPm;\n    }\n    return undefined;\n  }\n\n  /**\n   * Format min\n   */\n  _formatMin() {\n    if (this.min.toString().length === 1) {\n      this.min = this.min < 10 ? \"0\" + this.min : this.min;\n    }\n  }\n\n  /**\n   * Hour needs a leading zero in 24hr format\n   */\n  _shouldFormatHour() {\n    if (this.format === 24 && this.hour.toString().length === 1) {\n      this.hour = this.hour < 10 ? \"0\" + this.hour : this.hour;\n    }\n  }\n\n  /**\n   * 24 hour format has a max hr of 23\n   */\n  _computeHourMax(format) {\n    if (format === 12) {\n      return format;\n    }\n    return 23;\n  }\n\n  _equal(n1, n2) {\n    return n1 === n2;\n  }\n}\n\ncustomElements.define(\"paper-time-input\", PaperTimeInput);\n","import \"../../../components/ha-switch\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultArray, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\nimport \"../../../components/ha-circular-progress\";\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/paper-time-input\";\nimport \"../../../components/ha-button-menu\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiZigbee,\n  mdiZWave,\n  mdiAccountVoiceOff,\n  mdiAccountVoice,\n} from \"@mdi/js\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { handleFetchPromise } from \"../../../util/hass-call-api\";\n\nexport interface aisUsbSettingsInfo {\n  usbAutoStartServices: boolean;\n  usbVoiceNotification: boolean;\n}\nexport interface aisSaveUsbSettingsResponse {\n  info: string;\n  error: string;\n}\n\nexport const aisGetUsbSettings = () =>\n  handleFetchPromise<aisUsbSettingsInfo>(\n    fetch(\"/api/ais_file/ais_usb_view\", {\n      method: \"GET\",\n      credentials: \"same-origin\",\n    })\n  );\n\nexport const aisSaveUsbSettings = (params: aisUsbSettingsInfo) =>\n  handleFetchPromise<aisSaveUsbSettingsResponse>(\n    fetch(\"/api/ais_file/ais_usb_view\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      body: JSON.stringify(params),\n    })\n  );\n/*\n *\n */\n@customElement(\"ha-config-ais-dom-config-usb\")\nclass HaConfigAisDomConfigUsb extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) private usbsetingsValidating = false;\n\n  @property({ type: Boolean }) public isWide = true;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: String }) private errorUsbInfo = \"\";\n\n  @property({ type: String }) private messageUsbInfo = \"\";\n\n  @property() private usbSettingsInfo = {\n    usbAutoStartServices: true,\n    usbVoiceNotification: true,\n  };\n\n  protected async firstUpdated() {\n    try {\n      const result = await aisGetUsbSettings();\n      this.usbSettingsInfo = result;\n    } catch (err) {\n      // eslint-disable-next-line\n      this.errorUsbInfo = err;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div .narrow=${this.narrow}>\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Obsługa urządzeń USB</span>\n            <span slot=\"introduction\">\n              W tym miejscu możesz ustalić czy Asystent ma sam rozpoznawać\n              adaptery USB i uruchamiać automatycznie domyślne usługi Zigbee i\n              Zwave. <br />\n              Oraz czy ma głosowo powiadamiać o dodaniu i usunięciu urządzenia\n              USB.\n            </span>\n            <ha-card header=\"Automatyczne rozpoznawanie urządzeń USB\">\n              <div class=\"card-content\">\n                Asystent domowy powiadamia komunikatem głosowym o tym, jakie\n                urządzenie zostało dodane i jeżeli obsługa danego urządzenia\n                jest wspierana, to Asystent rozpozna, na jakim porcie działa\n                urządzenie i wykona dalsze akcje związane z obsługą danego\n                urządzenia.\n                <br />\n                <br />\n                <h2>\n                  Automatyczne uruchamianie i zatrzymywanie usług\n                  <ha-svg-icon slot=\"icon\" path=${mdiZigbee}></ha-svg-icon>\n                  <ha-svg-icon slot=\"icon\" path=${mdiZWave}></ha-svg-icon>\n                </h2>\n                ${this.usbSettingsInfo.usbAutoStartServices\n                  ? html`\n                      Asystent automatycznie uruchamia i zatrzymuje domyślne\n                      usługi powiązane z obsługiwanymi urządzeniami\n                      (zigbee2mqtt, zwave2mqtt). Możesz tę funkcję wyłączyć.\n                    `\n                  : html`\n                      Jeśl chcesz, żeby asystent automatycznie uruchamiał i\n                      zatrzymywał domyślne usługi powiązane z obsługiwanymi\n                      urządzeniami (zigbee2mqtt, zwave2mqtt), to możesz tę\n                      funkcję włączyć.\n                    `}\n\n                <br /><br />\n                ${!this.usbsetingsValidating\n                  ? html` <b\n                        >Automatyczny start usług dla urządzeń USB:&nbsp;</b\n                      >\n                      <ha-switch\n                        .checked=${this.usbSettingsInfo.usbAutoStartServices}\n                        @change=${this.switchAutoUsb}\n                      ></ha-switch>`\n                  : html`<div style=\"width: 100%; text-align: center;\">\n                      <ha-circular-progress active></ha-circular-progress>\n                    </div>`}\n                <br />\n                <br />\n\n                ${this.usbSettingsInfo.usbVoiceNotification\n                  ? html`\n                      <h2>\n                        Powiadomienia głosowe o urządzeniach USB\n                        <ha-svg-icon\n                          slot=\"icon\"\n                          path=${mdiAccountVoice}\n                        ></ha-svg-icon>\n                      </h2>\n                      Asystent powiadamia komunikatem głosowym o tym, jakie\n                      urządzenie USB zostało dodane lub usunięte. Możesz tę\n                      funkcję wyłączyć.\n                    `\n                  : html`\n                      <h2>\n                        Powiadomienia głosowe o urządzeniach USB\n                        <ha-svg-icon\n                          slot=\"icon\"\n                          path=${mdiAccountVoiceOff}\n                        ></ha-svg-icon>\n                      </h2>\n                      Jeśl chcesz, żeby asystent powiadamiał komunikatem\n                      głosowym o tym, jakie urządzenie USB zostało dodane lub\n                      usunięte, to możesz tę funkcję włączyć.\n                    `}\n\n                <br /><br />\n                ${!this.usbsetingsValidating\n                  ? html` <b>Powiadomienia głosowe o urządzeniach USB:&nbsp;</b>\n                      <ha-switch\n                        .checked=${this.usbSettingsInfo.usbVoiceNotification}\n                        @change=${this.switchVoiceForUsb}\n                      ></ha-switch>`\n                  : html`<div style=\"width: 100%; text-align: center;\">\n                      <ha-circular-progress active></ha-circular-progress>\n                    </div>`}\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > paper-toggle-button {\n          margin: -4px 0;\n          position: absolute;\n          top: 32px;\n          right: 8px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n      `,\n    ];\n  }\n\n  switchAutoUsb(ev) {\n    this.usbSettingsInfo.usbAutoStartServices = ev.target.checked;\n    this.saveUsbSettings();\n  }\n\n  switchVoiceForUsb(ev) {\n    this.usbSettingsInfo.usbVoiceNotification = ev.target.checked;\n    this.saveUsbSettings();\n  }\n\n  private async saveUsbSettings(): Promise<void> {\n    this.usbsetingsValidating = true;\n    try {\n      const result = await aisSaveUsbSettings(this.usbSettingsInfo);\n      this.errorUsbInfo = result.error;\n      this.messageUsbInfo = result.info;\n    } catch (err) {\n      this.errorUsbInfo = err;\n    }\n\n    this.usbsetingsValidating = false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-usb\": HaConfigAisDomConfigUsb;\n  }\n}\n"],"names":[],"sourceRoot":""}