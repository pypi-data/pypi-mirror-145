{"version":3,"file":"87028cc5.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;;AC4BA;AACA;;AAEA;AACA;;;;;;;AAOA;;AAEA;;;;AAQA;;;;AAIA;;;;AAIA;AACA;;;;;AAKA;;;;;;;AAOA;;;;AAIA;;;;;AAKA;;;;;;;AAOA;;;;;;;;;AASA;AAOA;;AAGA;AACA;;AAGA;AACA;;;;AAKA;;;;AAKA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjHA;;ACmCA;;;;;;AAMA;;;AAKA;;;;AAIA;AAKA;;;AAQA;AAGA;;AAMA;;;AAGA;;AAIA;;;;;AASA;;;;;AAUA;AAKA;AACA;AAEA;AACA;AACA;;AAGA;AAGA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlHA;;AC4DA;AAEA;;;AAKA;;;;AAIA;;AATA;AAeA;;;AAUA;;AAIA;;AAIA;;AAIA;AACA;AAGA;;AAEA;;;AALA;;AAeA;;AAEA;;AAnFA;;;;AAyFA;;;;AAIA;;;;;AAKA;;;;AAIA;;;;AAIA;;;AAGA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7HA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/panels/config/info/ha-config-info.ts","webpack://home-assistant-frontend/./src/panels/config/info/integrations-card.ts","webpack://home-assistant-frontend/./src/panels/config/info/system-health-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport \"../../../components/ha-logo-svg\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./integrations-card\";\nimport \"./system-health-card\";\n\nconst JS_TYPE = __BUILD__;\nconst JS_VERSION = __VERSION__;\n\nclass HaConfigInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  protected render(): TemplateResult {\n    const hass = this.hass;\n    const customUiList: Array<{ name: string; url: string; version: string }> =\n      (window as any).CUSTOM_UI_LIST || [];\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.general}\n      >\n        <div class=\"about\">\n          <a href=\"https://ai-speaker.com\" target=\"_blank\" rel=\"noreferrer\">\n            <ha-logo-svg title=\"AI-Speaker\"> </ha-logo-svg>\n          </a>\n          <br />\n          <h2>AI-Speaker ${hass.connection.haVersion}</h2>\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.info.path_configuration\",\n              \"path\",\n              hass.config.config_dir\n            )}\n          </p>\n          <p class=\"develop\">\n            <a\n              href=${documentationUrl(this.hass, \"/developers/credits/\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              ${this.hass.localize(\"ui.panel.config.info.developed_by\")}\n            </a>\n          </p>\n          <p>\n            ${this.hass.localize(\"ui.panel.config.info.license\")}<br />\n            ${this.hass.localize(\"ui.panel.config.info.source\")}\n            <a\n              href=\"https://github.com/sviete/AIS-home-assistant\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\"ui.panel.config.info.server\")}</a\n            >\n            &mdash;\n            <a\n              href=\"https://github.com/sviete/AIS-home-assistant-polymer\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\"ui.panel.config.info.frontend\")}</a\n            >\n          </p>\n          <p>\n            ${this.hass.localize(\"ui.panel.config.info.built_using\")}\n            <a href=\"https://www.python.org\" target=\"_blank\" rel=\"noreferrer\"\n              >Python 3</a\n            >,\n            <a href=\"https://lit.dev\" target=\"_blank\" rel=\"noreferrer\">Lit</a>,\n            ${this.hass.localize(\"ui.panel.config.info.icons_by\")}\n            <a\n              href=\"https://fonts.google.com/icons?selected=Material+Icons\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >Google</a\n            >\n            ${this.hass.localize(\"ui.common.and\")}\n            <a\n              href=\"https://materialdesignicons.com/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >Material Design Icons</a\n            >.\n          </p>\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.info.frontend_version\",\n              \"version\",\n              JS_VERSION,\n              \"type\",\n              JS_TYPE\n            )}\n            ${customUiList.length > 0\n              ? html`\n                  <div>\n                    ${this.hass.localize(\"ui.panel.config.info.custom_uis\")}\n                    ${customUiList.map(\n                      (item) => html`\n                        <div>\n                          <a href=${item.url} target=\"_blank\"> ${item.name}</a>:\n                          ${item.version}\n                        </div>\n                      `\n                    )}\n                  </div>\n                `\n              : \"\"}\n          </p>\n        </div>\n        <div>\n          <system-health-card .hass=${this.hass}></system-health-card>\n          <integrations-card\n            .hass=${this.hass}\n            .narrow=${this.narrow}\n          ></integrations-card>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    // Legacy custom UI can be slow to register, give them time.\n    const customUI = ((window as any).CUSTOM_UI_LIST || []).length;\n    setTimeout(() => {\n      if (((window as any).CUSTOM_UI_LIST || []).length !== customUI.length) {\n        this.requestUpdate();\n      }\n    }, 1000);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .about {\n          text-align: center;\n          line-height: 2em;\n        }\n\n        .version {\n          @apply --paper-font-headline;\n        }\n\n        .develop {\n          @apply --paper-font-subhead;\n        }\n\n        .about a {\n          color: var(--primary-color);\n        }\n\n        system-health-card,\n        integrations-card {\n          display: block;\n          max-width: 600px;\n          margin: 0 auto;\n          padding-bottom: 16px;\n        }\n        ha-logo-svg {\n          padding: 12px;\n          height: 180px;\n          width: 180px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-info\": HaConfigInfo;\n  }\n}\n\ncustomElements.define(\"ha-config-info\", HaConfigInfo);\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../components/ha-card\";\nimport {\n  domainToName,\n  fetchIntegrationManifests,\n  fetchIntegrationSetups,\n  integrationIssuesUrl,\n  IntegrationManifest,\n  IntegrationSetup,\n} from \"../../../data/integration\";\nimport { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\n@customElement(\"integrations-card\")\nclass IntegrationsCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _manifests?: {\n    [domain: string]: IntegrationManifest;\n  };\n\n  @state() private _setups?: {\n    [domain: string]: IntegrationSetup;\n  };\n\n  private _sortedIntegrations = memoizeOne((components: string[]) =>\n    Array.from(\n      new Set(\n        components.map((comp) =>\n          comp.includes(\".\") ? comp.split(\".\")[1] : comp\n        )\n      )\n    ).sort()\n  );\n\n  firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchManifests();\n    this._fetchSetups();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        .header=${this.hass.localize(\"ui.panel.config.info.integrations\")}\n      >\n        <table class=\"card-content\">\n          <thead>\n            <tr>\n              <th></th>\n              ${!this.narrow\n                ? html`<th></th>\n                    <th></th>\n                    <th></th>`\n                : \"\"}\n              <th>${this.hass.localize(\"ui.panel.config.info.setup_time\")}</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${this._sortedIntegrations(this.hass!.config.components).map(\n              (domain) => {\n                const manifest = this._manifests && this._manifests[domain];\n                const docLink = manifest\n                  ? html`<a\n                      href=${manifest.is_built_in\n                        ? documentationUrl(\n                            this.hass,\n                            `/integrations/${manifest.domain}`\n                          )\n                        : manifest.documentation}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.info.documentation\"\n                      )}</a\n                    >`\n                  : \"\";\n                const issueLink =\n                  manifest && (manifest.is_built_in || manifest.issue_tracker)\n                    ? html`\n                        <a\n                          href=${integrationIssuesUrl(domain, manifest)}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                          >${this.hass.localize(\n                            \"ui.panel.config.info.issues\"\n                          )}</a\n                        >\n                      `\n                    : \"\";\n                const setupSeconds =\n                  this._setups?.[domain]?.seconds?.toFixed(2);\n                return html`\n                  <tr>\n                    <td>\n                      <img\n                        loading=\"lazy\"\n                        src=${brandsUrl({\n                          domain: domain,\n                          type: \"icon\",\n                          useFallback: true,\n                          darkOptimized: this.hass.themes?.darkMode,\n                        })}\n                        referrerpolicy=\"no-referrer\"\n                      />\n                    </td>\n                    <td class=\"name\">\n                      ${domainToName(\n                        this.hass.localize,\n                        domain,\n                        manifest\n                      )}<br />\n                      <span class=\"domain\">${domain}</span>\n                      ${this.narrow\n                        ? html`<div class=\"mobile-row\">\n                            <div>${docLink} ${issueLink}</div>\n                            ${setupSeconds ? html`${setupSeconds} s` : \"\"}\n                          </div>`\n                        : \"\"}\n                    </td>\n                    ${this.narrow\n                      ? \"\"\n                      : html`\n                          <td>${docLink}</td>\n                          <td>${issueLink}</td>\n                          <td class=\"setup\">\n                            ${setupSeconds ? html`${setupSeconds} s` : \"\"}\n                          </td>\n                        `}\n                  </tr>\n                `;\n              }\n            )}\n          </tbody>\n        </table>\n      </ha-card>\n    `;\n  }\n\n  private async _fetchManifests() {\n    const manifests = {};\n    for (const manifest of await fetchIntegrationManifests(this.hass)) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private async _fetchSetups() {\n    const setups = {};\n    for (const setup of await fetchIntegrationSetups(this.hass)) {\n      setups[setup.domain] = setup;\n    }\n    this._setups = setups;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      table {\n        width: 100%;\n      }\n      td,\n      th {\n        padding: 0 8px;\n      }\n      td:first-child {\n        padding-left: 0;\n      }\n      td.name {\n        padding: 8px;\n      }\n      td.setup {\n        text-align: right;\n        white-space: nowrap;\n        direction: ltr;\n      }\n      th {\n        text-align: right;\n      }\n      .domain {\n        color: var(--secondary-text-color);\n      }\n      .mobile-row {\n        display: flex;\n        justify-content: space-between;\n      }\n      .mobile-row a:not(:last-of-type) {\n        margin-right: 4px;\n      }\n      img {\n        display: block;\n        max-height: 40px;\n        max-width: 40px;\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"integrations-card\": IntegrationsCard;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-icon-button\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  subscribeSystemHealthInfo,\n  SystemCheckValueObject,\n  SystemHealthInfo,\n} from \"../../../data/system_health\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\n\nconst sortKeys = (a: string, b: string) => {\n  if (a === \"homeassistant\") {\n    return -1;\n  }\n  if (b === \"homeassistant\") {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (b < a) {\n    return 1;\n  }\n  return 0;\n};\n\nclass SystemHealthCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _info?: SystemHealthInfo;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const sections: TemplateResult[] = [];\n\n    if (!this._info) {\n      sections.push(\n        html`\n          <div class=\"loading-container\">\n            <ha-circular-progress active></ha-circular-progress>\n          </div>\n        `\n      );\n    } else {\n      const domains = Object.keys(this._info).sort(sortKeys);\n      for (const domain of domains) {\n        const domainInfo = this._info[domain];\n        const keys: TemplateResult[] = [];\n\n        for (const key of Object.keys(domainInfo.info)) {\n          let value: unknown;\n\n          if (\n            domainInfo.info[key] &&\n            typeof domainInfo.info[key] === \"object\"\n          ) {\n            const info = domainInfo.info[key] as SystemCheckValueObject;\n\n            if (info.type === \"pending\") {\n              value = html`\n                <ha-circular-progress active size=\"tiny\"></ha-circular-progress>\n              `;\n            } else if (info.type === \"failed\") {\n              value = html`\n                <span class=\"error\">${info.error}</span>${!info.more_info\n                  ? \"\"\n                  : html`\n                      –\n                      <a\n                        href=${info.more_info}\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.info.system_health.more_info\"\n                        )}\n                      </a>\n                    `}\n              `;\n            } else if (info.type === \"date\") {\n              value = formatDateTime(new Date(info.value), this.hass.locale);\n            }\n          } else {\n            value = domainInfo.info[key];\n          }\n\n          keys.push(html`\n            <tr>\n              <td>\n                ${this.hass.localize(\n                  `component.${domain}.system_health.info.${key}`\n                ) || key}\n              </td>\n              <td>${value}</td>\n            </tr>\n          `);\n        }\n        if (domain !== \"homeassistant\") {\n          sections.push(\n            html`\n              <div class=\"card-header\">\n                <h3>${domainToName(this.hass.localize, domain)}</h3>\n                ${!domainInfo.manage_url\n                  ? \"\"\n                  : html`\n                      <a class=\"manage\" href=${domainInfo.manage_url}>\n                        <mwc-button>\n                          ${this.hass.localize(\n                            \"ui.panel.config.info.system_health.manage\"\n                          )}\n                        </mwc-button>\n                      </a>\n                    `}\n              </div>\n            `\n          );\n        }\n        sections.push(html`\n          <table>\n            ${keys}\n          </table>\n        `);\n      }\n    }\n\n    return html`\n      <ha-card>\n        <h1 class=\"card-header\">\n          <div class=\"card-header-text\">\n            ${domainToName(this.hass.localize, \"system_health\")}\n          </div>\n          <ha-button-menu\n            corner=\"BOTTOM_START\"\n            slot=\"toolbar-icon\"\n            @action=${this._copyInfo}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.panel.config.info.copy_menu\")}\n              .path=${mdiContentCopy}\n            ></ha-icon-button>\n            <mwc-list-item>\n              ${this.hass.localize(\"ui.panel.config.info.copy_raw\")}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.hass.localize(\"ui.panel.config.info.copy_github\")}\n            </mwc-list-item>\n          </ha-button-menu>\n        </h1>\n        <div class=\"card-content\">${sections}</div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    this.hass!.loadBackendTranslation(\"system_health\");\n\n    if (!isComponentLoaded(this.hass!, \"system_health\")) {\n      this._info = {\n        system_health: {\n          info: {\n            error: this.hass.localize(\n              \"ui.panel.config.info.system_health_error\"\n            ),\n          },\n        },\n      };\n      return;\n    }\n\n    subscribeSystemHealthInfo(this.hass!, (info) => {\n      this._info = info;\n    });\n  }\n\n  private async _copyInfo(ev: CustomEvent<ActionDetail>): Promise<void> {\n    const github = ev.detail.index === 1;\n    let haContent: string | undefined;\n    const domainParts: string[] = [];\n\n    for (const domain of Object.keys(this._info!).sort(sortKeys)) {\n      const domainInfo = this._info![domain];\n      let first = true;\n      const parts = [\n        `${\n          github && domain !== \"homeassistant\"\n            ? `<details><summary>${domainToName(\n                this.hass.localize,\n                domain\n              )}</summary>\\n`\n            : \"\"\n        }`,\n      ];\n\n      for (const key of Object.keys(domainInfo.info)) {\n        let value: unknown;\n\n        if (typeof domainInfo.info[key] === \"object\") {\n          const info = domainInfo.info[key] as SystemCheckValueObject;\n\n          if (info.type === \"pending\") {\n            value = \"pending\";\n          } else if (info.type === \"failed\") {\n            value = `failed to load: ${info.error}`;\n          } else if (info.type === \"date\") {\n            value = formatDateTime(new Date(info.value), this.hass.locale);\n          }\n        } else {\n          value = domainInfo.info[key];\n        }\n        if (github && first) {\n          parts.push(`${key} | ${value}\\n-- | --`);\n          first = false;\n        } else {\n          parts.push(`${key}${github ? \" | \" : \": \"}${value}`);\n        }\n      }\n\n      if (domain === \"homeassistant\") {\n        haContent = parts.join(\"\\n\");\n      } else {\n        domainParts.push(parts.join(\"\\n\"));\n        if (github && domain !== \"homeassistant\") {\n          domainParts.push(\"</details>\");\n        }\n      }\n    }\n\n    await copyToClipboard(\n      `${github ? \"## \" : \"\"}System Health\\n${haContent}\\n\\n${domainParts.join(\n        \"\\n\\n\"\n      )}`\n    );\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      table {\n        width: 100%;\n      }\n\n      td:first-child {\n        width: 45%;\n      }\n\n      td:last-child {\n        direction: ltr;\n      }\n\n      .loading-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .card-header {\n        justify-content: space-between;\n        display: flex;\n        align-items: center;\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      a {\n        color: var(--primary-color);\n      }\n\n      a.manage {\n        text-decoration: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"system-health-card\", SystemHealthCard);\n"],"names":[],"sourceRoot":""}