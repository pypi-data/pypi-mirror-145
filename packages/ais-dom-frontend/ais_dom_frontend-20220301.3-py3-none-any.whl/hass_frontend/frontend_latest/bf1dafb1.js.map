{"version":3,"file":"bf1dafb1.js","mappings":";AAoBA;AACA;;AAGA;;;;;;;;AAXA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;AAzBA;ACkDA;;;AAGA;AAGA;AACA;;;;;AAlDA;;;;AAAA;;;ACkEA;AACA;;AAaA;AACA;AAIA;;AAGA;AACA;;AAEA;AAEA;;AAGA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;AAEA;;AAKA;AACA;;;AAxDA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/ha-device-automation-card.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/ha-device-automation-dialog.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading {\n        --mdc-icon-size: 20px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.no-text\n        .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-chip\";\nimport \"../../../../components/ha-chip-set\";\nimport { showAutomationEditor } from \"../../../../data/automation\";\nimport {\n  DeviceAction,\n  DeviceAutomation,\n} from \"../../../../data/device_automation\";\nimport { showScriptEditor } from \"../../../../data/script\";\nimport { HomeAssistant } from \"../../../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"entry-selected\": undefined;\n  }\n}\n\nexport abstract class HaDeviceAutomationCard<\n  T extends DeviceAutomation\n> extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public deviceId?: string;\n\n  @property() public script = false;\n\n  @property() public automations: T[] = [];\n\n  protected headerKey = \"\";\n\n  protected type = \"\";\n\n  private _localizeDeviceAutomation: (\n    hass: HomeAssistant,\n    automation: T\n  ) => string;\n\n  constructor(\n    localizeDeviceAutomation: HaDeviceAutomationCard<T>[\"_localizeDeviceAutomation\"]\n  ) {\n    super();\n    this._localizeDeviceAutomation = localizeDeviceAutomation;\n  }\n\n  protected shouldUpdate(changedProps): boolean {\n    if (changedProps.has(\"deviceId\") || changedProps.has(\"automations\")) {\n      return true;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.language !== this.hass.language) {\n      return true;\n    }\n    return false;\n  }\n\n  protected render(): TemplateResult {\n    if (this.automations.length === 0) {\n      return html``;\n    }\n    return html`\n      <h3>${this.hass.localize(this.headerKey)}</h3>\n      <div class=\"content\">\n        <ha-chip-set>\n          ${this.automations.map(\n            (automation, idx) =>\n              html`\n                <ha-chip .index=${idx} @click=${this._handleAutomationClicked}>\n                  ${this._localizeDeviceAutomation(this.hass, automation)}\n                </ha-chip>\n              `\n          )}\n        </ha-chip-set>\n      </div>\n    `;\n  }\n\n  private _handleAutomationClicked(ev: CustomEvent) {\n    const automation = this.automations[(ev.currentTarget as any).index];\n    if (!automation) {\n      return;\n    }\n    if (this.script) {\n      showScriptEditor({ sequence: [automation as DeviceAction] });\n      fireEvent(this, \"entry-selected\");\n      return;\n    }\n    const data = {};\n    data[this.type] = [automation];\n    showAutomationEditor(data);\n    fireEvent(this, \"entry-selected\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      h3 {\n        color: var(--primary-text-color);\n      }\n    `;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-dialog\";\nimport {\n  DeviceAction,\n  DeviceCondition,\n  DeviceTrigger,\n  fetchDeviceActions,\n  fetchDeviceConditions,\n  fetchDeviceTriggers,\n} from \"../../../../data/device_automation\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-device-actions-card\";\nimport \"./ha-device-conditions-card\";\nimport \"./ha-device-triggers-card\";\nimport { DeviceAutomationDialogParams } from \"./show-dialog-device-automation\";\n\n@customElement(\"dialog-device-automation\")\nexport class DialogDeviceAutomation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _triggers: DeviceTrigger[] = [];\n\n  @state() private _conditions: DeviceCondition[] = [];\n\n  @state() private _actions: DeviceAction[] = [];\n\n  @state() private _params?: DeviceAutomationDialogParams;\n\n  public async showDialog(params: DeviceAutomationDialogParams): Promise<void> {\n    this._params = params;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this.hass.loadBackendTranslation(\"device_automation\");\n  }\n\n  protected updated(changedProps): void {\n    super.updated(changedProps);\n\n    if (!changedProps.has(\"_params\")) {\n      return;\n    }\n\n    this._triggers = [];\n    this._conditions = [];\n    this._actions = [];\n\n    if (!this._params) {\n      return;\n    }\n\n    const { device, script } = this._params;\n\n    fetchDeviceActions(this.hass, device.id).then((actions) => {\n      this._actions = actions;\n    });\n    if (script) {\n      return;\n    }\n    fetchDeviceTriggers(this.hass, device.id).then((triggers) => {\n      this._triggers = triggers;\n    });\n    fetchDeviceConditions(this.hass, device.id).then((conditions) => {\n      this._conditions = conditions;\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          `ui.panel.config.devices.${\n            this._params.script ? \"script\" : \"automation\"\n          }.create`,\n          {\n            type: this.hass.localize(\n              `ui.panel.config.devices.type.${\n                this._params.device.entry_type || \"device\"\n              }`\n            ),\n          }\n        )}\n      >\n        <div @entry-selected=${this.closeDialog}>\n          ${this._triggers.length ||\n          this._conditions.length ||\n          this._actions.length\n            ? html`\n                ${this._triggers.length\n                  ? html`\n                      <ha-device-triggers-card\n                        .hass=${this.hass}\n                        .automations=${this._triggers}\n                      ></ha-device-triggers-card>\n                    `\n                  : \"\"}\n                ${this._conditions.length\n                  ? html`\n                      <ha-device-conditions-card\n                        .hass=${this.hass}\n                        .automations=${this._conditions}\n                      ></ha-device-conditions-card>\n                    `\n                  : \"\"}\n                ${this._actions.length\n                  ? html`\n                      <ha-device-actions-card\n                        .hass=${this.hass}\n                        .automations=${this._actions}\n                        .script=${this._params.script}\n                      ></ha-device-actions-card>\n                    `\n                  : \"\"}\n              `\n            : this.hass.localize(\n                \"ui.panel.config.devices.automation.no_device_automations\"\n              )}\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n          ${this.hass.localize(\"ui.common.close\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-device-automation\": DialogDeviceAutomation;\n  }\n}\n"],"names":[],"sourceRoot":""}