{"version":3,"file":"34e028bb.js","mappings":";AAmCA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAvCA;;;;;;;;AAAA;;ACqBA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;ACuBA;;;;;AAKA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/ais_mqtt/ais-mqtt-config-panel.ts"],"sourcesContent":["import \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x?: number;\n\n  @property({ type: Number }) public y?: number;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../../../../../components/ha-button-menu\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultArray, html, LitElement, TemplateResult } from \"lit\";\nimport { property, customElement } from \"lit/decorators\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-code-editor\";\nimport {\n  getConfigEntries,\n  reloadConfigEntry,\n} from \"../../../../../data/config_entries\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport {\n  showAisFileDialog,\n  HaAisFileDialogParams,\n} from \"../../../../../dialogs/ais-files/show-dialog-ais-file\";\nimport { mdiDotsVertical } from \"@mdi/js\";\n\n@customElement(\"ais-mqtt-config-panel\")\nclass HaPanelDevAisMqtt extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  protected firstUpdated() {}\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage .hass=${this.hass}>\n        <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n          <mwc-icon-button slot=\"trigger\" alt=\"menu\">\n            <ha-svg-icon .path=${mdiDotsVertical}></ha-svg-icon>\n          </mwc-icon-button>\n          <mwc-list-item @click=${this._openMosquittoFile}>\n            Edit MQTT supla.conf\n          </mwc-list-item>\n          <mwc-list-item @click=${this._restartMosquittoService}>\n            Restart MQTT sevice\n          </mwc-list-item>\n        </ha-button-menu>\n        <div class=\"content\">\n          <ha-card header=\"Ustawienia SUPLA MQTT\">\n            <ha-dialog> </ha-dialog>\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._openOptionFlow}\n                >Dane połączenia\n              </mwc-button>\n              <mwc-button @click=${this._reloadIntegration}\n                >Wczytaj ponownie\n              </mwc-button>\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _openOptionFlow() {\n    const searchParams = new URLSearchParams(window.location.search);\n    if (!searchParams.has(\"config_entry\")) {\n      return;\n    }\n    const configEntryId = searchParams.get(\"config_entry\") as string;\n    const configEntries = await getConfigEntries(this.hass);\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === configEntryId\n    );\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  private async _reloadIntegration() {\n    const searchParams = new URLSearchParams(window.location.search);\n    if (!searchParams.has(\"config_entry\")) {\n      // eslint-disable-next-line no-console\n      console.log(\"No config_entry\");\n    } else {\n      await reloadConfigEntry(\n        this.hass,\n        searchParams.get(\"config_entry\") || \"\"\n      );\n      showAlertDialog(this, {\n        text: \"OK. Integracja została ponownie wczytana.\",\n      });\n    }\n  }\n\n  private async _openMosquittoFile() {\n    const filePath =\n      \"/data/data/pl.sviete.dom/files/usr/etc/mosquitto/mqtt_conf.d/supla.conf\";\n    const file = await this.hass.callApi<string>(\"POST\", \"ais_file/read\", {\n      filePath: filePath,\n    });\n    const fileParams: HaAisFileDialogParams = {\n      dialogTitle: \"MQTT mosquitto.conf\",\n      filePath: filePath,\n      fileBody: file,\n      readonly: false,\n    };\n    showAisFileDialog(this, fileParams);\n  }\n\n  private async _restartMosquittoService() {\n    this.hass.callService(\"ais_shell_command\", \"restart_pm2_service\", {\n      service: \"mqtt\",\n    });\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 24px 0 32px;\n          max-width: 600px;\n          margin: 0 auto;\n          direction: ltr;\n        }\n        ha-card:first-child {\n          margin-bottom: 16px;\n        }\n        mqtt-subscribe-card {\n          display: block;\n          margin: 16px auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ais-mqtt-config-panel\": HaPanelDevAisMqtt;\n  }\n}\n"],"names":[],"sourceRoot":""}