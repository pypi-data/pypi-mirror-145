{"version":3,"file":"ac858cd4.js","mappings":";;AA8DA;AACA;;AAOA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;;;AAKA;;;;;;;;AAUA;;;;AAKA;AACA;;AAEA;AACA;AACA;AAGA;AACA;AAEA;;;AAGA;;AAIA;;;AAIA;AACA;;;;;AAOA;;;AAIA;;;;AAMA;;AAIA;;;AAGA;AAEA;AAEA;;;AAIA;AACA;AACA;;;;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhJA","sources":["webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/ozw/ozw-node-config.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { navigate } from \"../../../../../common/navigate\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport {\n  fetchOZWNodeConfig,\n  fetchOZWNodeMetadata,\n  fetchOZWNodeStatus,\n  OZWDevice,\n  OZWDeviceConfig,\n  OZWDeviceMetaDataResponse,\n} from \"../../../../../data/ozw\";\nimport { ERR_NOT_FOUND } from \"../../../../../data/websocket_api\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { ozwNodeTabs } from \"./ozw-node-router\";\nimport { showOZWRefreshNodeDialog } from \"./show-dialog-ozw-refresh-node\";\n\n@customElement(\"ozw-node-config\")\nclass OZWNodeConfig extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property() public configEntryId?: string;\n\n  @property() public ozwInstance?;\n\n  @property() public nodeId?;\n\n  @state() private _node?: OZWDevice;\n\n  @state() private _metadata?: OZWDeviceMetaDataResponse;\n\n  @state() private _config?: OZWDeviceConfig[];\n\n  @state() private _error?: string;\n\n  protected firstUpdated() {\n    if (!this.ozwInstance) {\n      navigate(\"/config/ozw/dashboard\", { replace: true });\n    } else if (!this.nodeId) {\n      navigate(`/config/ozw/network/${this.ozwInstance}/nodes`, {\n        replace: true,\n      });\n    } else {\n      this._fetchData();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._error) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\n            \"ui.panel.config.ozw.node.\" + this._error\n          )}\n        ></hass-error-screen>\n      `;\n    }\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${ozwNodeTabs(this.ozwInstance, this.nodeId)}\n      >\n        <ha-config-section .narrow=${this.narrow} .isWide=${this.isWide}>\n          <div slot=\"header\">\n            ${this.hass.localize(\"ui.panel.config.ozw.node_config.header\")}\n          </div>\n\n          <div slot=\"introduction\">\n            ${this.hass.localize(\n              \"ui.panel.config.ozw.node_config.introduction\"\n            )}\n            <p>\n              <em>\n                ${this.hass.localize(\n                  \"ui.panel.config.ozw.node_config.help_source\"\n                )}\n              </em>\n            </p>\n            <p>\n              Note: This panel is currently read-only. The ability to change\n              values will come in a later update.\n            </p>\n          </div>\n          ${this._node\n            ? html`\n                <ha-card class=\"content\">\n                  <div class=\"card-content\">\n                    <b>\n                      ${this._node.node_manufacturer_name}\n                      ${this._node.node_product_name} </b\n                    ><br />\n                    ${this.hass.localize(\"ui.panel.config.ozw.common.node_id\")}:\n                    ${this._node.node_id}<br />\n                    ${this.hass.localize(\n                      \"ui.panel.config.ozw.common.query_stage\"\n                    )}:\n                    ${this._node.node_query_stage}\n                    ${this._metadata?.metadata.ProductManualURL\n                      ? html` <a\n                          href=${this._metadata.metadata.ProductManualURL}\n                        >\n                          <p>\n                            ${this.hass.localize(\n                              \"ui.panel.config.ozw.node_metadata.product_manual\"\n                            )}\n                          </p>\n                        </a>`\n                      : ``}\n                  </div>\n                  <div class=\"card-actions\">\n                    <mwc-button @click=${this._refreshNodeClicked}>\n                      ${this.hass.localize(\n                        \"ui.panel.config.ozw.refresh_node.button\"\n                      )}\n                    </mwc-button>\n                  </div>\n                </ha-card>\n\n                ${this._metadata?.metadata.WakeupHelp\n                  ? html`\n                      <ha-card\n                        class=\"content\"\n                        header=${this.hass.localize(\n                          \"ui.panel.config.ozw.common.wakeup_instructions\"\n                        )}\n                      >\n                        <div class=\"card-content\">\n                          <span class=\"secondary\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.ozw.node_config.wakeup_help\"\n                            )}\n                          </span>\n                          <p>${this._metadata.metadata.WakeupHelp}</p>\n                        </div>\n                      </ha-card>\n                    `\n                  : ``}\n                ${this._config\n                  ? html`\n                      ${this._config.map(\n                        (item) => html`\n                          <ha-card class=\"content\">\n                            <div class=\"card-content\">\n                              <b>${item.label}</b><br />\n                              <span class=\"secondary\">${item.help}</span>\n                              <p>${item.value}</p>\n                            </div>\n                          </ha-card>\n                        `\n                      )}\n                    `\n                  : ``}\n              `\n            : ``}\n        </ha-config-section>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _fetchData() {\n    if (!this.ozwInstance || !this.nodeId) {\n      return;\n    }\n\n    try {\n      const nodeProm = fetchOZWNodeStatus(\n        this.hass!,\n        this.ozwInstance,\n        this.nodeId\n      );\n      const metadataProm = fetchOZWNodeMetadata(\n        this.hass!,\n        this.ozwInstance,\n        this.nodeId\n      );\n      const configProm = fetchOZWNodeConfig(\n        this.hass!,\n        this.ozwInstance,\n        this.nodeId\n      );\n      [this._node, this._metadata, this._config] = await Promise.all([\n        nodeProm,\n        metadataProm,\n        configProm,\n      ]);\n    } catch (err: any) {\n      if (err.code === ERR_NOT_FOUND) {\n        this._error = ERR_NOT_FOUND;\n        return;\n      }\n      throw err;\n    }\n  }\n\n  private async _refreshNodeClicked() {\n    showOZWRefreshNodeDialog(this, {\n      node_id: this.nodeId,\n      ozw_instance: this.ozwInstance,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .secondary {\n          color: var(--secondary-text-color);\n          font-size: 0.9em;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        .sectionHeader {\n          position: relative;\n          padding-right: 40px;\n        }\n\n        ha-card {\n          margin: 0 auto;\n          max-width: 600px;\n        }\n\n        [hidden] {\n          display: none;\n        }\n\n        blockquote {\n          display: block;\n          background-color: #ddd;\n          padding: 8px;\n          margin: 8px 0;\n          font-size: 0.9em;\n        }\n\n        blockquote em {\n          font-size: 0.9em;\n          margin-top: 6px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ozw-node-config\": OZWNodeConfig;\n  }\n}\n"],"names":[],"sourceRoot":""}