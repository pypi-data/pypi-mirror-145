{"version":3,"file":"35c37d8a.js","mappings":";;AAaA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;ACDA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave/zwave-log-dialog.js"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n      }\n      [dir=\"rtl\"].header_button {\n        right: auto;\n        left: 16px;\n      }\n      [dir=\"rtl\"].header_title {\n        margin-left: 40px;\n        margin-right: 0px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { EventsMixin } from \"../../../../../mixins/events-mixin\";\nimport \"../../../../../styles/polymer-ha-style-dialog\";\nimport \"../../../../../components/ha-dialog\";\n\nclass ZwaveLogDialog extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"ha-style-dialog\">\n      pre {\n        font-family: var(--code-font-family, monospace);\n      }\n    </style>\n      <ha-dialog open=\"[[_opened]]\" heading=\"OpenZwave internal logfile\" on-closed=\"closeDialog\">\n        <div>\n          <pre>[[_ozwLog]]</pre>\n        <div>\n      </ha-dialog>\n      `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      _ozwLog: String,\n\n      _dialogClosedCallback: Function,\n\n      _opened: {\n        type: Boolean,\n        value: false,\n      },\n\n      _intervalId: String,\n\n      _numLogLines: {\n        type: Number,\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener(\"iron-overlay-closed\", (ev) =>\n      this._dialogClosed(ev)\n    );\n  }\n\n  showDialog({ _ozwLog, hass, _tail, _numLogLines, dialogClosedCallback }) {\n    this.hass = hass;\n    this._ozwLog = _ozwLog;\n    this._opened = true;\n    this._dialogClosedCallback = dialogClosedCallback;\n    this._numLogLines = _numLogLines;\n    if (_tail) {\n      this.setProperties({\n        _intervalId: setInterval(() => {\n          this._refreshLog();\n        }, 1500),\n      });\n    }\n  }\n\n  closeDialog() {\n    clearInterval(this._intervalId);\n    this._opened = false;\n    const closedEvent = true;\n    this._dialogClosedCallback({ closedEvent });\n    this._dialogClosedCallback = null;\n  }\n\n  async _refreshLog() {\n    const info = await this.hass.callApi(\n      \"GET\",\n      \"zwave/ozwlog?lines=\" + this._numLogLines\n    );\n    this.setProperties({ _ozwLog: info });\n  }\n}\n\ncustomElements.define(\"zwave-log-dialog\", ZwaveLogDialog);\n"],"names":[],"sourceRoot":""}