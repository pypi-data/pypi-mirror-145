{"version":3,"file":"73135a11.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;ACjDA;AACA;AAmBA;AACA;;AAoCA;;AAIA;;;;AAKA;;AAEA;AAKA;AASA;;;;AAKA;;AAEA;;AAGA;;AASA;AAeA;AACA;;ACxJA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;ACkFA;AACA;AACA;;;AAGA;;AAEA;;;;AAMA;;AAIA;AACA;;;;;;;;;AAUA;;;;;;;;;AAWA;;AAGA;;;;;AAMA;;;;;AAKA;;;;;;;;AAUA;AASA;AACA;;;;;AAMA;;;;;;;AAQA;;;AAIA;;;;;AAKA;;;;AAMA;;;;;;AAOA;;;;;;;;;;;;;;;;;;AAmBA;AAEA;;AAEA;AACA;;;;;;;;;AAUA;;;;;AAKA;;;;;;;;;;;;AAcA;AAGA;;;;;AAMA;;AAGA;;;;;;;;;AAWA;AAMA;AAKA;;AAIA;AAEA;;AAKA;AAKA;;AAIA;AAEA;;AAKA;AAIA;AAKA;;AAGA;AAEA;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;AAeA;;;;;AAKA;;;;AA1TA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave/zwave-migration.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { html } from \"lit\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  getConfigFlowHandlers,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    getFlowHandlers: async (hass) => {\n      const [handlers] = await Promise.all([\n        getConfigFlowHandlers(hass),\n        hass.loadBackendTranslation(\"title\", undefined, true),\n      ]);\n\n      return handlers.sort((handlerA, handlerB) =>\n        caseInsensitiveStringCompare(\n          domainToName(hass.localize, handlerA),\n          domainToName(hass.localize, handlerB)\n        )\n      );\n    },\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return hass.localize(\n        `component.${step.handler}.config.error.${error}`,\n        step.description_placeholders\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (![\"loading_flow\", \"loading_step\"].includes(reason)) {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../../../common/entity/compute_state_name\";\nimport \"../../../../../components/buttons/ha-call-api-button\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-alert\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-circular-progress\";\nimport \"../../../../../components/ha-icon\";\nimport \"../../../../../components/ha-icon-button\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  fetchDeviceRegistry,\n  subscribeDeviceRegistry,\n} from \"../../../../../data/device_registry\";\nimport {\n  fetchMigrationConfig,\n  fetchNetworkStatus,\n  startZwaveJsConfigFlow,\n  ZWaveMigrationConfig,\n  ZWaveNetworkStatus,\n  ZWAVE_NETWORK_STATE_STOPPED,\n} from \"../../../../../data/zwave\";\nimport {\n  fetchZwaveNetworkStatus as fetchZwaveJsNetworkStatus,\n  fetchZwaveNodeStatus,\n  getZwaveJsIdentifiersFromDevice,\n  migrateZwave,\n  subscribeZwaveNodeReady,\n  ZWaveJsMigrationData,\n} from \"../../../../../data/zwave_js\";\nimport { showConfigFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\n\n@customElement(\"zwave-migration\")\nexport class ZwaveMigration extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @state() private _networkStatus?: ZWaveNetworkStatus;\n\n  @state() private _step = 0;\n\n  @state() private _stoppingNetwork = false;\n\n  @state() private _migrationConfig?: ZWaveMigrationConfig;\n\n  @state() private _migrationData?: ZWaveJsMigrationData;\n\n  @state() private _migratedZwaveEntities?: string[];\n\n  @state() private _deviceNameLookup: { [id: string]: string } = {};\n\n  @state() private _waitingOnDevices?: DeviceRegistryEntry[];\n\n  private _zwaveJsEntryId?: string;\n\n  private _nodeReadySubscriptions?: Promise<UnsubscribeFunc>[];\n\n  private _unsub?: Promise<UnsubscribeFunc>;\n\n  private _unsubDevices?: UnsubscribeFunc;\n\n  public disconnectedCallback(): void {\n    this._unsubscribe();\n    if (this._unsubDevices) {\n      this._unsubDevices();\n      this._unsubDevices = undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config/zwave\"\n      >\n        <ha-config-section .narrow=${this.narrow} .isWide=${this.isWide}>\n          <div slot=\"header\">\n            ${this.hass.localize(\n              \"ui.panel.config.zwave.migration.zwave_js.header\"\n            )}\n          </div>\n\n          <div slot=\"introduction\">\n            ${this.hass.localize(\n              \"ui.panel.config.zwave.migration.zwave_js.introduction\"\n            )}\n          </div>\n          ${html`\n            ${this._step === 0\n              ? html`\n                  <ha-card class=\"content\" header=\"Introduction\">\n                    <div class=\"card-content\">\n                      <p>\n                        This wizard will walk through the following steps to\n                        migrate from the legacy Z-Wave integration to Z-Wave JS.\n                      </p>\n                      <ol>\n                        <li>Stop the Z-Wave network</li>\n                        ${!isComponentLoaded(this.hass, \"hassio\")\n                          ? html`<li>Configure and start Z-Wave JS</li>`\n                          : \"\"}\n                        <li>Set up the Z-Wave JS integration</li>\n                        <li>\n                          Migrate entities and devices to the new integration\n                        </li>\n                        <li>Remove legacy Z-Wave integration</li>\n                      </ol>\n                      <p>\n                        <b>\n                          ${isComponentLoaded(this.hass, \"hassio\")\n                            ? html`Please\n                                <a href=\"/hassio/backups\">make a backup</a>\n                                before proceeding.`\n                            : \"Please make a backup of your installation before proceeding.\"}\n                        </b>\n                      </p>\n                    </div>\n                    <div class=\"card-actions\">\n                      <mwc-button @click=${this._continue}>\n                        Continue\n                      </mwc-button>\n                    </div>\n                  </ha-card>\n                `\n              : this._step === 1\n              ? html`\n                  <ha-card class=\"content\" header=\"Stop Z-Wave Network\">\n                    <div class=\"card-content\">\n                      <p>\n                        We need to stop the Z-Wave network to perform the\n                        migration. Home Assistant will not be able to control\n                        Z-Wave devices while the network is stopped.\n                      </p>\n                      ${Object.values(this.hass.states)\n                        .filter(\n                          (entityState) =>\n                            computeStateDomain(entityState) === \"zwave\" &&\n                            ![\"ready\", \"sleeping\"].includes(entityState.state)\n                        )\n                        .map(\n                          (entityState) =>\n                            html`<ha-alert alert-type=\"warning\">\n                              Device ${computeStateName(entityState)}\n                              (${entityState.entity_id}) is not ready yet! For\n                              the best result, wake the device up if it is\n                              battery powered and wait for this device to become\n                              ready.\n                            </ha-alert>`\n                        )}\n                      ${this._stoppingNetwork\n                        ? html`\n                            <div class=\"flex-container\">\n                              <ha-circular-progress\n                                active\n                              ></ha-circular-progress>\n                              <div><p>Stopping Z-Wave Network...</p></div>\n                            </div>\n                          `\n                        : ``}\n                    </div>\n                    <div class=\"card-actions\">\n                      <mwc-button @click=${this._stopNetwork}>\n                        Stop Network\n                      </mwc-button>\n                    </div>\n                  </ha-card>\n                `\n              : this._step === 2\n              ? html`\n                  <ha-card class=\"content\" header=\"Set up Z-Wave JS\">\n                    <div class=\"card-content\">\n                      <p>Now it's time to set up the Z-Wave JS integration.</p>\n                      ${isComponentLoaded(this.hass, \"hassio\")\n                        ? html`\n                            <p>\n                              Z-Wave JS runs as a Home Assistant add-on that\n                              will be setup next. Make sure to check the\n                              checkbox to use the add-on.\n                            </p>\n                          `\n                        : html`\n                            <p>\n                              You are not running Home Assistant OS (the default\n                              installation type) or Home Assistant Supervised,\n                              so we can not setup Z-Wave JS automaticaly. Follow\n                              the\n                              <a\n                                href=\"https://www.home-assistant.io/integrations/zwave_js/#advanced-installation-instructions\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                >advanced installation instructions</a\n                              >\n                              to install Z-Wave JS.\n                            </p>\n                            <p>\n                              Here's the current Z-Wave configuration. You'll\n                              need these values when setting up Z-Wave JS.\n                            </p>\n                            ${this._migrationConfig\n                              ? html`<blockquote>\n                                  USB Path: ${this._migrationConfig.usb_path}<br />\n                                  Network Key:\n                                  ${this._migrationConfig.network_key}\n                                </blockquote>`\n                              : ``}\n                            <p>\n                              Once Z-Wave JS is installed and running, click\n                              'Continue' to set up the Z-Wave JS integration and\n                              migrate your devices and entities.\n                            </p>\n                          `}\n                    </div>\n                    <div class=\"card-actions\">\n                      <mwc-button @click=${this._setupZwaveJs}>\n                        Continue\n                      </mwc-button>\n                    </div>\n                  </ha-card>\n                `\n              : this._step === 3\n              ? html`\n                  <ha-card\n                    class=\"content\"\n                    header=\"Migrate devices and entities\"\n                  >\n                    <div class=\"card-content\">\n                      <p>\n                        Now it's time to migrate your devices and entities from\n                        the legacy Z-Wave integration to the Z-Wave JS\n                        integration, to make sure all your UI's and automations\n                        keep working.\n                      </p>\n                      ${this._waitingOnDevices?.map(\n                        (device) =>\n                          html`<ha-alert alert-type=\"warning\">\n                            Device ${computeDeviceName(device, this.hass)} is\n                            not ready yet! For the best result, wake the device\n                            up if it is battery powered and wait for this device\n                            to become ready.\n                          </ha-alert>`\n                      )}\n                      ${this._migrationData\n                        ? html`\n                            <p>Below is a list of what will be migrated.</p>\n                            ${this._migratedZwaveEntities!.length !==\n                            this._migrationData.zwave_entity_ids.length\n                              ? html`<ha-alert\n                                    alert-type=\"warning\"\n                                    title=\"Not all entities can be migrated!\"\n                                  >\n                                    The following entities will not be migrated\n                                    and might need manual adjustments to your\n                                    config:\n                                  </ha-alert>\n                                  <ul>\n                                    ${this._migrationData.zwave_entity_ids.map(\n                                      (entity_id) =>\n                                        !this._migratedZwaveEntities!.includes(\n                                          entity_id\n                                        )\n                                          ? html`<li>\n                                              ${entity_id in this.hass.states\n                                                ? computeStateName(\n                                                    this.hass.states[entity_id]\n                                                  )\n                                                : \"\"}\n                                              (${entity_id})\n                                            </li>`\n                                          : \"\"\n                                    )}\n                                  </ul>`\n                              : \"\"}\n                            ${Object.keys(\n                              this._migrationData.migration_device_map\n                            ).length\n                              ? html`<h3>Devices that will be migrated:</h3>\n                                  <ul>\n                                    ${Object.keys(\n                                      this._migrationData.migration_device_map\n                                    ).map(\n                                      (device_id) =>\n                                        html`<li>\n                                          ${this._deviceNameLookup[device_id] ||\n                                          device_id}\n                                        </li>`\n                                    )}\n                                  </ul>`\n                              : \"\"}\n                            ${Object.keys(\n                              this._migrationData.migration_entity_map\n                            ).length\n                              ? html`<h3>Entities that will be migrated:</h3>\n                                  <ul>\n                                    ${Object.keys(\n                                      this._migrationData.migration_entity_map\n                                    ).map(\n                                      (entity_id) => html`<li>\n                                        ${entity_id in this.hass.states\n                                          ? computeStateName(\n                                              this.hass.states[entity_id]\n                                            )\n                                          : \"\"}\n                                        (${entity_id})\n                                      </li>`\n                                    )}\n                                  </ul>`\n                              : \"\"}\n                          `\n                        : html` <div class=\"flex-container\">\n                            <p>Loading migration data...</p>\n                            <ha-circular-progress active>\n                            </ha-circular-progress>\n                          </div>`}\n                    </div>\n                    <div class=\"card-actions\">\n                      <mwc-button @click=${this._doMigrate}>\n                        Migrate\n                      </mwc-button>\n                    </div>\n                  </ha-card>\n                `\n              : this._step === 4\n              ? html`<ha-card class=\"content\" header=\"Done!\">\n                  <div class=\"card-content\">\n                    That was all! You are now migrated to the new Z-Wave JS\n                    integration, check if all your devices and entities are back\n                    the way they where, if not all entities could be migrated\n                    you might have to change those manually.\n                    <p>\n                      If you have 'zwave' in your configurtion.yaml file, you\n                      should remove it now.\n                    </p>\n                  </div>\n                  <div class=\"card-actions\">\n                    <a\n                      href=${`/config/zwave_js?config_entry=${this._zwaveJsEntryId}`}\n                    >\n                      <mwc-button> Go to Z-Wave JS config panel </mwc-button>\n                    </a>\n                  </div>\n                </ha-card>`\n              : \"\"}\n          `}\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  private async _getMigrationConfig(): Promise<void> {\n    this._migrationConfig = await fetchMigrationConfig(this.hass!);\n  }\n\n  private async _unsubscribe(): Promise<void> {\n    if (this._unsub) {\n      (await this._unsub)();\n      this._unsub = undefined;\n    }\n  }\n\n  private _continue(): void {\n    this._step++;\n  }\n\n  private async _stopNetwork(): Promise<void> {\n    this._stoppingNetwork = true;\n    await this._getNetworkStatus();\n    if (this._networkStatus?.state === ZWAVE_NETWORK_STATE_STOPPED) {\n      this._networkStopped();\n      return;\n    }\n\n    this._unsub = this.hass!.connection.subscribeEvents(\n      () => this._networkStopped(),\n      \"zwave.network_stop\"\n    );\n    this.hass!.callService(\"zwave\", \"stop_network\");\n  }\n\n  private async _setupZwaveJs() {\n    const zwaveJsConfigFlow = await startZwaveJsConfigFlow(this.hass);\n    showConfigFlowDialog(this, {\n      continueFlowId: zwaveJsConfigFlow.flow_id,\n      dialogClosedCallback: (params) => {\n        if (params.entryId) {\n          this._zwaveJsEntryId = params.entryId;\n          this._getZwaveJSNodesStatus();\n          this._step = 3;\n        }\n      },\n      showAdvanced: this.hass.userData?.showAdvanced,\n    });\n    this.hass.loadBackendTranslation(\"title\", \"zwave_js\", true);\n  }\n\n  private async _getZwaveJSNodesStatus() {\n    if (this._nodeReadySubscriptions?.length) {\n      const unsubs = await Promise.all(this._nodeReadySubscriptions);\n      unsubs.forEach((unsub) => {\n        unsub();\n      });\n    }\n    this._nodeReadySubscriptions = [];\n    const networkStatus = await fetchZwaveJsNetworkStatus(\n      this.hass,\n      this._zwaveJsEntryId!\n    );\n    const nodeStatePromisses = networkStatus.controller.nodes.map((nodeId) =>\n      fetchZwaveNodeStatus(this.hass, this._zwaveJsEntryId!, nodeId)\n    );\n    const nodesNotReady = (await Promise.all(nodeStatePromisses)).filter(\n      (node) => !node.ready\n    );\n\n    // eslint-disable-next-line no-console\n    console.log(\"waiting for nodes to be ready\", nodesNotReady);\n\n    this._getMigrationData();\n    if (nodesNotReady.length === 0) {\n      this._waitingOnDevices = [];\n      return;\n    }\n    this._nodeReadySubscriptions = nodesNotReady.map((node) =>\n      subscribeZwaveNodeReady(\n        this.hass,\n        this._zwaveJsEntryId!,\n        node.node_id,\n        () => {\n          this._getZwaveJSNodesStatus();\n        }\n      )\n    );\n    const deviceReg: DeviceRegistryEntry[] = await fetchDeviceRegistry(\n      this.hass.connection\n    );\n    this._waitingOnDevices = deviceReg.filter((device) => {\n      const identifiers = getZwaveJsIdentifiersFromDevice(device);\n      if (\n        !identifiers ||\n        Number(identifiers.home_id) !== networkStatus.controller.home_id\n      ) {\n        return false;\n      }\n      return nodesNotReady.some((node) => identifiers.node_id === node.node_id);\n    });\n  }\n\n  private async _getMigrationData() {\n    try {\n      this._migrationData = await migrateZwave(\n        this.hass,\n        this._zwaveJsEntryId!,\n        true\n      );\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Failed to get migration data!\",\n        text:\n          err.code === \"unknown_command\"\n            ? \"Restart Home Assistant and try again.\"\n            : err.message,\n      });\n      return;\n    }\n    this._migratedZwaveEntities = Object.keys(\n      this._migrationData.migration_entity_map\n    );\n    if (Object.keys(this._migrationData.migration_device_map).length) {\n      this._fetchDevices();\n    }\n  }\n\n  private _fetchDevices() {\n    this._unsubDevices = subscribeDeviceRegistry(\n      this.hass.connection,\n      (devices) => {\n        if (!this._migrationData) {\n          return;\n        }\n        const migrationDevices = Object.keys(\n          this._migrationData.migration_device_map\n        );\n        const deviceNameLookup = {};\n        devices.forEach((device) => {\n          if (migrationDevices.includes(device.id)) {\n            deviceNameLookup[device.id] = computeDeviceName(device, this.hass);\n          }\n        });\n        this._deviceNameLookup = deviceNameLookup;\n      }\n    );\n  }\n\n  private async _doMigrate() {\n    const data = await migrateZwave(this.hass, this._zwaveJsEntryId!, false);\n    if (!data.migrated) {\n      showAlertDialog(this, { title: \"Migration failed!\" });\n      return;\n    }\n    this._step = 4;\n  }\n\n  private _networkStopped(): void {\n    this._unsubscribe();\n    this._getMigrationConfig();\n    this._stoppingNetwork = false;\n    this._step = 2;\n  }\n\n  private async _getNetworkStatus(): Promise<void> {\n    this._networkStatus = await fetchNetworkStatus(this.hass!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          margin-top: 24px;\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .flex-container ha-circular-progress {\n          margin-right: 20px;\n        }\n\n        blockquote {\n          display: block;\n          background-color: var(--secondary-background-color);\n          color: var(--primary-text-color);\n          padding: 8px;\n          margin: 8px 0;\n          font-size: 0.9em;\n          font-family: monospace;\n        }\n\n        ha-card {\n          margin: 0 auto;\n          max-width: 600px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zwave-migration\": ZwaveMigration;\n  }\n}\n"],"names":[],"sourceRoot":""}