{"version":3,"file":"f3123f8d.js","mappings":";;;;AAMA;;;;;;;;ACCA;;;;ACDA;;;;ACUA;AACA;;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACkCA;AACA;;AAEA;;AApCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;ACsCA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;AAKA;AACA;AACA;AACA;;;AAGA;;;;;AAOA;AACA;;AAEA;AACA;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;AA1DA;;;;;;;;;;;;;AAAA;;;ACWA;;;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;ACpDA;AACA;;;;;;;;AADA;;;;;;;;;;;;;;;ADqBA;;AEmBA;;;AAKA;;AAGA;;;;;;;AAUA;AACA;AAKA;;;;;;AAMA;;;;;AAOA;;;AAKA;AACA;AACA;;;;;AAKA;;;;;AAOA;;;AAKA;AACA;AACA;;;AAGA;;;;;;;AASA;;;;AAMA;;AAIA;;;;;;AAQA;AACA;AACA;;;;AAIA;;AAIA;;;;;;AAQA;AACA;AACA;;;;;;;AAOA;;;;;AAOA;;;;;;AAQA;;;AAKA;AACA;AACA;;;;;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3KA;;;ACKA;;AAGA;;;;;AAQA;AAGA;AACA;AACA;;;;AAIA;AACA;;;;;;;;;;;AArCA;;;;;ACwDA;AACA;;;;;;;;AAlCA;AAMA;;;AAuCA;;;AAMA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAEA;;;AAIA;;AAEA;AArEA;;;;;;;;;;;;;AAgBA;;;ACNA;;;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;;;AApBA;;;;;;;;;;;;;;;AAZA;;;ACUA;;AAGA;;;AAMA;;;AAGA;;;;;AAOA;;;AAKA;AACA;AACA;;;;;;;AAOA;;;;AAMA;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;;;;AA3DA;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBA;;;;;;;;;;;;;;;AC2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/components/ha-analytics.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-analytics.ts","webpack://home-assistant-frontend/./src/components/ha-analytics-learn-more.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-core-form.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-name-form.ts","webpack://home-assistant-frontend/./src/components/ha-network.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-network.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-url-form.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-core.js","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-core.js"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n      }\n      :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n        margin-left: 10px;\n        margin-right: auto;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <slot></slot>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: contents;\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { Analytics, AnalyticsPreferences } from \"../data/analytics\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-checkbox\";\nimport type { HaCheckbox } from \"./ha-checkbox\";\nimport \"./ha-settings-row\";\n\nconst ADDITIONAL_PREFERENCES = [\n  {\n    key: \"usage\",\n    title: \"Usage\",\n    description: \"Details of what you use with Home Assistant\",\n  },\n  {\n    key: \"statistics\",\n    title: \"Statistical data\",\n    description: \"Counts containing total number of datapoints\",\n  },\n];\n\ndeclare global {\n  interface HASSDomEvents {\n    \"analytics-preferences-changed\": { preferences: AnalyticsPreferences };\n  }\n}\n\n@customElement(\"ha-analytics\")\nexport class HaAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public analytics?: Analytics;\n\n  protected render(): TemplateResult {\n    const loading = this.analytics === undefined;\n    const baseEnabled = !loading && this.analytics!.preferences.base;\n\n    return html`\n      <ha-settings-row>\n        <span slot=\"prefix\">\n          <ha-checkbox\n            @change=${this._handleRowCheckboxClick}\n            .checked=${baseEnabled}\n            .preference=${\"base\"}\n            .disabled=${loading}\n            name=\"base\"\n          >\n          </ha-checkbox>\n        </span>\n        <span slot=\"heading\" data-for=\"base\"> Basic analytics </span>\n        <span slot=\"description\" data-for=\"base\">\n          This includes information about your system.\n        </span>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(\n        (preference) =>\n          html`<ha-settings-row>\n            <span slot=\"prefix\">\n              <ha-checkbox\n                @change=${this._handleRowCheckboxClick}\n                .checked=${this.analytics?.preferences[preference.key]}\n                .preference=${preference.key}\n                name=${preference.key}\n              >\n              </ha-checkbox>\n              ${!baseEnabled\n                ? html`<paper-tooltip animation-delay=\"0\" position=\"right\">\n                    You need to enable basic analytics for this option to be\n                    available\n                  </paper-tooltip>`\n                : \"\"}\n            </span>\n            <span slot=\"heading\" data-for=${preference.key}>\n              ${preference.title}\n            </span>\n            <span slot=\"description\" data-for=${preference.key}>\n              ${preference.description}\n            </span>\n          </ha-settings-row>`\n      )}\n      <ha-settings-row>\n        <span slot=\"prefix\">\n          <ha-checkbox\n            @change=${this._handleRowCheckboxClick}\n            .checked=${this.analytics?.preferences.diagnostics}\n            .preference=${\"diagnostics\"}\n            .disabled=${loading}\n            name=\"diagnostics\"\n          >\n          </ha-checkbox>\n        </span>\n        <span slot=\"heading\" data-for=\"diagnostics\"> Diagnostics </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          Share crash reports when unexpected errors occur.\n        </span>\n      </ha-settings-row>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    this.shadowRoot!.querySelectorAll(\"*[data-for]\").forEach((el) => {\n      const forEl = (el as HTMLElement).dataset.for;\n      delete (el as HTMLElement).dataset.for;\n\n      el.addEventListener(\"click\", () => {\n        const toFocus = this.shadowRoot!.querySelector(\n          `*[name=${forEl}]`\n        ) as HTMLElement | null;\n\n        if (toFocus) {\n          toFocus.focus();\n          toFocus.click();\n        }\n      });\n    });\n  }\n\n  private _handleRowCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const preference = (checkbox as any).preference;\n    const preferences = this.analytics ? { ...this.analytics.preferences } : {};\n\n    if (preferences[preference] === checkbox.checked) {\n      return;\n    }\n\n    preferences[preference] = checkbox.checked;\n\n    if (\n      ADDITIONAL_PREFERENCES.some((entry) => entry.key === preference) &&\n      checkbox.checked\n    ) {\n      preferences.base = true;\n    } else if (preference === \"base\" && !checkbox.checked) {\n      preferences.usage = false;\n      preferences.statistics = false;\n    }\n\n    fireEvent(this, \"analytics-preferences-changed\", { preferences });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-analytics\": HaAnalytics;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-analytics\";\nimport { analyticsLearnMore } from \"../../../components/ha-analytics-learn-more\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  Analytics,\n  getAnalyticsDetails,\n  setAnalyticsPreferences,\n} from \"../../../data/analytics\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-analytics\")\nclass ConfigAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _analyticsDetails?: Analytics;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    const error = this._error\n      ? this._error\n      : !isComponentLoaded(this.hass, \"analytics\")\n      ? \"Analytics integration not loaded\"\n      : undefined;\n\n    return html`\n      <ha-card header=\"Analytics\">\n        <div class=\"card-content\">\n          ${error ? html`<div class=\"error\">${error}</div>` : \"\"}\n          <p>\n            Share anonymized information from your installation to help make\n            Home Assistant better and help us convince manufacturers to add\n            local control and privacy-focused features.\n          </p>\n          <ha-analytics\n            @analytics-preferences-changed=${this._preferencesChanged}\n            .hass=${this.hass}\n            .analytics=${this._analyticsDetails}\n          ></ha-analytics>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n          ${analyticsLearnMore(this.hass)}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"analytics\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      this._analyticsDetails = await getAnalyticsDetails(this.hass);\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setAnalyticsPreferences(\n        this.hass,\n        this._analyticsDetails?.preferences || {}\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _preferencesChanged(event: CustomEvent): void {\n    this._analyticsDetails = {\n      ...this._analyticsDetails!,\n      preferences: event.detail.preferences,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-analytics\": ConfigAnalytics;\n  }\n}\n","import { html } from \"lit\";\nimport { HomeAssistant } from \"../types\";\nimport { documentationUrl } from \"../util/documentation-url\";\n\nexport const analyticsLearnMore = (hass: HomeAssistant) => html`<a\n  .href=${documentationUrl(hass, \"/integrations/analytics/\")}\n  target=\"_blank\"\n  rel=\"noreferrer\"\n>\n  How we process your data\n</a>`;\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { UNIT_C } from \"../../../common/const\";\nimport { createCurrencyListEl } from \"../../../components/currency-datalist\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/map/ha-locations-editor\";\nimport type { MarkerLocation } from \"../../../components/map/ha-locations-editor\";\nimport { createTimezoneListEl } from \"../../../components/timezone-datalist\";\nimport { ConfigUpdateValues, saveCoreConfig } from \"../../../data/core\";\nimport { SYMBOL_TO_ISO } from \"../../../data/currency\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../components/ha-radio\";\n\n@customElement(\"ha-config-core-form\")\nclass ConfigCoreForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _working = false;\n\n  @state() private _location?: [number, number];\n\n  @state() private _currency?: string;\n\n  @state() private _elevation?: string;\n\n  @state() private _unitSystem?: ConfigUpdateValues[\"unit_system\"];\n\n  @state() private _timeZone?: string;\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._working || !canEdit;\n\n    return html`\n      <ha-card\n        .header=${this.hass.localize(\n          \"ui.panel.config.core.section.core.form.heading\"\n        )}\n      >\n        <div class=\"card-content\">\n          ${!canEdit\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                  )}\n                </p>\n              `\n            : \"\"}\n\n          <div class=\"row\">\n            <ha-locations-editor\n              class=\"flex\"\n              .hass=${this.hass}\n              .locations=${this._markerLocation(\n                this.hass.config.latitude,\n                this.hass.config.longitude,\n                this._location\n              )}\n              @location-updated=${this._locationChanged}\n            ></ha-locations-editor>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.time_zone\"\n              )}\n            </div>\n\n            <paper-input\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.time_zone\"\n              )}\n              name=\"timeZone\"\n              list=\"timezones\"\n              .disabled=${disabled}\n              .value=${this._timeZoneValue}\n              @value-changed=${this._handleChange}\n            ></paper-input>\n          </div>\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.elevation\"\n              )}\n            </div>\n\n            <paper-input\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.elevation\"\n              )}\n              name=\"elevation\"\n              type=\"number\"\n              .disabled=${disabled}\n              .value=${this._elevationValue}\n              @value-changed=${this._handleChange}\n            >\n              <span slot=\"suffix\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.elevation_meters\"\n                )}\n              </span>\n            </paper-input>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system\"\n              )}\n            </div>\n            <div class=\"radio-group\">\n              <ha-formfield\n                .label=${html`${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.unit_system_metric\"\n                  )}\n                  <div class=\"secondary\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.core.section.core.core_config.metric_example\"\n                    )}\n                  </div>`}\n              >\n                <ha-radio\n                  name=\"unit_system\"\n                  value=\"metric\"\n                  .checked=${this._unitSystemValue === \"metric\"}\n                  @change=${this._unitSystemChanged}\n                  .disabled=${this._working}\n                ></ha-radio>\n              </ha-formfield>\n              <ha-formfield\n                .label=${html`${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.unit_system_imperial\"\n                  )}\n                  <div class=\"secondary\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.core.section.core.core_config.imperial_example\"\n                    )}\n                  </div>`}\n              >\n                <ha-radio\n                  name=\"unit_system\"\n                  value=\"imperial\"\n                  .checked=${this._unitSystemValue === \"imperial\"}\n                  @change=${this._unitSystemChanged}\n                  .disabled=${this._working}\n                ></ha-radio>\n              </ha-formfield>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.currency\"\n              )}<br />\n              <a\n                href=\"https://en.wikipedia.org/wiki/ISO_4217#Active_codes\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                >${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.find_currency_value\"\n                )}</a\n              >\n            </div>\n\n            <paper-input\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.currency\"\n              )}\n              name=\"currency\"\n              list=\"currencies\"\n              .disabled=${disabled}\n              .value=${this._currencyValue}\n              @value-changed=${this._handleChange}\n            ></paper-input>\n          </div>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save} .disabled=${disabled}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    const tzInput = this.shadowRoot!.querySelector(\n      \"[name=timeZone]\"\n    ) as PaperInputElement;\n    tzInput.inputElement.appendChild(createTimezoneListEl());\n\n    const cInput = this.shadowRoot!.querySelector(\n      \"[name=currency]\"\n    ) as PaperInputElement;\n    cInput.inputElement.appendChild(createCurrencyListEl());\n  }\n\n  private _markerLocation = memoizeOne(\n    (\n      lat: number,\n      lng: number,\n      location?: [number, number]\n    ): MarkerLocation[] => [\n      {\n        id: \"location\",\n        latitude: location ? location[0] : lat,\n        longitude: location ? location[1] : lng,\n        location_editable: true,\n      },\n    ]\n  );\n\n  private get _currencyValue() {\n    return this._currency !== undefined\n      ? this._currency\n      : this.hass.config.currency;\n  }\n\n  private get _elevationValue() {\n    return this._elevation !== undefined\n      ? this._elevation\n      : this.hass.config.elevation;\n  }\n\n  private get _timeZoneValue() {\n    return this._timeZone !== undefined\n      ? this._timeZone\n      : this.hass.config.time_zone;\n  }\n\n  private get _unitSystemValue() {\n    return this._unitSystem !== undefined\n      ? this._unitSystem\n      : this.hass.config.unit_system.temperature === UNIT_C\n      ? \"metric\"\n      : \"imperial\";\n  }\n\n  private _handleChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as PaperInputElement;\n    let value = target.value;\n\n    if (target.name === \"currency\" && value) {\n      if (value in SYMBOL_TO_ISO) {\n        value = SYMBOL_TO_ISO[value];\n      }\n    }\n\n    this[`_${target.name}`] = value;\n  }\n\n  private _locationChanged(ev) {\n    this._location = ev.detail.location;\n  }\n\n  private _unitSystemChanged(ev: CustomEvent) {\n    this._unitSystem = (ev.target as HaRadio).value as \"metric\" | \"imperial\";\n  }\n\n  private async _save() {\n    this._working = true;\n    try {\n      const location = this._location || [\n        this.hass.config.latitude,\n        this.hass.config.longitude,\n      ];\n      await saveCoreConfig(this.hass, {\n        latitude: location[0],\n        longitude: location[1],\n        currency: this._currencyValue,\n        elevation: Number(this._elevationValue),\n        unit_system: this._unitSystemValue,\n        time_zone: this._timeZoneValue,\n      });\n    } catch (err: any) {\n      alert(`Error saving config: ${err.message}`);\n    } finally {\n      this._working = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .row {\n        display: flex;\n        flex-direction: row;\n        margin: 0 -8px;\n        align-items: center;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n\n      .flex {\n        flex: 1;\n      }\n\n      .row > * {\n        margin: 0 8px;\n      }\n\n      .radio-group {\n        display: flex;\n        flex-direction: column;\n        flex: 1;\n      }\n\n      .card-actions {\n        text-align: right;\n      }\n\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-core-form\": ConfigCoreForm;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport { ConfigUpdateValues, saveCoreConfig } from \"../../../data/core\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../components/ha-textfield\";\n\n@customElement(\"ha-config-name-form\")\nclass ConfigNameForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _working = false;\n\n  @state() private _name!: ConfigUpdateValues[\"location_name\"];\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._working || !canEdit;\n\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          ${!canEdit\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                  )}\n                </p>\n              `\n            : \"\"}\n          <ha-textfield\n            class=\"flex\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.location_name\"\n            )}\n            .disabled=${disabled}\n            .value=${this._nameValue}\n            @change=${this._handleChange}\n          ></ha-textfield>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save} .disabled=${disabled}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private get _nameValue() {\n    return this._name !== undefined\n      ? this._name\n      : this.hass.config.location_name;\n  }\n\n  private _handleChange(ev) {\n    const target = ev.currentTarget as HaTextField;\n    this._name = target.value;\n  }\n\n  private async _save() {\n    this._working = true;\n    try {\n      await saveCoreConfig(this.hass, {\n        location_name: this._nameValue,\n      });\n    } catch (err: any) {\n      alert(\"FAIL\");\n    } finally {\n      this._working = false;\n    }\n  }\n\n  static get styles() {\n    return css`\n      .card-actions {\n        text-align: right;\n      }\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-name-form\": ConfigNameForm;\n  }\n}\n","import { mdiStar } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  Adapter,\n  IPv4ConfiguredAddress,\n  IPv6ConfiguredAddress,\n  NetworkConfig,\n} from \"../data/network\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-checkbox\";\nimport type { HaCheckbox } from \"./ha-checkbox\";\nimport \"./ha-settings-row\";\nimport \"./ha-svg-icon\";\n\nconst format_addresses = (\n  addresses: IPv6ConfiguredAddress[] | IPv4ConfiguredAddress[]\n): TemplateResult =>\n  html`${addresses.map((address, i) => [\n    html`<span>${address.address}/${address.network_prefix}</span>`,\n    i < addresses.length - 1 ? \", \" : nothing,\n  ])}`;\n\nconst format_auto_detected_interfaces = (\n  adapters: Adapter[]\n): Array<TemplateResult | string> =>\n  adapters.map((adapter) =>\n    adapter.auto\n      ? html`${adapter.name}\n        (${format_addresses([...adapter.ipv4, ...adapter.ipv6])})`\n      : \"\"\n  );\n\ndeclare global {\n  interface HASSDomEvents {\n    \"network-config-changed\": { configured_adapters: string[] };\n  }\n}\n@customElement(\"ha-network\")\nexport class HaNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public networkConfig?: NetworkConfig;\n\n  @state() private _expanded?: boolean;\n\n  protected render(): TemplateResult {\n    if (this.networkConfig === undefined) {\n      return html``;\n    }\n    const configured_adapters = this.networkConfig.configured_adapters || [];\n    return html`\n      <ha-settings-row>\n        <span slot=\"prefix\">\n          <ha-checkbox\n            id=\"auto_configure\"\n            @change=${this._handleAutoConfigureCheckboxClick}\n            .checked=${!configured_adapters.length}\n            name=\"auto_configure\"\n          >\n          </ha-checkbox>\n        </span>\n        <span slot=\"heading\" data-for=\"auto_configure\"> Auto Configure </span>\n        <span slot=\"description\" data-for=\"auto_configure\">\n          Detected:\n          ${format_auto_detected_interfaces(this.networkConfig.adapters)}\n        </span>\n      </ha-settings-row>\n      ${configured_adapters.length || this._expanded\n        ? this.networkConfig.adapters.map(\n            (adapter) =>\n              html`<ha-settings-row>\n                <span slot=\"prefix\">\n                  <ha-checkbox\n                    id=${adapter.name}\n                    @change=${this._handleAdapterCheckboxClick}\n                    .checked=${configured_adapters.includes(adapter.name)}\n                    .adapter=${adapter.name}\n                    name=${adapter.name}\n                  >\n                  </ha-checkbox>\n                </span>\n                <span slot=\"heading\">\n                  Adapter: ${adapter.name}\n                  ${adapter.default\n                    ? html`<ha-svg-icon .path=${mdiStar}></ha-svg-icon>\n                        (Default)`\n                    : \"\"}\n                </span>\n                <span slot=\"description\">\n                  ${format_addresses([...adapter.ipv4, ...adapter.ipv6])}\n                </span>\n              </ha-settings-row>`\n          )\n        : \"\"}\n    `;\n  }\n\n  private _handleAutoConfigureCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    if (this.networkConfig === undefined) {\n      return;\n    }\n\n    let configured_adapters = [...this.networkConfig.configured_adapters];\n\n    if (checkbox.checked) {\n      this._expanded = false;\n      configured_adapters = [];\n    } else {\n      this._expanded = true;\n      for (const adapter of this.networkConfig.adapters) {\n        if (adapter.default) {\n          configured_adapters = [adapter.name];\n          break;\n        }\n      }\n    }\n\n    fireEvent(this, \"network-config-changed\", {\n      configured_adapters: configured_adapters,\n    });\n  }\n\n  private _handleAdapterCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const adapter_name = (checkbox as any).name;\n    if (this.networkConfig === undefined) {\n      return;\n    }\n\n    const configured_adapters = [...this.networkConfig.configured_adapters];\n\n    if (checkbox.checked) {\n      configured_adapters.push(adapter_name);\n    } else {\n      const index = configured_adapters.indexOf(adapter_name, 0);\n      configured_adapters.splice(index, 1);\n    }\n\n    fireEvent(this, \"network-config-changed\", {\n      configured_adapters: configured_adapters,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-network\": HaNetwork;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-network\";\nimport \"../../../components/ha-settings-row\";\nimport { fetchNetworkInfo } from \"../../../data/hassio/network\";\nimport {\n  getNetworkConfig,\n  NetworkConfig,\n  setNetworkConfig,\n} from \"../../../data/network\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-network\")\nclass ConfigNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _networkConfig?: NetworkConfig;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass.userData?.showAdvanced ||\n      !isComponentLoaded(this.hass, \"network\")\n    ) {\n      return html``;\n    }\n\n    return html`\n      <ha-card header=\"Network\">\n        <div class=\"card-content\">\n          ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n          <p>\n            Configure which network adapters integrations will use. Currently\n            this setting only affects multicast traffic. A restart is required\n            for these settings to apply.\n          </p>\n          <ha-network\n            @network-config-changed=${this._configChanged}\n            .hass=${this.hass}\n            .networkConfig=${this._networkConfig}\n          ></ha-network>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"network\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      const coreNetwork = await getNetworkConfig(this.hass);\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        const supervisorNetwork = await fetchNetworkInfo(this.hass);\n        const interfaces = new Set(\n          supervisorNetwork.interfaces.map((int) => int.interface)\n        );\n        if (interfaces.size) {\n          coreNetwork.adapters = coreNetwork.adapters.filter((adapter) =>\n            interfaces.has(adapter.name)\n          );\n        }\n      }\n      this._networkConfig = coreNetwork;\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setNetworkConfig(\n        this.hass,\n        this._networkConfig?.configured_adapters || []\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _configChanged(event: CustomEvent): void {\n    this._networkConfig = {\n      ...this._networkConfig!,\n      configured_adapters: event.detail.configured_adapters,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-network\": ConfigNetwork;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport { saveCoreConfig } from \"../../../data/core\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-url-form\")\nclass ConfigUrlForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _working = false;\n\n  @state() private _external_url?: string;\n\n  @state() private _internal_url?: string;\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._working || !canEdit;\n\n    if (!this.hass.userData?.showAdvanced) {\n      return html``;\n    }\n\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          ${!canEdit\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                  )}\n                </p>\n              `\n            : \"\"}\n          ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.external_url\"\n              )}\n            </div>\n\n            <paper-input\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.external_url\"\n              )}\n              name=\"external_url\"\n              type=\"url\"\n              .disabled=${disabled}\n              .value=${this._externalUrlValue}\n              @value-changed=${this._handleChange}\n            >\n            </paper-input>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.internal_url\"\n              )}\n            </div>\n            <paper-input\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.internal_url\"\n              )}\n              name=\"internal_url\"\n              type=\"url\"\n              .disabled=${disabled}\n              .value=${this._internalUrlValue}\n              @value-changed=${this._handleChange}\n            >\n            </paper-input>\n          </div>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save} .disabled=${disabled}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private get _internalUrlValue() {\n    return this._internal_url !== undefined\n      ? this._internal_url\n      : this.hass.config.internal_url;\n  }\n\n  private get _externalUrlValue() {\n    return this._external_url !== undefined\n      ? this._external_url\n      : this.hass.config.external_url;\n  }\n\n  private _handleChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as PaperInputElement;\n    this[`_${target.name}`] = target.value;\n  }\n\n  private async _save() {\n    this._working = true;\n    this._error = undefined;\n    try {\n      await saveCoreConfig(this.hass, {\n        external_url: this._external_url || null,\n        internal_url: this._internal_url || null,\n      });\n    } catch (err: any) {\n      this._error = err.message || err;\n    } finally {\n      this._working = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .row {\n        display: flex;\n        flex-direction: row;\n        margin: 0 -8px;\n        align-items: center;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n\n      .flex {\n        flex: 1;\n      }\n\n      .row > * {\n        margin: 0 8px;\n      }\n      .error {\n        color: var(--error-color);\n      }\n\n      .card-actions {\n        text-align: right;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-url-form\": ConfigUrlForm;\n  }\n}\n","import \"@material/mwc-button\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-card\";\nimport LocalizeMixin from \"../../../mixins/localize-mixin\";\nimport \"../../../styles/polymer-ha-style\";\nimport \"../ha-config-section\";\nimport \"./ha-config-analytics\";\nimport \"./ha-config-core-form\";\nimport \"./ha-config-name-form\";\nimport \"./ha-config-network\";\nimport \"./ha-config-url-form\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaConfigSectionCore extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <ha-config-section is-wide=\"[[isWide]]\">\n        <span slot=\"header\"\n          >[[localize('ui.panel.config.core.section.core.header')]]</span\n        >\n        <span slot=\"introduction\"\n          >[[localize('ui.panel.config.core.section.core.introduction')]]</span\n        >\n\n        <ha-config-name-form hass=\"[[hass]]\"></ha-config-name-form>\n        <ha-config-core-form hass=\"[[hass]]\"></ha-config-core-form>\n        <ha-config-url-form hass=\"[[hass]]\"></ha-config-url-form>\n        <ha-config-network hass=\"[[hass]]\"></ha-config-network>\n        <ha-config-analytics hass=\"[[hass]]\"></ha-config-analytics>\n      </ha-config-section>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      isWide: {\n        type: Boolean,\n        value: false,\n      },\n\n      validating: {\n        type: Boolean,\n        value: false,\n      },\n\n      isValid: {\n        type: Boolean,\n        value: null,\n      },\n\n      validateLog: {\n        type: String,\n        value: \"\",\n      },\n\n      showAdvanced: Boolean,\n    };\n  }\n}\n\ncustomElements.define(\"ha-config-section-core\", HaConfigSectionCore);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport LocalizeMixin from \"../../../mixins/localize-mixin\";\nimport \"../../../styles/polymer-ha-style\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./ha-config-section-core\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaConfigCore extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n\n        .narrow .border {\n          max-width: 640px;\n        }\n      </style>\n\n      <hass-tabs-subpage\n        hass=\"[[hass]]\"\n        narrow=\"[[narrow]]\"\n        route=\"[[route]]\"\n        back-path=\"/config\"\n        tabs=\"[[_computeTabs()]]\"\n        show-advanced=\"[[showAdvanced]]\"\n      >\n        <div class$=\"[[computeClasses(isWide)]]\">\n          <ha-config-section-core\n            is-wide=\"[[isWide]]\"\n            show-advanced=\"[[showAdvanced]]\"\n            hass=\"[[hass]]\"\n          ></ha-config-section-core>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      isWide: Boolean,\n      narrow: Boolean,\n      showAdvanced: Boolean,\n      route: Object,\n    };\n  }\n\n  _computeTabs() {\n    return configSections.general;\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n}\n\ncustomElements.define(\"ha-config-core\", HaConfigCore);\n"],"names":[],"sourceRoot":""}