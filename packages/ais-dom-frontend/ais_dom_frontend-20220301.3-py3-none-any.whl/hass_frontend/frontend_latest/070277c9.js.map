{"version":3,"file":"070277c9.js","mappings":";;AAsFA;;;AAGA;AAIA;;;ACIA;AACA;AACA;AACA;;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AASA;;ACxCA;AACA;;AAEA;;;;AAyCA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA","sources":["webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/mwc-linear-progress-base.ts","webpack://home-assistant-frontend/mwc-switch-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {MDCResizeObserver, WithMDCResizeObserver} from '@material/linear-progress/types';\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class LinearProgressBase extends LitElement {\n  @query('.mdc-linear-progress') protected rootEl!: HTMLElement;\n\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number}) progress = 0;\n\n  @property({type: Number}) buffer = 1;\n\n  @property({type: Boolean, reflect: true}) reverse = false;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty @property({attribute: 'aria-label'}) ariaLabel!: string;\n\n  @state() protected stylePrimaryHalf = '';\n  @state() protected stylePrimaryFull = '';\n  @state() protected styleSecondaryQuarter = '';\n  @state() protected styleSecondaryHalf = '';\n  @state() protected styleSecondaryFull = '';\n  @state() protected animationReady = true;\n  @state() protected closedAnimationOff = false;\n  protected resizeObserver: MDCResizeObserver|null = null;\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // if detached and reattached\n    if (this.rootEl) {\n      this.attachResizeObserver();\n    }\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-linear-progress--closed': this.closed,\n      'mdc-linear-progress--closed-animation-off': this.closedAnimationOff,\n      'mdc-linear-progress--indeterminate': this.indeterminate,\n      // needed for controller-less render\n      'mdc-linear-progress--animation-ready': this.animationReady\n    };\n\n    /** @styleMap */\n    const rootStyles = {\n      '--mdc-linear-progress-primary-half': this.stylePrimaryHalf,\n      '--mdc-linear-progress-primary-half-neg':\n          this.stylePrimaryHalf !== '' ? `-${this.stylePrimaryHalf}` : '',\n      '--mdc-linear-progress-primary-full': this.stylePrimaryFull,\n      '--mdc-linear-progress-primary-full-neg':\n          this.stylePrimaryFull !== '' ? `-${this.stylePrimaryFull}` : '',\n      '--mdc-linear-progress-secondary-quarter': this.styleSecondaryQuarter,\n      '--mdc-linear-progress-secondary-quarter-neg':\n          this.styleSecondaryQuarter !== '' ? `-${this.styleSecondaryQuarter}` :\n                                              '',\n      '--mdc-linear-progress-secondary-half': this.styleSecondaryHalf,\n      '--mdc-linear-progress-secondary-half-neg':\n          this.styleSecondaryHalf !== '' ? `-${this.styleSecondaryHalf}` : '',\n      '--mdc-linear-progress-secondary-full': this.styleSecondaryFull,\n      '--mdc-linear-progress-secondary-full-neg':\n          this.styleSecondaryFull !== '' ? `-${this.styleSecondaryFull}` : '',\n    };\n\n    /** @styleMap */\n    const bufferBarStyles = {\n      'flex-basis': this.indeterminate ? '100%' : `${this.buffer * 100}%`,\n    };\n\n    /** @styleMap */\n    const primaryBarStyles = {\n      transform: this.indeterminate ? 'scaleX(1)' : `scaleX(${this.progress})`,\n    };\n\n    return html`\n      <div\n          role=\"progressbar\"\n          class=\"mdc-linear-progress ${classMap(classes)}\"\n          style=\"${styleMap(rootStyles)}\"\n          dir=\"${ifDefined(this.reverse ? 'rtl' : undefined)}\"\n          aria-label=\"${ifDefined(this.ariaLabel)}\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"1\"\n          aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\"\n        @transitionend=\"${this.syncClosedState}\">\n        <div class=\"mdc-linear-progress__buffer\">\n          <div\n            class=\"mdc-linear-progress__buffer-bar\"\n            style=${styleMap(bufferBarStyles)}>\n          </div>\n          <div class=\"mdc-linear-progress__buffer-dots\"></div>\n        </div>\n        <div\n            class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\"\n            style=${styleMap(primaryBarStyles)}>\n          <span class=\"mdc-linear-progress__bar-inner\"></span>\n        </div>\n        <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n          <span class=\"mdc-linear-progress__bar-inner\"></span>\n        </div>\n      </div>`;\n  }\n\n  override update(changedProperties: Map<string, string>) {\n    // - When showing the indicator, enable animations immediately.\n    // - On first render, disable the animation immediately.\n    // - For normal calls to hide the component, let transitionend event trigger\n    //   disabling of animations instead (see render method), so that animation\n    //   does not jump in the middle of fade out.\n    if (changedProperties.has('closed') &&\n        (!this.closed || changedProperties.get('closed') === undefined)) {\n      this.syncClosedState();\n    }\n    super.update(changedProperties);\n  }\n\n  override async firstUpdated(changed: PropertyValues) {\n    super.firstUpdated(changed);\n\n    this.attachResizeObserver();\n  }\n\n  protected syncClosedState() {\n    this.closedAnimationOff = this.closed;\n  }\n\n  protected override updated(changed: PropertyValues) {\n    // restart animation for timing if reverse changed and is indeterminate.\n    // don't restart here if indeterminate has changed as well because we don't\n    // want to incur an extra style recalculation\n    if (!changed.has('indeterminate') && changed.has('reverse') &&\n        this.indeterminate) {\n      this.restartAnimation();\n    }\n\n    // Recaclulate the animation css custom props and restart the calculation\n    // if this is not the first render cycle, otherwise, resize observer init\n    // will already handle this and prevent unnecessary rerender + style recalc\n    // but resize observer will not update animation vals while determinate\n    if (changed.has('indeterminate') &&\n        changed.get('indeterminate') !== undefined && this.indeterminate &&\n        (window as unknown as WithMDCResizeObserver).ResizeObserver) {\n      this.calculateAndSetAnimationDimensions(this.rootEl.offsetWidth);\n    }\n    super.updated(changed);\n  }\n\n  override disconnectedCallback() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    super.disconnectedCallback();\n  }\n\n  protected attachResizeObserver() {\n    if ((window as unknown as WithMDCResizeObserver).ResizeObserver) {\n      this.resizeObserver =\n          new (window as unknown as WithMDCResizeObserver)\n              .ResizeObserver((entries) => {\n                if (!this.indeterminate) {\n                  return;\n                }\n\n                for (const entry of entries) {\n                  if (entry.contentRect) {\n                    const width = entry.contentRect.width;\n                    this.calculateAndSetAnimationDimensions(width);\n                  }\n                }\n              });\n      this.resizeObserver.observe(this.rootEl);\n      return;\n    }\n\n    this.resizeObserver = null;\n  }\n\n  protected calculateAndSetAnimationDimensions(width: number) {\n    const primaryHalf = width * 0.8367142;\n    const primaryFull = width * 2.00611057;\n    const secondaryQuarter = width * 0.37651913;\n    const secondaryHalf = width * 0.84386165;\n    const secondaryFull = width * 1.60277782;\n\n    this.stylePrimaryHalf = `${primaryHalf}px`;\n    this.stylePrimaryFull = `${primaryFull}px`;\n    this.styleSecondaryQuarter = `${secondaryQuarter}px`;\n    this.styleSecondaryHalf = `${secondaryHalf}px`;\n    this.styleSecondaryFull = `${secondaryFull}px`;\n\n    // need to restart animation for custom props to apply to keyframes\n    this.restartAnimation();\n  }\n\n  protected async restartAnimation() {\n    this.animationReady = false;\n    await this.updateComplete;\n    await new Promise(requestAnimationFrame);\n    this.animationReady = true;\n    await this.updateComplete;\n  }\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {MDCSwitchAdapter} from '@material/switch/deprecated/adapter';\nimport MDCSwitchFoundation from '@material/switch/deprecated/foundation';\nimport {html} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nexport class SwitchBase extends BaseElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty @property({attribute: 'aria-label'}) ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  protected changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  protected renderRipple() {\n    return this.shouldRenderRipple ? html`\n        <mwc-ripple\n          .accent=\"${this.checked}\"\n          .disabled=\"${this.disabled}\"\n          unbounded>\n        </mwc-ripple>` :\n                                     '';\n  }\n\n  override focus() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.startFocus();\n      formElement.focus();\n    }\n  }\n\n  override blur() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.endFocus();\n      formElement.blur();\n    }\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          ${this.renderRipple()}\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              @change=\"${this.changeHandler}\"\n              @focus=\"${this.handleRippleFocus}\"\n              @blur=\"${this.handleRippleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n          </div>\n        </div>\n      </div>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleMouseDown(event: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleTouchStart(event: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n"],"names":[],"sourceRoot":""}