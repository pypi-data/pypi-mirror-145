{"version":3,"file":"65c0c20a.js","mappings":";;;;AAMA;;ACkJA;AACA;AASA;AACA;;AAVA;;AAkBA;AACA;;;;;;AAMA;AACA;;AAGA;;;AAGA;AACA;;AAEA;;;AAzEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACWA;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;AAKA;;;AAKA;AASA;AAGA;;;;AA/IA;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/panels/config/entities/editor-tabs/settings/entity-settings-helper-tab.ts","webpack://home-assistant-frontend/./src/panels/config/entities/entity-registry-basic-editor.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { dynamicElement } from \"../../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport {\n  deleteCounter,\n  fetchCounter,\n  updateCounter,\n} from \"../../../../../data/counter\";\nimport {\n  ExtEntityRegistryEntry,\n  removeEntityRegistryEntry,\n} from \"../../../../../data/entity_registry\";\nimport {\n  deleteInputBoolean,\n  fetchInputBoolean,\n  updateInputBoolean,\n} from \"../../../../../data/input_boolean\";\nimport {\n  deleteInputButton,\n  fetchInputButton,\n  updateInputButton,\n} from \"../../../../../data/input_button\";\nimport {\n  deleteInputDateTime,\n  fetchInputDateTime,\n  updateInputDateTime,\n} from \"../../../../../data/input_datetime\";\nimport {\n  deleteInputNumber,\n  fetchInputNumber,\n  updateInputNumber,\n} from \"../../../../../data/input_number\";\nimport {\n  deleteInputSelect,\n  fetchInputSelect,\n  updateInputSelect,\n} from \"../../../../../data/input_select\";\nimport {\n  deleteInputText,\n  fetchInputText,\n  updateInputText,\n} from \"../../../../../data/input_text\";\nimport {\n  deleteTimer,\n  fetchTimer,\n  updateTimer,\n} from \"../../../../../data/timer\";\nimport { showConfirmationDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { Helper } from \"../../../helpers/const\";\nimport \"../../../helpers/forms/ha-counter-form\";\nimport \"../../../helpers/forms/ha-input_boolean-form\";\nimport \"../../../helpers/forms/ha-input_button-form\";\nimport \"../../../helpers/forms/ha-input_datetime-form\";\nimport \"../../../helpers/forms/ha-input_number-form\";\nimport \"../../../helpers/forms/ha-input_select-form\";\nimport \"../../../helpers/forms/ha-input_text-form\";\nimport \"../../../helpers/forms/ha-timer-form\";\nimport \"../../entity-registry-basic-editor\";\nimport type { HaEntityRegistryBasicEditor } from \"../../entity-registry-basic-editor\";\n\nconst HELPERS = {\n  input_boolean: {\n    fetch: fetchInputBoolean,\n    update: updateInputBoolean,\n    delete: deleteInputBoolean,\n  },\n  input_button: {\n    fetch: fetchInputButton,\n    update: updateInputButton,\n    delete: deleteInputButton,\n  },\n  input_text: {\n    fetch: fetchInputText,\n    update: updateInputText,\n    delete: deleteInputText,\n  },\n  input_number: {\n    fetch: fetchInputNumber,\n    update: updateInputNumber,\n    delete: deleteInputNumber,\n  },\n  input_datetime: {\n    fetch: fetchInputDateTime,\n    update: updateInputDateTime,\n    delete: deleteInputDateTime,\n  },\n  input_select: {\n    fetch: fetchInputSelect,\n    update: updateInputSelect,\n    delete: deleteInputSelect,\n  },\n  counter: {\n    fetch: fetchCounter,\n    update: updateCounter,\n    delete: deleteCounter,\n  },\n  timer: {\n    fetch: fetchTimer,\n    update: updateTimer,\n    delete: deleteTimer,\n  },\n};\n\n@customElement(\"entity-settings-helper-tab\")\nexport class EntityRegistrySettingsHelper extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entry!: ExtEntityRegistryEntry;\n\n  @state() private _error?: string;\n\n  @state() private _item?: Helper | null;\n\n  @state() private _submitting?: boolean;\n\n  @state() private _componentLoaded?: boolean;\n\n  @query(\"ha-registry-basic-editor\")\n  private _registryEditor?: HaEntityRegistryBasicEditor;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._componentLoaded = isComponentLoaded(this.hass, this.entry.platform);\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"entry\")) {\n      this._error = undefined;\n      this._item = undefined;\n      this._getItem();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._item === undefined) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this.entry.entity_id];\n    return html`\n      <div class=\"form\">\n        ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n        ${!this._componentLoaded\n          ? this.hass.localize(\n              \"ui.dialogs.helper_settings.platform_not_loaded\",\n              \"platform\",\n              this.entry.platform\n            )\n          : this._item === null\n          ? this.hass.localize(\"ui.dialogs.helper_settings.yaml_not_editable\")\n          : html`\n              <span @value-changed=${this._valueChanged}>\n                ${dynamicElement(`ha-${this.entry.platform}-form`, {\n                  hass: this.hass,\n                  item: this._item,\n                  entry: this.entry,\n                })}\n              </span>\n            `}\n        <ha-registry-basic-editor\n          .hass=${this.hass}\n          .entry=${this.entry}\n        ></ha-registry-basic-editor>\n      </div>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=${this._confirmDeleteItem}\n          .disabled=${this._submitting ||\n          (!this._item && !stateObj?.attributes.restored)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._updateItem}\n          .disabled=${this._submitting || (this._item && !this._item.name)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._error = undefined;\n    this._item = ev.detail.value;\n  }\n\n  private async _getItem() {\n    const items = await HELPERS[this.entry.platform].fetch(this.hass!);\n    this._item = items.find((item) => item.id === this.entry.unique_id) || null;\n  }\n\n  private async _updateItem(): Promise<void> {\n    this._submitting = true;\n    try {\n      if (this._componentLoaded && this._item) {\n        await HELPERS[this.entry.platform].update(\n          this.hass!,\n          this._item.id,\n          this._item\n        );\n      }\n      await this._registryEditor?.updateEntry();\n      fireEvent(this, \"close-dialog\");\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _confirmDeleteItem(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      if (this._componentLoaded && this._item) {\n        await HELPERS[this.entry.platform].delete(this.hass!, this._item.id);\n      } else {\n        const stateObj = this.hass.states[this.entry.entity_id];\n        if (!stateObj?.attributes.restored) {\n          return;\n        }\n        await removeEntityRegistryEntry(this.hass!, this.entry.entity_id);\n      }\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          padding: 0 !important;\n        }\n        .form {\n          padding: 20px 24px;\n          margin-bottom: 53px;\n        }\n        .buttons {\n          position: absolute;\n          bottom: 0;\n          width: 100%;\n          box-sizing: border-box;\n          border-top: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n          background-color: var(--mdc-theme-surface, #fff);\n        }\n        .error {\n          color: var(--error-color);\n          margin-bottom: 8px;\n        }\n        .row {\n          margin-top: 8px;\n          color: var(--primary-text-color);\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-platform-helper-tab\": EntityRegistrySettingsHelper;\n  }\n}\n","import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-textfield\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntryUpdateParams,\n  ExtEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-registry-basic-editor\")\nexport class HaEntityRegistryBasicEditor extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entry!: ExtEntityRegistryEntry;\n\n  @state() private _origEntityId!: string;\n\n  @state() private _entityId!: string;\n\n  @state() private _areaId?: string | null;\n\n  @state() private _disabledBy!: string | null;\n\n  private _deviceLookup?: Record<string, DeviceRegistryEntry>;\n\n  @state() private _device?: DeviceRegistryEntry;\n\n  @state() private _submitting?: boolean;\n\n  public async updateEntry(): Promise<void> {\n    this._submitting = true;\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      new_entity_id: this._entityId.trim(),\n      area_id: this._areaId || null,\n    };\n    if (\n      this.entry.disabled_by !== this._disabledBy &&\n      (this._disabledBy === null || this._disabledBy === \"user\")\n    ) {\n      params.disabled_by = this._disabledBy;\n    }\n    try {\n      const result = await updateEntityRegistryEntry(\n        this.hass!,\n        this._origEntityId,\n        params\n      );\n      if (result.require_restart) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_restart_confirm\"\n          ),\n        });\n      }\n      if (result.reload_delay) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_delay_confirm\",\n            \"delay\",\n            result.reload_delay\n          ),\n        });\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._deviceLookup = {};\n        for (const device of devices) {\n          this._deviceLookup[device.id] = device;\n        }\n        if (!this._device && this.entry.device_id) {\n          this._device = this._deviceLookup[this.entry.device_id];\n        }\n      }),\n    ];\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (!changedProperties.has(\"entry\")) {\n      return;\n    }\n    if (this.entry) {\n      this._origEntityId = this.entry.entity_id;\n      this._entityId = this.entry.entity_id;\n      this._disabledBy = this.entry.disabled_by;\n      this._areaId = this.entry.area_id;\n      this._device =\n        this.entry.device_id && this._deviceLookup\n          ? this._deviceLookup[this.entry.device_id]\n          : undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.entry ||\n      this.entry.entity_id !== this._origEntityId\n    ) {\n      return html``;\n    }\n    const invalidDomainUpdate =\n      computeDomain(this._entityId.trim()) !==\n      computeDomain(this.entry.entity_id);\n\n    return html`\n      <ha-textfield\n        error-message=\"Domain needs to stay the same\"\n        .value=${this._entityId}\n        .label=${this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.entity_id\"\n        )}\n        .invalid=${invalidDomainUpdate}\n        .disabled=${this._submitting}\n        @input=${this._entityIdChanged}\n      ></ha-textfield>\n      <ha-area-picker\n        .hass=${this.hass}\n        .value=${this._areaId}\n        .placeholder=${this._device?.area_id}\n        @value-changed=${this._areaPicked}\n      ></ha-area-picker>\n      <div class=\"row\">\n        <ha-switch\n          .checked=${!this._disabledBy}\n          @change=${this._disabledByChanged}\n        >\n        </ha-switch>\n        <div>\n          <div>\n            ${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.enabled_label\"\n            )}\n          </div>\n          <div class=\"secondary\">\n            ${this._disabledBy && this._disabledBy !== \"user\"\n              ? this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                  \"cause\",\n                  this.hass.localize(\n                    `config_entry.disabled_by.${this._disabledBy}`\n                  )\n                )\n              : \"\"}\n            ${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.enabled_description\"\n            )}\n            <br />${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.note\"\n            )}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _areaPicked(ev: CustomEvent) {\n    this._areaId = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev): void {\n    this._entityId = ev.target.value;\n  }\n\n  private _disabledByChanged(ev: Event): void {\n    this._disabledBy = (ev.target as HaSwitch).checked ? null : \"user\";\n  }\n\n  static get styles() {\n    return css`\n      ha-switch {\n        margin-right: 16px;\n      }\n      .row {\n        margin-top: 8px;\n        color: var(--primary-text-color);\n        display: flex;\n        align-items: center;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      ha-textfield {\n        display: block;\n        margin-bottom: 8px;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}