import datetime


def get_time(delta=3):
    """
    A function that returns a string with the current time in the format DAY.MONTH.YEAR HOURS:MINUTES:SECONDS.

    :param delta: Time delta. Depends on the region you live in. Must be an Integer. By default it is set to on 3 (Russia/Moscow).
    :return: A string with current time.
    """
    delta = datetime.timedelta(hours=delta)
    current_time = (datetime.datetime.now(datetime.timezone.utc) + delta)
    return current_time.strftime("%d.%m.%Y %H:%M:%S")


def get_clock_emoji(date=None, delta=3) -> str:
    """
    The function returns a string with a clock emoji depending on the current local time.

    :param date: DateTime format date. If it was passed to the function, then the emoji will be received for this date, not for the current time.
    :param delta: Time delta. Depends on the region you live in. Must be an Integer. By default it is set to on 3 (Russia/Moscow).
    :return: A string with clock emoji.
    """

    delta = datetime.timedelta(hours=delta)
    emojis = ["üïê", "üïë", "üïí", "üïì", "üïî", "üïï", "üïñ", "üïó", "üïò", "üïô", "üïö", "üïõ",
              "üïú", "üïù", "üïû", "üïü", "üï†", "üï°", "üï¢", "üï£", "üï§", "üï•", "üï¶", "üïß"]
    if date is not None:
        current_time = date
    else:
        current_time = (datetime.datetime.now(datetime.timezone.utc) + delta)
    minutes = int(current_time.strftime("%M"))
    if minutes < 15 or minutes >= 45:
        return emojis[int(current_time.strftime("%I")) - 1]
    else:
        return emojis[int(current_time.strftime("%I")) + 12 - 1]


def get_time_str(include_period=True, delta=3):
    time_delta = datetime.timedelta(hours=delta)

    hours = ["—á–∞—Å", "–¥–≤–∞ —á–∞—Å–∞", "—Ç—Ä–∏ —á–∞—Å–∞", "—á–µ—Ç—ã—Ä–µ —á–∞—Å–∞", "–ø—è—Ç—å —á–∞—Å–æ–≤",
             "—à–µ—Å—Ç—å —á–∞—Å–æ–≤", "—Å–µ–º—å —á–∞—Å–æ–≤", "–≤–æ—Å–µ–º—å —á–∞—Å–æ–≤", "–¥–µ–≤—è—Ç—å —á–∞—Å–æ–≤", "–¥–µ—Å—è—Ç—å —á–∞—Å–æ–≤",
             "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å —á–∞—Å–æ–≤", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å —á–∞—Å–æ–≤"]

    bhours = ["–ø–µ—Ä–≤–æ–≥–æ", "–≤—Ç–æ—Ä–æ–≥–æ", "—Ç—Ä–µ—Ç—å–µ–≥–æ", "—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ", "–ø—è—Ç–æ–≥–æ",
              "—à–µ—Å—Ç–æ–≥–æ", "—Å–µ–¥—å–º–æ–≥–æ", "–≤–æ—Å—å–º–æ–≥–æ", "–¥–µ–≤—è—Ç–æ–≥–æ", "–¥–µ—Å—è—Ç–æ–≥–æ",
              "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ", "–ø–µ—Ä–≤–æ–≥–æ"]

    minutes = ["–æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞", "–¥–≤–µ –º–∏–Ω—É—Ç—ã", "—Ç—Ä–∏ –º–∏–Ω—É—Ç—ã", " —á–µ—Ç—ã—Ä–µ –º–∏–Ω—É—Ç—ã", "–ø—è—Ç—å –º–∏–Ω—É—Ç",
               "—à–µ—Å—Ç—å –º–∏–Ω—É—Ç", "—Å–µ–º—å –º–∏–Ω—É—Ç", "–≤–æ—Å–µ–º—å –º–∏–Ω—É—Ç", " –¥–µ–≤—è—Ç—å –º–∏–Ω—É—Ç", "–¥–µ—Å—è—Ç—å –º–∏–Ω—É—Ç",
               "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç",
               "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç", "–¥–≤–∞–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç",
               "–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞", "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–≤–µ –º–∏–Ω—É—Ç—ã", "–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã", "–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ –º–∏–Ω—É—Ç—ã", "–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç",
               "–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å –º–∏–Ω—É—Ç",  "–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–º—å –º–∏–Ω—É—Ç", "–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å –º–∏–Ω—É—Ç", "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å –º–∏–Ω—É—Ç", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç",
               "—Ç—Ä–∏–¥—Ü–∞—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–≤–µ –º–∏–Ω—É—Ç—ã", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ –º–∏–Ω—É—Ç—ã", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç",
               "—Ç—Ä–∏–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å –º–∏–Ω—É—Ç", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —Å–µ–º—å –º–∏–Ω—É—Ç", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å –º–∏–Ω—É—Ç", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å –º–∏–Ω—É—Ç", "—Å–æ—Ä–æ–∫ –º–∏–Ω—É—Ç",
               "—Å–æ—Ä–æ–∫ –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞", "—Å–æ—Ä–æ–∫ –¥–≤–µ –º–∏–Ω—É—Ç—ã", "—Å–æ—Ä–æ–∫ —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã", "—Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ –º–∏–Ω—É—Ç—ã", "—Å–æ—Ä–æ–∫ –ø—è—Ç—å –º–∏–Ω—É—Ç",
               "—Å–æ—Ä–æ–∫ —à–µ—Å—Ç—å –º–∏–Ω—É—Ç", "—Å–æ—Ä–æ–∫ —Å–µ–º—å –º–∏–Ω—É—Ç", "—Å–æ—Ä–æ–∫ –≤–æ—Å–µ–º—å –º–∏–Ω—É—Ç", "—Å–æ—Ä–æ–∫ –¥–µ–≤—è—Ç—å –º–∏–Ω—É—Ç", "–ø—è—Ç—å–¥–µ—Å—è—Ç –º–∏–Ω—É—Ç",
               "–ø—è—Ç—å–¥–µ—Å—è—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞", "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–≤–µ –º–∏–Ω—É—Ç—ã", "–ø—è—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã", "–ø—è—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ –º–∏–Ω—É—Ç—ã", "–ø—è—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å –º–∏–Ω—É—Ç",
               "–ø—è—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å –º–∏–Ω—É—Ç", "–ø—è—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å –º–∏–Ω—É—Ç", "–ø—è—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å –º–∏–Ω—É—Ç", "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å –º–∏–Ω—É—Ç"]

    bminutes = ["–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ –º–∏–Ω—É—Ç", "–±–µ–∑ –¥–µ—Å—è—Ç–∏ –º–∏–Ω—É—Ç", "–±–µ–∑ –ø—è—Ç–∏ –º–∏–Ω—É—Ç"]

    # 0-6: –Ω–æ—á—å, 7-11: —É—Ç—Ä–æ, 12-16: –¥–µ–Ω—å, 17-23: –≤–µ—á–µ—Ä
    periods = ["–Ω–æ—á—å", "—É—Ç—Ä–æ", "–¥–µ–Ω—å", "–≤–µ—á–µ—Ä"]
    bperiods = ["–Ω–æ—á–∏", "—É—Ç—Ä–∞", "–¥–Ω—è", "–≤–µ—á–µ—Ä–∞"]

    hour = minute = period = ""

    current_time = (datetime.datetime.now(datetime.timezone.utc) + time_delta)

    var_hour_12 = int(current_time.strftime("%I"))
    var_hour_24 = int(current_time.strftime("%H"))
    var_minute = int(current_time.strftime("%M"))
    # print(f"12h format: {var_hour_12}\n24h format: {var_hour_24}\nminute: {var_minute}")

    if var_minute == 0:
        hour = hours[var_hour_12 - 1]
        if 0 <= var_hour_24 <= 6:
            period = f" {bperiods[0]}"
        elif 7 <= var_hour_24 <= 11:
            period = f" {bperiods[1]}"
        elif 12 <= var_hour_24 <= 16:
            period = f" {bperiods[2]}"
        elif 17 <= var_hour_24 <= 23:
            period = f" {bperiods[3]}"
    elif var_minute != 0:
        minute = f" {minutes[var_minute - 1]}"
        hour = f" {bhours[var_hour_12]}"
        if 0 <= var_hour_24 <= 6:
            period = f", {periods[0]}"
        elif 7 <= var_hour_24 <= 11:
            period = f", {periods[1]}"
        elif 12 <= var_hour_24 <= 16:
            period = f", {periods[2]}"
        elif 17 <= var_hour_24 <= 23:
            period = f", {periods[3]}"

    if include_period:
        return f'{minute}{hour}{period}'.strip()
    else:
        return f'{minute} {hour}'.strip()
