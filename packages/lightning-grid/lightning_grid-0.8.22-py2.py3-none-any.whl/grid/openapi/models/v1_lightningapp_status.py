# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class V1LightningappStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_id': 'str',
        'last_state_status_transition_timestamp': 'datetime',
        'message': 'str',
        'phase': 'V1LightningappState',
        'source_upload_url': 'str',
        'start_timestamp': 'datetime',
        'stop_timestamp': 'datetime',
        'url': 'str'
    }

    attribute_map = {
        'image_id': 'imageId',
        'last_state_status_transition_timestamp': 'lastStateStatusTransitionTimestamp',
        'message': 'message',
        'phase': 'phase',
        'source_upload_url': 'sourceUploadUrl',
        'start_timestamp': 'startTimestamp',
        'stop_timestamp': 'stopTimestamp',
        'url': 'url'
    }

    def __init__(self, image_id: 'str' = None, last_state_status_transition_timestamp: 'datetime' = None, message: 'str' = None, phase: 'V1LightningappState' = None, source_upload_url: 'str' = None, start_timestamp: 'datetime' = None, stop_timestamp: 'datetime' = None, url: 'str' = None, _configuration=None):  # noqa: E501
        """V1LightningappStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._image_id = None
        self._last_state_status_transition_timestamp = None
        self._message = None
        self._phase = None
        self._source_upload_url = None
        self._start_timestamp = None
        self._stop_timestamp = None
        self._url = None
        self.discriminator = None

        if image_id is not None:
            self.image_id = image_id
        if last_state_status_transition_timestamp is not None:
            self.last_state_status_transition_timestamp = last_state_status_transition_timestamp
        if message is not None:
            self.message = message
        if phase is not None:
            self.phase = phase
        if source_upload_url is not None:
            self.source_upload_url = source_upload_url
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if stop_timestamp is not None:
            self.stop_timestamp = stop_timestamp
        if url is not None:
            self.url = url

    @property
    def image_id(self) -> 'str':
        """Gets the image_id of this V1LightningappStatus.  # noqa: E501


        :return: The image_id of this V1LightningappStatus.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id: 'str'):
        """Sets the image_id of this V1LightningappStatus.


        :param image_id: The image_id of this V1LightningappStatus.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def last_state_status_transition_timestamp(self) -> 'datetime':
        """Gets the last_state_status_transition_timestamp of this V1LightningappStatus.  # noqa: E501


        :return: The last_state_status_transition_timestamp of this V1LightningappStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_state_status_transition_timestamp

    @last_state_status_transition_timestamp.setter
    def last_state_status_transition_timestamp(self, last_state_status_transition_timestamp: 'datetime'):
        """Sets the last_state_status_transition_timestamp of this V1LightningappStatus.


        :param last_state_status_transition_timestamp: The last_state_status_transition_timestamp of this V1LightningappStatus.  # noqa: E501
        :type: datetime
        """

        self._last_state_status_transition_timestamp = last_state_status_transition_timestamp

    @property
    def message(self) -> 'str':
        """Gets the message of this V1LightningappStatus.  # noqa: E501


        :return: The message of this V1LightningappStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1LightningappStatus.


        :param message: The message of this V1LightningappStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phase(self) -> 'V1LightningappState':
        """Gets the phase of this V1LightningappStatus.  # noqa: E501


        :return: The phase of this V1LightningappStatus.  # noqa: E501
        :rtype: V1LightningappState
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'V1LightningappState'):
        """Sets the phase of this V1LightningappStatus.


        :param phase: The phase of this V1LightningappStatus.  # noqa: E501
        :type: V1LightningappState
        """

        self._phase = phase

    @property
    def source_upload_url(self) -> 'str':
        """Gets the source_upload_url of this V1LightningappStatus.  # noqa: E501

        url to which the source code can be uploaded - needed only if local source and not github. Client will send the request that indicates that it needs to upload the source to s3, controlplane will fill this url and response will be sent back to the client. Client will then use this url to upload the source to s3.  # noqa: E501

        :return: The source_upload_url of this V1LightningappStatus.  # noqa: E501
        :rtype: str
        """
        return self._source_upload_url

    @source_upload_url.setter
    def source_upload_url(self, source_upload_url: 'str'):
        """Sets the source_upload_url of this V1LightningappStatus.

        url to which the source code can be uploaded - needed only if local source and not github. Client will send the request that indicates that it needs to upload the source to s3, controlplane will fill this url and response will be sent back to the client. Client will then use this url to upload the source to s3.  # noqa: E501

        :param source_upload_url: The source_upload_url of this V1LightningappStatus.  # noqa: E501
        :type: str
        """

        self._source_upload_url = source_upload_url

    @property
    def start_timestamp(self) -> 'datetime':
        """Gets the start_timestamp of this V1LightningappStatus.  # noqa: E501


        :return: The start_timestamp of this V1LightningappStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp: 'datetime'):
        """Sets the start_timestamp of this V1LightningappStatus.


        :param start_timestamp: The start_timestamp of this V1LightningappStatus.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def stop_timestamp(self) -> 'datetime':
        """Gets the stop_timestamp of this V1LightningappStatus.  # noqa: E501


        :return: The stop_timestamp of this V1LightningappStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_timestamp

    @stop_timestamp.setter
    def stop_timestamp(self, stop_timestamp: 'datetime'):
        """Sets the stop_timestamp of this V1LightningappStatus.


        :param stop_timestamp: The stop_timestamp of this V1LightningappStatus.  # noqa: E501
        :type: datetime
        """

        self._stop_timestamp = stop_timestamp

    @property
    def url(self) -> 'str':
        """Gets the url of this V1LightningappStatus.  # noqa: E501


        :return: The url of this V1LightningappStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: 'str'):
        """Sets the url of this V1LightningappStatus.


        :param url: The url of this V1LightningappStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LightningappStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LightningappStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LightningappStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'V1LightningappStatus') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1LightningappStatus):
            return True

        return self.to_dict() != other.to_dict()
