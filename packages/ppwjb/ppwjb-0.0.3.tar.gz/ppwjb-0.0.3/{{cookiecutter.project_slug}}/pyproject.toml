{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.project_short_description }}."
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.md"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
]
packages = [
    { include = "{{ cookiecutter.project_slug }}" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
{%- if cookiecutter.command_line_interface|lower == 'fire' %}
fire = "0.4.0"
{%- endif %}

black  = { version = "20.8b1", optional = true}
isort  = { version = "5.6.4", optional = true}
flake8  = { version = "3.8.4", optional = true}
flake8-docstrings = { version = "^1.6.0", optional = true }
pytest  = { version = "6.1.2", optional = true}
pytest-cov  = { version = "2.10.1", optional = true}
tox  = { version = "^3.20.1", optional = true}
virtualenv  = { version = "^20.2.2", optional = true}
pip  = { version = "^20.3.1", optional = true}
twine  = { version = "^3.3.0", optional = true}
pre-commit = {version = "^2.12.0", optional = true}
toml = {version = "^0.10.2", optional = true}
bandit = {version = "^1.7.0", optional = true}
ipykernel = {version = "^6.4.1", optional = true}
livereload = {version = "^2.6.3", optional = true}
flake8-print = {version = "^4.0.0", optional = true}
pandas-vet = {version = "^0.2.2", optional = true}
nbqa = {version = "^1.2.2", optional = true}
pyupgrade = {version = "^2.19.1", optional = true}
jupyter-book = {version = "^0.11.3", optional = true}
plotly = {version = "^5.3.1", optional = true}
kaleido = {version = "0.2.1", optional = true}
Jinja2 = {version = "<3.1", optional = true}    # workaround for jupyter-book
sphinxcontrib-mermaid = {version = "^0.7.1", optional = true}
nb-js-diagrammers = {version = "^0.0.7", optional = true}


[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "pytest-cov",
    "bandit",
    "flake8-print",
    "pandas-vet",
    "nbqa",
    "pyupgrade",
    ]

dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml", "ipykernel"]

doc = [
    "jupyter-book",
    "plotly",
    "kaleido",
    "sphinxcontrib-mermaid",
    "nb-js-diagrammers"
    ]

{% if cookiecutter.command_line_interface|lower == 'fire' -%}
[tool.poetry.scripts]
{{ cookiecutter.project_slug }} = '{{ cookiecutter.project_slug }}.cli:main'
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | book
)/
'''
