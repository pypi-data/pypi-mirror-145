apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ _name or 'nginx' }}
  {% if _namespace -%}
  namespace: {{ _namespace }}
  {%- endif %}
spec:
  replicas: {{ _replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: {{ _name or 'nginx' }}
  template:
    metadata:
      labels:
        app: {{ _name or 'nginx' }}
    spec:
      imagePullSecrets: []
      nodeSelector: {}
        #node.type: db
      tolerations: []
      #- key: "only"
      #  operator: "Equal"
      #  value: "db"
      #  effect: "NoSchedule"
      affinity:
        podAntiAffinity: {}
        nodeAffinity: {}
      volumes: []
      #- name: postgres
      #  hostPath:
      #    path: /data/middleware-data/postgres-data
      #    type: DirectoryOrCreate
      containers:
      - image: {{ _name or 'nginx' }}
        imagePullPolicy: IfNotPresent
        name: {{ _name or 'nginx' }}
        args: []
        env: []
        ports:
          - containerPort: 80
            name: http
        volumeMounts: []
          #- name: postgres
          #  subPath: postgres
          #  mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: 50Mi
            cpu: 100m
            ephemeral-storage: "2Gi"
          limits:
            memory: 50Mi
            cpu: 100m
            ephemeral-storage: "10Gi"
