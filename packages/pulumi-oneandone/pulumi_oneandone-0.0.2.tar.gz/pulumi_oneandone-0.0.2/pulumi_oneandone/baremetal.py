# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BaremetalArgs', 'Baremetal']

@pulumi.input_type
class BaremetalArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 baremetal_model_id: Optional[pulumi.Input[str]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firewall_policy_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 monitoring_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 ssh_key_public: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Baremetal resource.
        """
        pulumi.set(__self__, "image", image)
        if baremetal_model_id is not None:
            pulumi.set(__self__, "baremetal_model_id", baremetal_model_id)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if firewall_policy_id is not None:
            pulumi.set(__self__, "firewall_policy_id", firewall_policy_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if monitoring_policy_id is not None:
            pulumi.set(__self__, "monitoring_policy_id", monitoring_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_key_path is not None:
            pulumi.set(__self__, "ssh_key_path", ssh_key_path)
        if ssh_key_public is not None:
            pulumi.set(__self__, "ssh_key_public", ssh_key_public)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="baremetalModelId")
    def baremetal_model_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "baremetal_model_id")

    @baremetal_model_id.setter
    def baremetal_model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baremetal_model_id", value)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="firewallPolicyId")
    def firewall_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_policy_id")

    @firewall_policy_id.setter
    def firewall_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_policy_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @property
    @pulumi.getter(name="monitoringPolicyId")
    def monitoring_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitoring_policy_id")

    @monitoring_policy_id.setter
    def monitoring_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)

    @property
    @pulumi.getter(name="sshKeyPublic")
    def ssh_key_public(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_public")

    @ssh_key_public.setter
    def ssh_key_public(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_public", value)


@pulumi.input_type
class _BaremetalState:
    def __init__(__self__, *,
                 baremetal_model_id: Optional[pulumi.Input[str]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firewall_policy_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['BaremetalIpArgs']]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 monitoring_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 ssh_key_public: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Baremetal resources.
        """
        if baremetal_model_id is not None:
            pulumi.set(__self__, "baremetal_model_id", baremetal_model_id)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if firewall_policy_id is not None:
            pulumi.set(__self__, "firewall_policy_id", firewall_policy_id)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if monitoring_policy_id is not None:
            pulumi.set(__self__, "monitoring_policy_id", monitoring_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_key_path is not None:
            pulumi.set(__self__, "ssh_key_path", ssh_key_path)
        if ssh_key_public is not None:
            pulumi.set(__self__, "ssh_key_public", ssh_key_public)

    @property
    @pulumi.getter(name="baremetalModelId")
    def baremetal_model_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "baremetal_model_id")

    @baremetal_model_id.setter
    def baremetal_model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baremetal_model_id", value)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="firewallPolicyId")
    def firewall_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_policy_id")

    @firewall_policy_id.setter
    def firewall_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_policy_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BaremetalIpArgs']]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BaremetalIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @property
    @pulumi.getter(name="monitoringPolicyId")
    def monitoring_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitoring_policy_id")

    @monitoring_policy_id.setter
    def monitoring_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)

    @property
    @pulumi.getter(name="sshKeyPublic")
    def ssh_key_public(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_public")

    @ssh_key_public.setter
    def ssh_key_public(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_public", value)


class Baremetal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 baremetal_model_id: Optional[pulumi.Input[str]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firewall_policy_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 monitoring_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 ssh_key_public: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Baremetal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BaremetalArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Baremetal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BaremetalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BaremetalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 baremetal_model_id: Optional[pulumi.Input[str]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firewall_policy_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 monitoring_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 ssh_key_public: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BaremetalArgs.__new__(BaremetalArgs)

            __props__.__dict__["baremetal_model_id"] = baremetal_model_id
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["description"] = description
            __props__.__dict__["firewall_policy_id"] = firewall_policy_id
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["ip"] = ip
            __props__.__dict__["loadbalancer_id"] = loadbalancer_id
            __props__.__dict__["monitoring_policy_id"] = monitoring_policy_id
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            __props__.__dict__["ssh_key_path"] = ssh_key_path
            __props__.__dict__["ssh_key_public"] = ssh_key_public
            __props__.__dict__["ips"] = None
        super(Baremetal, __self__).__init__(
            'oneandone:index/baremetal:Baremetal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            baremetal_model_id: Optional[pulumi.Input[str]] = None,
            datacenter: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            firewall_policy_id: Optional[pulumi.Input[str]] = None,
            image: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BaremetalIpArgs']]]]] = None,
            loadbalancer_id: Optional[pulumi.Input[str]] = None,
            monitoring_policy_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            ssh_key_path: Optional[pulumi.Input[str]] = None,
            ssh_key_public: Optional[pulumi.Input[str]] = None) -> 'Baremetal':
        """
        Get an existing Baremetal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BaremetalState.__new__(_BaremetalState)

        __props__.__dict__["baremetal_model_id"] = baremetal_model_id
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["description"] = description
        __props__.__dict__["firewall_policy_id"] = firewall_policy_id
        __props__.__dict__["image"] = image
        __props__.__dict__["ip"] = ip
        __props__.__dict__["ips"] = ips
        __props__.__dict__["loadbalancer_id"] = loadbalancer_id
        __props__.__dict__["monitoring_policy_id"] = monitoring_policy_id
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["ssh_key_path"] = ssh_key_path
        __props__.__dict__["ssh_key_public"] = ssh_key_public
        return Baremetal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="baremetalModelId")
    def baremetal_model_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "baremetal_model_id")

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="firewallPolicyId")
    def firewall_policy_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "firewall_policy_id")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Sequence['outputs.BaremetalIp']]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter(name="monitoringPolicyId")
    def monitoring_policy_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "monitoring_policy_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_key_path")

    @property
    @pulumi.getter(name="sshKeyPublic")
    def ssh_key_public(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_key_public")

