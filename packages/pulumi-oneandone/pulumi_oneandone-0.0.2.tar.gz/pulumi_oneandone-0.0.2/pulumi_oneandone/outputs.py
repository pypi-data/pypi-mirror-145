# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'BaremetalIp',
    'FirewallPolicyRule',
    'LoadbalancerRule',
    'MonitoringPolicyPort',
    'MonitoringPolicyProcess',
    'MonitoringPolicyThreshold',
    'MonitoringPolicyThresholdCpus',
    'MonitoringPolicyThresholdCpusCritical',
    'MonitoringPolicyThresholdCpusWarning',
    'MonitoringPolicyThresholdDisk',
    'MonitoringPolicyThresholdDiskCritical',
    'MonitoringPolicyThresholdDiskWarning',
    'MonitoringPolicyThresholdInternalPing',
    'MonitoringPolicyThresholdInternalPingCritical',
    'MonitoringPolicyThresholdInternalPingWarning',
    'MonitoringPolicyThresholdRam',
    'MonitoringPolicyThresholdRamCritical',
    'MonitoringPolicyThresholdRamWarning',
    'MonitoringPolicyThresholdTransfer',
    'MonitoringPolicyThresholdTransferCritical',
    'MonitoringPolicyThresholdTransferWarning',
    'ServerHdd',
    'ServerIp',
    'SharedStorageStorageServer',
    'SshKeyServer',
]

@pulumi.output_type
class BaremetalIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firewallPolicyId":
            suggest = "firewall_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BaremetalIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BaremetalIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BaremetalIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firewall_policy_id: Optional[str] = None,
                 id: Optional[str] = None,
                 ip: Optional[str] = None):
        if firewall_policy_id is not None:
            pulumi.set(__self__, "firewall_policy_id", firewall_policy_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="firewallPolicyId")
    def firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "firewall_policy_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class FirewallPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portFrom":
            suggest = "port_from"
        elif key == "portTo":
            suggest = "port_to"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 action: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 port: Optional[str] = None,
                 port_from: Optional[int] = None,
                 port_to: Optional[int] = None,
                 source_ip: Optional[str] = None):
        pulumi.set(__self__, "protocol", protocol)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_from is not None:
            pulumi.set(__self__, "port_from", port_from)
        if port_to is not None:
            pulumi.set(__self__, "port_to", port_to)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portFrom")
    def port_from(self) -> Optional[int]:
        return pulumi.get(self, "port_from")

    @property
    @pulumi.getter(name="portTo")
    def port_to(self) -> Optional[int]:
        return pulumi.get(self, "port_to")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class LoadbalancerRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portBalancer":
            suggest = "port_balancer"
        elif key == "portServer":
            suggest = "port_server"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadbalancerRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadbalancerRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadbalancerRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_balancer: int,
                 port_server: int,
                 protocol: str,
                 source_ip: str,
                 id: Optional[str] = None):
        pulumi.set(__self__, "port_balancer", port_balancer)
        pulumi.set(__self__, "port_server", port_server)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_ip", source_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="portBalancer")
    def port_balancer(self) -> int:
        return pulumi.get(self, "port_balancer")

    @property
    @pulumi.getter(name="portServer")
    def port_server(self) -> int:
        return pulumi.get(self, "port_server")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class MonitoringPolicyPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailNotification":
            suggest = "email_notification"
        elif key == "alertIf":
            suggest = "alert_if"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringPolicyPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringPolicyPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringPolicyPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_notification: bool,
                 port: int,
                 alert_if: Optional[str] = None,
                 id: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "email_notification", email_notification)
        pulumi.set(__self__, "port", port)
        if alert_if is not None:
            pulumi.set(__self__, "alert_if", alert_if)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="emailNotification")
    def email_notification(self) -> bool:
        return pulumi.get(self, "email_notification")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="alertIf")
    def alert_if(self) -> Optional[str]:
        return pulumi.get(self, "alert_if")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class MonitoringPolicyProcess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailNotification":
            suggest = "email_notification"
        elif key == "alertIf":
            suggest = "alert_if"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringPolicyProcess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringPolicyProcess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringPolicyProcess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_notification: bool,
                 process: str,
                 alert_if: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "email_notification", email_notification)
        pulumi.set(__self__, "process", process)
        if alert_if is not None:
            pulumi.set(__self__, "alert_if", alert_if)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="emailNotification")
    def email_notification(self) -> bool:
        return pulumi.get(self, "email_notification")

    @property
    @pulumi.getter
    def process(self) -> str:
        return pulumi.get(self, "process")

    @property
    @pulumi.getter(name="alertIf")
    def alert_if(self) -> Optional[str]:
        return pulumi.get(self, "alert_if")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class MonitoringPolicyThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalPings":
            suggest = "internal_pings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringPolicyThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringPolicyThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringPolicyThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpus: Sequence['outputs.MonitoringPolicyThresholdCpus'],
                 disks: Sequence['outputs.MonitoringPolicyThresholdDisk'],
                 internal_pings: Sequence['outputs.MonitoringPolicyThresholdInternalPing'],
                 rams: Sequence['outputs.MonitoringPolicyThresholdRam'],
                 transfers: Sequence['outputs.MonitoringPolicyThresholdTransfer']):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "internal_pings", internal_pings)
        pulumi.set(__self__, "rams", rams)
        pulumi.set(__self__, "transfers", transfers)

    @property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.MonitoringPolicyThresholdCpus']:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.MonitoringPolicyThresholdDisk']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="internalPings")
    def internal_pings(self) -> Sequence['outputs.MonitoringPolicyThresholdInternalPing']:
        return pulumi.get(self, "internal_pings")

    @property
    @pulumi.getter
    def rams(self) -> Sequence['outputs.MonitoringPolicyThresholdRam']:
        return pulumi.get(self, "rams")

    @property
    @pulumi.getter
    def transfers(self) -> Sequence['outputs.MonitoringPolicyThresholdTransfer']:
        return pulumi.get(self, "transfers")


@pulumi.output_type
class MonitoringPolicyThresholdCpus(dict):
    def __init__(__self__, *,
                 criticals: Sequence['outputs.MonitoringPolicyThresholdCpusCritical'],
                 warnings: Sequence['outputs.MonitoringPolicyThresholdCpusWarning']):
        pulumi.set(__self__, "criticals", criticals)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def criticals(self) -> Sequence['outputs.MonitoringPolicyThresholdCpusCritical']:
        return pulumi.get(self, "criticals")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.MonitoringPolicyThresholdCpusWarning']:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class MonitoringPolicyThresholdCpusCritical(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdCpusWarning(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdDisk(dict):
    def __init__(__self__, *,
                 criticals: Sequence['outputs.MonitoringPolicyThresholdDiskCritical'],
                 warnings: Sequence['outputs.MonitoringPolicyThresholdDiskWarning']):
        pulumi.set(__self__, "criticals", criticals)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def criticals(self) -> Sequence['outputs.MonitoringPolicyThresholdDiskCritical']:
        return pulumi.get(self, "criticals")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.MonitoringPolicyThresholdDiskWarning']:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class MonitoringPolicyThresholdDiskCritical(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdDiskWarning(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdInternalPing(dict):
    def __init__(__self__, *,
                 criticals: Sequence['outputs.MonitoringPolicyThresholdInternalPingCritical'],
                 warnings: Sequence['outputs.MonitoringPolicyThresholdInternalPingWarning']):
        pulumi.set(__self__, "criticals", criticals)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def criticals(self) -> Sequence['outputs.MonitoringPolicyThresholdInternalPingCritical']:
        return pulumi.get(self, "criticals")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.MonitoringPolicyThresholdInternalPingWarning']:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class MonitoringPolicyThresholdInternalPingCritical(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdInternalPingWarning(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdRam(dict):
    def __init__(__self__, *,
                 criticals: Sequence['outputs.MonitoringPolicyThresholdRamCritical'],
                 warnings: Sequence['outputs.MonitoringPolicyThresholdRamWarning']):
        pulumi.set(__self__, "criticals", criticals)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def criticals(self) -> Sequence['outputs.MonitoringPolicyThresholdRamCritical']:
        return pulumi.get(self, "criticals")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.MonitoringPolicyThresholdRamWarning']:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class MonitoringPolicyThresholdRamCritical(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdRamWarning(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdTransfer(dict):
    def __init__(__self__, *,
                 criticals: Sequence['outputs.MonitoringPolicyThresholdTransferCritical'],
                 warnings: Sequence['outputs.MonitoringPolicyThresholdTransferWarning']):
        pulumi.set(__self__, "criticals", criticals)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def criticals(self) -> Sequence['outputs.MonitoringPolicyThresholdTransferCritical']:
        return pulumi.get(self, "criticals")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.MonitoringPolicyThresholdTransferWarning']:
        return pulumi.get(self, "warnings")


@pulumi.output_type
class MonitoringPolicyThresholdTransferCritical(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringPolicyThresholdTransferWarning(dict):
    def __init__(__self__, *,
                 alert: bool,
                 value: int):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def alert(self) -> bool:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServerHdd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "isMain":
            suggest = "is_main"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerHdd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerHdd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerHdd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 id: Optional[str] = None,
                 is_main: Optional[bool] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_main is not None:
            pulumi.set(__self__, "is_main", is_main)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMain")
    def is_main(self) -> Optional[bool]:
        return pulumi.get(self, "is_main")


@pulumi.output_type
class ServerIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firewallPolicyId":
            suggest = "firewall_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firewall_policy_id: Optional[str] = None,
                 id: Optional[str] = None,
                 ip: Optional[str] = None):
        if firewall_policy_id is not None:
            pulumi.set(__self__, "firewall_policy_id", firewall_policy_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="firewallPolicyId")
    def firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "firewall_policy_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SharedStorageStorageServer(dict):
    def __init__(__self__, *,
                 id: str,
                 rights: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "rights", rights)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rights(self) -> str:
        return pulumi.get(self, "rights")


@pulumi.output_type
class SshKeyServer(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


